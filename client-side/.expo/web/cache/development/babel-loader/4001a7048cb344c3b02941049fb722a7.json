{"ast":null,"code":"var _jsxFileName = \"/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/node_modules/react-native-gesture-handler/Swipeable.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { PanGestureHandler, TapGestureHandler, State } from \"./GestureHandler\";\nvar DRAG_TOSS = 0.05;\nexport default class Swipeable extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this._updateAnimatedEvent = (props, state) => {\n      var {\n        friction,\n        overshootFriction,\n        useNativeAnimations\n      } = props;\n      var {\n        dragX,\n        rowTranslation,\n        leftWidth = 0,\n        rowWidth = 0\n      } = state;\n      var {\n        rightOffset = rowWidth\n      } = state;\n      var rightWidth = Math.max(0, rowWidth - rightOffset);\n      var {\n        overshootLeft = leftWidth > 0,\n        overshootRight = rightWidth > 0\n      } = props;\n      var transX = Animated.add(rowTranslation, dragX.interpolate({\n        inputRange: [0, friction],\n        outputRange: [0, 1]\n      })).interpolate({\n        inputRange: [-rightWidth - (overshootRight ? 1 : overshootFriction), -rightWidth, leftWidth, leftWidth + (overshootLeft ? 1 : overshootFriction)],\n        outputRange: [-rightWidth - (overshootRight || overshootFriction > 1 ? 1 : 0), -rightWidth, leftWidth, leftWidth + (overshootLeft || overshootFriction > 1 ? 1 : 0)]\n      });\n      this._transX = transX;\n      this._showLeftAction = leftWidth > 0 ? transX.interpolate({\n        inputRange: [-1, 0, leftWidth],\n        outputRange: [0, 0, 1]\n      }) : new Animated.Value(0);\n      this._leftActionTranslate = this._showLeftAction.interpolate({\n        inputRange: [0, Number.MIN_VALUE],\n        outputRange: [-10000, 0],\n        extrapolate: 'clamp'\n      });\n      this._showRightAction = rightWidth > 0 ? transX.interpolate({\n        inputRange: [-rightWidth, 0, 1],\n        outputRange: [1, 0, 0]\n      }) : new Animated.Value(0);\n      this._rightActionTranslate = this._showRightAction.interpolate({\n        inputRange: [0, Number.MIN_VALUE],\n        outputRange: [-10000, 0],\n        extrapolate: 'clamp'\n      });\n    };\n\n    this._onTapHandlerStateChange = (_ref) => {\n      var {\n        nativeEvent\n      } = _ref;\n\n      if (nativeEvent.oldState === State.ACTIVE) {\n        this.close();\n      }\n    };\n\n    this._onHandlerStateChange = (_ref2) => {\n      var {\n        nativeEvent\n      } = _ref2;\n\n      if (nativeEvent.oldState === State.ACTIVE) {\n        this._handleRelease(nativeEvent);\n      }\n    };\n\n    this._handleRelease = nativeEvent => {\n      var {\n        velocityX,\n        translationX: dragX\n      } = nativeEvent;\n      var {\n        leftWidth = 0,\n        rowWidth = 0,\n        rowState\n      } = this.state;\n      var {\n        rightOffset = rowWidth\n      } = this.state;\n      var rightWidth = rowWidth - rightOffset;\n      var {\n        friction,\n        leftThreshold = leftWidth / 2,\n        rightThreshold = rightWidth / 2\n      } = this.props;\n      var startOffsetX = this._currentOffset() + dragX / friction;\n      var translationX = (dragX + DRAG_TOSS * velocityX) / friction;\n      var toValue = 0;\n\n      if (rowState === 0) {\n        if (translationX > leftThreshold) {\n          toValue = leftWidth;\n        } else if (translationX < -rightThreshold) {\n          toValue = -rightWidth;\n        }\n      } else if (rowState === 1) {\n        if (translationX > -leftThreshold) {\n          toValue = leftWidth;\n        }\n      } else {\n        if (translationX < rightThreshold) {\n          toValue = -rightWidth;\n        }\n      }\n\n      this._animateRow(startOffsetX, toValue, velocityX / friction);\n    };\n\n    this._animateRow = (fromValue, toValue, velocityX) => {\n      var {\n        dragX,\n        rowTranslation\n      } = this.state;\n      dragX.setValue(0);\n      rowTranslation.setValue(fromValue);\n      this.setState({\n        rowState: Math.sign(toValue)\n      });\n      Animated.spring(rowTranslation, _objectSpread({\n        restSpeedThreshold: 1.7,\n        restDisplacementThreshold: 0.4,\n        velocity: velocityX,\n        bounciness: 0,\n        toValue,\n        useNativeDriver: this.props.useNativeAnimations\n      }, this.props.animationOptions)).start((_ref3) => {\n        var {\n          finished\n        } = _ref3;\n\n        if (finished) {\n          if (toValue > 0 && this.props.onSwipeableLeftOpen) {\n            this.props.onSwipeableLeftOpen();\n          } else if (toValue < 0 && this.props.onSwipeableRightOpen) {\n            this.props.onSwipeableRightOpen();\n          }\n\n          if (toValue === 0) {\n            this.props.onSwipeableClose && this.props.onSwipeableClose();\n          } else {\n            this.props.onSwipeableOpen && this.props.onSwipeableOpen();\n          }\n        }\n      });\n\n      if (toValue > 0 && this.props.onSwipeableLeftWillOpen) {\n        this.props.onSwipeableLeftWillOpen();\n      } else if (toValue < 0 && this.props.onSwipeableRightWillOpen) {\n        this.props.onSwipeableRightWillOpen();\n      }\n\n      if (toValue === 0) {\n        this.props.onSwipeableWillClose && this.props.onSwipeableWillClose();\n      } else {\n        this.props.onSwipeableWillOpen && this.props.onSwipeableWillOpen();\n      }\n    };\n\n    this._onRowLayout = (_ref4) => {\n      var {\n        nativeEvent\n      } = _ref4;\n      this.setState({\n        rowWidth: nativeEvent.layout.width\n      });\n    };\n\n    this._currentOffset = () => {\n      var {\n        leftWidth = 0,\n        rowWidth = 0,\n        rowState\n      } = this.state;\n      var {\n        rightOffset = rowWidth\n      } = this.state;\n      var rightWidth = rowWidth - rightOffset;\n\n      if (rowState === 1) {\n        return leftWidth;\n      } else if (rowState === -1) {\n        return -rightWidth;\n      }\n\n      return 0;\n    };\n\n    this.close = () => {\n      this._animateRow(this._currentOffset(), 0);\n    };\n\n    this.openLeft = () => {\n      var {\n        leftWidth = 0\n      } = this.state;\n\n      this._animateRow(this._currentOffset(), leftWidth);\n    };\n\n    this.openRight = () => {\n      var {\n        rowWidth = 0\n      } = this.state;\n      var {\n        rightOffset = rowWidth\n      } = this.state;\n      var rightWidth = rowWidth - rightOffset;\n\n      this._animateRow(this._currentOffset(), -rightWidth);\n    };\n\n    var _dragX = new Animated.Value(0);\n\n    this.state = {\n      dragX: _dragX,\n      rowTranslation: new Animated.Value(0),\n      rowState: 0,\n      leftWidth: undefined,\n      rightOffset: undefined,\n      rowWidth: undefined\n    };\n\n    this._updateAnimatedEvent(_props, this.state);\n\n    this._onGestureEvent = Animated.event([{\n      nativeEvent: {\n        translationX: _dragX\n      }\n    }], {\n      useNativeDriver: _props.useNativeAnimations\n    });\n  }\n\n  UNSAFE_componentWillUpdate(props, state) {\n    if (this.props.friction !== props.friction || this.props.overshootLeft !== props.overshootLeft || this.props.overshootRight !== props.overshootRight || this.props.overshootFriction !== props.overshootFriction || this.state.leftWidth !== state.leftWidth || this.state.rightOffset !== state.rightOffset || this.state.rowWidth !== state.rowWidth) {\n      this._updateAnimatedEvent(props, state);\n    }\n  }\n\n  render() {\n    var {\n      rowState\n    } = this.state;\n    var {\n      children,\n      renderLeftActions,\n      renderRightActions\n    } = this.props;\n    var left = renderLeftActions && React.createElement(Animated.View, {\n      style: [styles.leftActions, {\n        transform: [{\n          translateX: this._leftActionTranslate\n        }]\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 7\n      }\n    }, renderLeftActions(this._showLeftAction, this._transX), React.createElement(View, {\n      onLayout: (_ref5) => {\n        var {\n          nativeEvent\n        } = _ref5;\n        return this.setState({\n          leftWidth: nativeEvent.layout.x\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }\n    }));\n    var right = renderRightActions && React.createElement(Animated.View, {\n      style: [styles.rightActions, {\n        transform: [{\n          translateX: this._rightActionTranslate\n        }]\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 7\n      }\n    }, renderRightActions(this._showRightAction, this._transX), React.createElement(View, {\n      onLayout: (_ref6) => {\n        var {\n          nativeEvent\n        } = _ref6;\n        return this.setState({\n          rightOffset: nativeEvent.layout.x\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }\n    }));\n    return React.createElement(PanGestureHandler, _extends({\n      activeOffsetX: [-10, 10]\n    }, this.props, {\n      onGestureEvent: this._onGestureEvent,\n      onHandlerStateChange: this._onHandlerStateChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 7\n      }\n    }), React.createElement(Animated.View, {\n      onLayout: this._onRowLayout,\n      style: [styles.container, this.props.containerStyle],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 9\n      }\n    }, left, right, React.createElement(TapGestureHandler, {\n      enabled: rowState !== 0,\n      onHandlerStateChange: this._onTapHandlerStateChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 11\n      }\n    }, React.createElement(Animated.View, {\n      pointerEvents: rowState === 0 ? 'auto' : 'box-only',\n      style: [{\n        transform: [{\n          translateX: this._transX\n        }]\n      }, this.props.childrenContainerStyle],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 13\n      }\n    }, children))));\n  }\n\n}\nSwipeable.defaultProps = {\n  friction: 1,\n  overshootFriction: 1,\n  useNativeAnimations: true\n};\nvar styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden'\n  },\n  leftActions: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row'\n  }),\n  rightActions: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse'\n  })\n});","map":{"version":3,"sources":["/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/node_modules/react-native-gesture-handler/Swipeable.js"],"names":["React","Component","PanGestureHandler","TapGestureHandler","State","DRAG_TOSS","Swipeable","constructor","props","_updateAnimatedEvent","state","friction","overshootFriction","useNativeAnimations","dragX","rowTranslation","leftWidth","rowWidth","rightOffset","rightWidth","Math","max","overshootLeft","overshootRight","transX","Animated","add","interpolate","inputRange","outputRange","_transX","_showLeftAction","Value","_leftActionTranslate","Number","MIN_VALUE","extrapolate","_showRightAction","_rightActionTranslate","_onTapHandlerStateChange","nativeEvent","oldState","ACTIVE","close","_onHandlerStateChange","_handleRelease","velocityX","translationX","rowState","leftThreshold","rightThreshold","startOffsetX","_currentOffset","toValue","_animateRow","fromValue","setValue","setState","sign","spring","restSpeedThreshold","restDisplacementThreshold","velocity","bounciness","useNativeDriver","animationOptions","start","finished","onSwipeableLeftOpen","onSwipeableRightOpen","onSwipeableClose","onSwipeableOpen","onSwipeableLeftWillOpen","onSwipeableRightWillOpen","onSwipeableWillClose","onSwipeableWillOpen","_onRowLayout","layout","width","openLeft","openRight","undefined","_onGestureEvent","event","UNSAFE_componentWillUpdate","render","children","renderLeftActions","renderRightActions","left","styles","leftActions","transform","translateX","x","right","rightActions","container","containerStyle","childrenContainerStyle","defaultProps","StyleSheet","create","overflow","absoluteFillObject","flexDirection","I18nManager","isRTL"],"mappings":"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","sourcesContent":["// @flow\n\n// Similarily to the DrawerLayout component this deserves to be put in a\n// separate repo. Although, keeping it here for the time being will allow us\n// to move faster and fix possible issues quicker\n\nimport React, { Component } from 'react';\nimport { Animated, StyleSheet, View, I18nManager } from 'react-native';\n\nimport { PanGestureHandler, TapGestureHandler, State } from './GestureHandler';\n\nconst DRAG_TOSS = 0.05;\n\nexport type PropType = {\n  children: any,\n  friction: number,\n  leftThreshold?: number,\n  rightThreshold?: number,\n  overshootLeft?: boolean,\n  overshootRight?: boolean,\n  overshootFriction: number,\n  onSwipeableLeftOpen?: Function,\n  onSwipeableRightOpen?: Function,\n  onSwipeableOpen?: Function,\n  onSwipeableClose?: Function,\n  onSwipeableLeftWillOpen?: Function,\n  onSwipeableRightWillOpen?: Function,\n  onSwipeableWillOpen?: Function,\n  onSwipeableWillClose?: Function,\n  renderLeftActions?: (\n    progressAnimatedValue: any,\n    dragAnimatedValue: any\n  ) => any,\n  renderRightActions?: (\n    progressAnimatedValue: any,\n    dragAnimatedValue: any\n  ) => any,\n  useNativeAnimations: boolean,\n  animationOptions?: Object,\n  containerStyle?: Object,\n  childrenContainerStyle?: Object,\n};\ntype StateType = {\n  dragX: Animated.Value,\n  rowTranslation: Animated.Value,\n  rowState: number,\n  leftWidth: number | typeof undefined,\n  rightOffset: number | typeof undefined,\n  rowWidth: number | typeof undefined,\n};\n\nexport default class Swipeable extends Component<PropType, StateType> {\n  static defaultProps = {\n    friction: 1,\n    overshootFriction: 1,\n    useNativeAnimations: true,\n  };\n  _onGestureEvent: ?Animated.Event;\n  _transX: ?Animated.Interpolation;\n  _showLeftAction: ?Animated.Interpolation | ?Animated.Value;\n  _leftActionTranslate: ?Animated.Interpolation;\n  _showRightAction: ?Animated.Interpolation | ?Animated.Value;\n  _rightActionTranslate: ?Animated.Interpolation;\n\n  constructor(props: PropType) {\n    super(props);\n    const dragX = new Animated.Value(0);\n    this.state = {\n      dragX,\n      rowTranslation: new Animated.Value(0),\n      rowState: 0,\n      leftWidth: undefined,\n      rightOffset: undefined,\n      rowWidth: undefined,\n    };\n    this._updateAnimatedEvent(props, this.state);\n\n    this._onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragX } }],\n      { useNativeDriver: props.useNativeAnimations }\n    );\n  }\n\n  UNSAFE_componentWillUpdate(props: PropType, state: StateType) {\n    if (\n      this.props.friction !== props.friction ||\n      this.props.overshootLeft !== props.overshootLeft ||\n      this.props.overshootRight !== props.overshootRight ||\n      this.props.overshootFriction !== props.overshootFriction ||\n      this.state.leftWidth !== state.leftWidth ||\n      this.state.rightOffset !== state.rightOffset ||\n      this.state.rowWidth !== state.rowWidth\n    ) {\n      this._updateAnimatedEvent(props, state);\n    }\n  }\n\n  _updateAnimatedEvent = (props: PropType, state: StateType) => {\n    const { friction, overshootFriction, useNativeAnimations } = props;\n    const { dragX, rowTranslation, leftWidth = 0, rowWidth = 0 } = state;\n    const { rightOffset = rowWidth } = state;\n    const rightWidth = Math.max(0, rowWidth - rightOffset);\n\n    const {\n      overshootLeft = leftWidth > 0,\n      overshootRight = rightWidth > 0,\n    } = props;\n\n    const transX = Animated.add(\n      rowTranslation,\n      dragX.interpolate({\n        inputRange: [0, friction],\n        outputRange: [0, 1],\n      })\n    ).interpolate({\n      inputRange: [\n        -rightWidth - (overshootRight ? 1 : overshootFriction),\n        -rightWidth,\n        leftWidth,\n        leftWidth + (overshootLeft ? 1 : overshootFriction),\n      ],\n      outputRange: [\n        -rightWidth - (overshootRight || overshootFriction > 1 ? 1 : 0),\n        -rightWidth,\n        leftWidth,\n        leftWidth + (overshootLeft || overshootFriction > 1 ? 1 : 0),\n      ],\n    });\n    this._transX = transX;\n    this._showLeftAction =\n      leftWidth > 0\n        ? transX.interpolate({\n            inputRange: [-1, 0, leftWidth],\n            outputRange: [0, 0, 1],\n          })\n        : new Animated.Value(0);\n    this._leftActionTranslate = this._showLeftAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp',\n    });\n    this._showRightAction =\n      rightWidth > 0\n        ? transX.interpolate({\n            inputRange: [-rightWidth, 0, 1],\n            outputRange: [1, 0, 0],\n          })\n        : new Animated.Value(0);\n    this._rightActionTranslate = this._showRightAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp',\n    });\n  };\n\n  _onTapHandlerStateChange = ({ nativeEvent }) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this.close();\n    }\n  };\n\n  _onHandlerStateChange = ({ nativeEvent }) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this._handleRelease(nativeEvent);\n    }\n  };\n\n  _handleRelease = nativeEvent => {\n    const { velocityX, translationX: dragX } = nativeEvent;\n    const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    const {\n      friction,\n      leftThreshold = leftWidth / 2,\n      rightThreshold = rightWidth / 2,\n    } = this.props;\n\n    const startOffsetX = this._currentOffset() + dragX / friction;\n    const translationX = (dragX + DRAG_TOSS * velocityX) / friction;\n\n    let toValue = 0;\n    if (rowState === 0) {\n      if (translationX > leftThreshold) {\n        toValue = leftWidth;\n      } else if (translationX < -rightThreshold) {\n        toValue = -rightWidth;\n      }\n    } else if (rowState === 1) {\n      // swiped to left\n      if (translationX > -leftThreshold) {\n        toValue = leftWidth;\n      }\n    } else {\n      // swiped to right\n      if (translationX < rightThreshold) {\n        toValue = -rightWidth;\n      }\n    }\n\n    this._animateRow(startOffsetX, toValue, velocityX / friction);\n  };\n\n  _animateRow = (fromValue, toValue, velocityX) => {\n    const { dragX, rowTranslation } = this.state;\n    dragX.setValue(0);\n    rowTranslation.setValue(fromValue);\n\n    this.setState({ rowState: Math.sign(toValue) });\n    Animated.spring(rowTranslation, {\n      restSpeedThreshold: 1.7,\n      restDisplacementThreshold: 0.4,\n      velocity: velocityX,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations,\n      ...this.props.animationOptions,\n    }).start(({ finished }) => {\n      if (finished) {\n        if (toValue > 0 && this.props.onSwipeableLeftOpen) {\n          this.props.onSwipeableLeftOpen();\n        } else if (toValue < 0 && this.props.onSwipeableRightOpen) {\n          this.props.onSwipeableRightOpen();\n        }\n\n        if (toValue === 0) {\n          this.props.onSwipeableClose && this.props.onSwipeableClose();\n        } else {\n          this.props.onSwipeableOpen && this.props.onSwipeableOpen();\n        }\n      }\n    });\n    if (toValue > 0 && this.props.onSwipeableLeftWillOpen) {\n      this.props.onSwipeableLeftWillOpen();\n    } else if (toValue < 0 && this.props.onSwipeableRightWillOpen) {\n      this.props.onSwipeableRightWillOpen();\n    }\n\n    if (toValue === 0) {\n      this.props.onSwipeableWillClose && this.props.onSwipeableWillClose();\n    } else {\n      this.props.onSwipeableWillOpen && this.props.onSwipeableWillOpen();\n    }\n  };\n\n  _onRowLayout = ({ nativeEvent }) => {\n    this.setState({ rowWidth: nativeEvent.layout.width });\n  };\n\n  _currentOffset = () => {\n    const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    if (rowState === 1) {\n      return leftWidth;\n    } else if (rowState === -1) {\n      return -rightWidth;\n    }\n    return 0;\n  };\n\n  close = () => {\n    this._animateRow(this._currentOffset(), 0);\n  };\n\n  openLeft = () => {\n    const { leftWidth = 0 } = this.state;\n    this._animateRow(this._currentOffset(), leftWidth);\n  };\n\n  openRight = () => {\n    const { rowWidth = 0 } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    this._animateRow(this._currentOffset(), -rightWidth);\n  };\n\n  render() {\n    const { rowState } = this.state;\n    const { children, renderLeftActions, renderRightActions } = this.props;\n\n    const left = renderLeftActions && (\n      <Animated.View\n        style={[\n          styles.leftActions,\n          { transform: [{ translateX: this._leftActionTranslate }] },\n        ]}>\n        {renderLeftActions(this._showLeftAction, this._transX)}\n        <View\n          onLayout={({ nativeEvent }) =>\n            this.setState({ leftWidth: nativeEvent.layout.x })\n          }\n        />\n      </Animated.View>\n    );\n\n    const right = renderRightActions && (\n      <Animated.View\n        style={[\n          styles.rightActions,\n          { transform: [{ translateX: this._rightActionTranslate }] },\n        ]}>\n        {renderRightActions(this._showRightAction, this._transX)}\n        <View\n          onLayout={({ nativeEvent }) =>\n            this.setState({ rightOffset: nativeEvent.layout.x })\n          }\n        />\n      </Animated.View>\n    );\n\n    return (\n      <PanGestureHandler\n        activeOffsetX={[-10, 10]}\n        {...this.props}\n        onGestureEvent={this._onGestureEvent}\n        onHandlerStateChange={this._onHandlerStateChange}>\n        <Animated.View\n          onLayout={this._onRowLayout}\n          style={[styles.container, this.props.containerStyle]}>\n          {left}\n          {right}\n          <TapGestureHandler\n            enabled={rowState !== 0}\n            onHandlerStateChange={this._onTapHandlerStateChange}>\n            <Animated.View\n              pointerEvents={rowState === 0 ? 'auto' : 'box-only'}\n              style={[\n                {\n                  transform: [{ translateX: this._transX }],\n                },\n                this.props.childrenContainerStyle,\n              ]}>\n              {children}\n            </Animated.View>\n          </TapGestureHandler>\n        </Animated.View>\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n  },\n  leftActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL? 'row-reverse': 'row',\n  },\n  rightActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}