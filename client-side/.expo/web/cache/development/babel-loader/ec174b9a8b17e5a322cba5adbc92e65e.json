{"ast":null,"code":"var _jsxFileName = \"/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/src/components/StandardButtons.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { ImageSourcePropType } from \"react-native-web/dist/index\";\nimport { TouchableOpacityProps } from \"react-native-web/dist/index\";\nimport { ViewStyle } from \"react-native-web/dist/index\";\nimport { ViewProps } from \"react-native-web/dist/index\";\nimport { ImageSources } from \"../constants\";\nexport var ButtonImageSizeLevels = {\n  \"sm\": 12,\n  \"md\": 15,\n  \"lg\": 20\n};\nexport var getButtonImageSizeValue = size => {\n  if (typeof size === \"number\") return size;\n  if (ButtonImageSizeLevels[size]) return ButtonImageSizeLevels[size];\n  return ButtonImageSizeLevels.md;\n};\nexport var getButtonImageSizeStyle = (size, originalStyle) => {\n  var val = getButtonImageSizeValue(size);\n  return [originalStyle, {\n    width: val,\n    height: val\n  }];\n};\nexport var ButtonImage = props => {\n  return React.createElement(Image, {\n    style: getButtonImageSizeStyle(props.size, props.style),\n    source: props.source,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 12\n    }\n  });\n};\nexport var StandardButton = props => {\n  var {\n    children,\n    style,\n    size,\n    bg,\n    rounded,\n    bgColor,\n    padd\n  } = props,\n      otherProps = _objectWithoutProperties(props, [\"children\", \"style\", \"size\", \"bg\", \"rounded\", \"bgColor\", \"padd\"]);\n\n  var _style = {\n    padding: 18,\n    minWidth: 38,\n    minHeight: 38\n  };\n\n  if (bg) {\n    _style.padding = padd !== undefined ? padd : 10;\n    _style.borderRadius = rounded === true ? _style.padding * 2 : typeof rounded === \"number\" ? rounded : 0;\n    _style.backgroundColor = bg === true || !bgColor ? \"white\" : bgColor;\n  }\n\n  return React.createElement(TouchableOpacity, _extends({}, otherProps, {\n    style: [style, _style],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }), children);\n};\nexport var MenuButton = props => {\n  var {\n    children,\n    size\n  } = props,\n      otherProps = _objectWithoutProperties(props, [\"children\", \"size\"]);\n\n  return React.createElement(StandardButton, _extends({}, otherProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }), React.createElement(ButtonImage, {\n    source: ImageSources.Menu,\n    size: size || \"md\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }));\n};\nexport var ShareButton = props => {\n  var {\n    children,\n    size\n  } = props,\n      otherProps = _objectWithoutProperties(props, [\"children\", \"size\"]);\n\n  return React.createElement(StandardButton, _extends({}, otherProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }), React.createElement(ButtonImage, {\n    source: ImageSources.Share,\n    size: size || \"md\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }));\n};\nexport var CloseButton = props => {\n  var {\n    children,\n    size\n  } = props,\n      otherProps = _objectWithoutProperties(props, [\"children\", \"size\"]);\n\n  return React.createElement(StandardButton, _extends({}, otherProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }), React.createElement(ButtonImage, {\n    source: ImageSources.Close,\n    size: size || \"md\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }));\n};\nexport var BackButton = props => {\n  var {\n    children,\n    size\n  } = props,\n      otherProps = _objectWithoutProperties(props, [\"children\", \"size\"]);\n\n  return React.createElement(StandardButton, _extends({}, otherProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }), React.createElement(ButtonImage, {\n    source: ImageSources.LeftArrow,\n    size: size || \"md\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/src/components/StandardButtons.js"],"names":["React","ImageSourcePropType","TouchableOpacityProps","ViewStyle","ViewProps","ImageSources","ButtonImageSizeLevels","getButtonImageSizeValue","size","md","getButtonImageSizeStyle","originalStyle","val","width","height","ButtonImage","props","style","source","StandardButton","children","bg","rounded","bgColor","padd","otherProps","_style","padding","minWidth","minHeight","undefined","borderRadius","backgroundColor","MenuButton","Menu","ShareButton","Share","CloseButton","Close","BackButton","LeftArrow"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { TouchableOpacity, Image, ImageSourcePropType, TouchableOpacityProps, ViewStyle, ViewProps } from \"react-native\";\nimport { ImageSources } from \"../constants\";\n\nexport type ButtonImageSize = \"sm\" | \"md\" | \"lg\" | number;\n\nexport type ButtonImageProps = ViewProps & {\n    size?: ButtonImageSize,\n    source?: ImageSourcePropType,\n}\n\nexport const ButtonImageSizeLevels:{[sizeName: string]: number} = {\n    \"sm\": 12,\n    \"md\": 15,\n    \"lg\": 20,\n}\n\nexport const getButtonImageSizeValue = ( size: ButtonImageSize): number => {\n    if ( typeof size === \"number\" ) return size;\n    if ( ButtonImageSizeLevels[size] ) return ButtonImageSizeLevels[size];\n    return ButtonImageSizeLevels.md;\n}\n\nexport const getButtonImageSizeStyle = ( size: ButtonImageSize, originalStyle?: ViewStyle ): ViewStyle => {\n    const val = getButtonImageSizeValue( size) ;\n    return [originalStyle,{\n        width: val,\n        height: val,\n    }]\n}\n\nexport const ButtonImage: React.FC<ButtonImageProps> = (props: ButtonImageProps) => {\n    return <Image style={getButtonImageSizeStyle(props.size, props.style)} source={props.source} />;\n}\n\nexport type StandardButtonProps = TouchableOpacityProps & {\n    size?: ButtonImageSize,\n    bg?: boolean | string,\n    padd?: boolean | number,\n    rounded?: number,\n    bgColor?: string,\n}\n\nexport const StandardButton: React.FC<StandardButtonProps> = (props: StandardButtonProps) => {\n    const { children, style, size, bg, rounded, bgColor, padd, ... otherProps } = props;\n    const _style = {\n        padding: 18,\n        minWidth: 38,\n        minHeight: 38,\n    };\n    if( bg ) {\n        _style.padding = padd !== undefined ? padd : 10;\n        _style.borderRadius = rounded === true ? _style.padding * 2 : ( typeof rounded === \"number\" ? rounded : 0);\n        _style.backgroundColor = bg === true ||  ! bgColor ? \"white\" : bgColor;\n    }\n    return (<TouchableOpacity {... otherProps} style={[style, _style]}>\n        {children}\n    </TouchableOpacity>);\n}\n\nexport const MenuButton: React.FC<StandardButtonProps> = (props: StandardButtonProps) => {\n    const { children, size, ... otherProps } = props;\n    return (<StandardButton {... otherProps}>\n        <ButtonImage source={ImageSources.Menu} size={size || \"md\"} />\n    </StandardButton>);\n}\n\nexport const ShareButton: React.FC<StandardButtonProps> = (props: StandardButtonProps) => {\n    const { children, size, ... otherProps } = props;\n    return (<StandardButton {... otherProps}>\n        <ButtonImage source={ImageSources.Share} size={size || \"md\"} />\n    </StandardButton>);\n}\n\n\nexport const CloseButton: React.FC<StandardButtonProps> = (props: StandardButtonProps) => {\n    const { children, size, ... otherProps } = props;\n    return (<StandardButton {... otherProps}>\n        <ButtonImage source={ImageSources.Close} size={size || \"md\"} />\n    </StandardButton>);\n}\n\nexport const BackButton: React.FC<StandardButtonProps> = (props: StandardButtonProps) => {\n    const { children, size, ... otherProps } = props;\n    return (<StandardButton {... otherProps}>\n        <ButtonImage source={ImageSources.LeftArrow} size={size || \"md\"} />\n    </StandardButton >);\n}\n"]},"metadata":{},"sourceType":"module"}