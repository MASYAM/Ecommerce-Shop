{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport AnimatedNode from \"./AnimatedNode\";\nimport AnimatedEvent from \"./AnimatedEvent\";\nimport { createOrReuseStyleNode } from \"./AnimatedStyle\";\nimport invariant from 'fbjs/lib/invariant';\nimport deepEqual from 'fbjs/lib/areEqual';\nimport { val } from \"../val\";\n\nfunction sanitizeProps(inputProps) {\n  var props = {};\n\n  for (var key in inputProps) {\n    var value = inputProps[key];\n\n    if (value instanceof AnimatedNode && !(value instanceof AnimatedEvent)) {\n      props[key] = value.__nodeID;\n    }\n  }\n\n  return props;\n}\n\nexport function createOrReusePropsNode(props, callback, oldNode) {\n  if (props.style) {\n    props = _objectSpread(_objectSpread({}, props), {}, {\n      style: createOrReuseStyleNode(props.style, oldNode && oldNode._props.style)\n    });\n  }\n\n  var config = sanitizeProps(props);\n\n  if (oldNode && deepEqual(config, oldNode._config)) {\n    return oldNode;\n  }\n\n  return new AnimatedProps(props, config, callback);\n}\n\nclass AnimatedProps extends AnimatedNode {\n  constructor(props, config, callback) {\n    super({\n      type: 'props',\n      props: config\n    }, Object.values(props).filter(n => !(n instanceof AnimatedEvent)));\n    this._config = config;\n    this._props = props;\n    this._callback = callback;\n\n    this.__attach();\n  }\n\n  toString() {\n    return \"AnimatedProps, id: \".concat(this.__nodeID);\n  }\n\n  __onEvaluate() {\n    var props = {};\n\n    for (var key in this._props) {\n      var value = this._props[key];\n\n      if (value instanceof AnimatedNode) {\n        props[key] = value.__getValue();\n      }\n    }\n\n    return props;\n  }\n\n  __detach() {\n    var nativeViewTag = findNodeHandle(this._animatedView);\n    invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');\n\n    this._disconnectAnimatedView(nativeViewTag);\n\n    super.__detach();\n  }\n\n  update() {\n    this._callback();\n\n    if (!this._animatedView) {\n      return;\n    }\n\n    val(this);\n  }\n\n  setNativeView(animatedView) {\n    if (this._animatedView === animatedView) {\n      return;\n    }\n\n    this._animatedView = animatedView;\n    var nativeViewTag = findNodeHandle(this._animatedView);\n    invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');\n\n    this._connectAnimatedView(nativeViewTag);\n  }\n\n}","map":{"version":3,"sources":["AnimatedProps.js"],"names":["props","value","inputProps","style","createOrReuseStyleNode","oldNode","config","sanitizeProps","deepEqual","constructor","type","Object","n","toString","__onEvaluate","__detach","nativeViewTag","findNodeHandle","invariant","update","val","setNativeView"],"mappings":"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","sourcesContent":["import { findNodeHandle } from 'react-native';\n\nimport AnimatedNode from './AnimatedNode';\nimport AnimatedEvent from './AnimatedEvent';\nimport { createOrReuseStyleNode } from './AnimatedStyle';\n\nimport invariant from 'fbjs/lib/invariant';\nimport deepEqual from 'fbjs/lib/areEqual';\nimport { val } from '../val';\n\nfunction sanitizeProps(inputProps) {\n  const props = {};\n  for (const key in inputProps) {\n    const value = inputProps[key];\n    if (value instanceof AnimatedNode && !(value instanceof AnimatedEvent)) {\n      props[key] = value.__nodeID;\n    }\n  }\n  return props;\n}\n\nexport function createOrReusePropsNode(props, callback, oldNode) {\n  if (props.style) {\n    props = {\n      ...props,\n      style: createOrReuseStyleNode(\n        props.style,\n        oldNode && oldNode._props.style\n      ),\n    };\n  }\n  const config = sanitizeProps(props);\n  if (oldNode && deepEqual(config, oldNode._config)) {\n    return oldNode;\n  }\n  return new AnimatedProps(props, config, callback);\n}\n\nclass AnimatedProps extends AnimatedNode {\n  constructor(props, config, callback) {\n    super(\n      { type: 'props', props: config },\n      Object.values(props).filter(n => !(n instanceof AnimatedEvent))\n    );\n    this._config = config;\n    this._props = props;\n    this._callback = callback;\n    this.__attach();\n  }\n\n  toString() {\n    return `AnimatedProps, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    const props = {};\n    for (const key in this._props) {\n      const value = this._props[key];\n      if (value instanceof AnimatedNode) {\n        props[key] = value.__getValue();\n      }\n    }\n    return props;\n  }\n\n  __detach() {\n    const nativeViewTag = findNodeHandle(this._animatedView);\n    invariant(\n      nativeViewTag != null,\n      'Unable to locate attached view in the native tree'\n    );\n    this._disconnectAnimatedView(nativeViewTag);\n    super.__detach();\n  }\n\n  update() {\n    this._callback();\n\n    if (!this._animatedView) {\n      return;\n    }\n\n    val(this);\n  }\n\n  setNativeView(animatedView) {\n    if (this._animatedView === animatedView) {\n      return;\n    }\n    this._animatedView = animatedView;\n\n    const nativeViewTag = findNodeHandle(this._animatedView);\n    invariant(\n      nativeViewTag != null,\n      'Unable to locate attached view in the native tree'\n    );\n    this._connectAnimatedView(nativeViewTag);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}