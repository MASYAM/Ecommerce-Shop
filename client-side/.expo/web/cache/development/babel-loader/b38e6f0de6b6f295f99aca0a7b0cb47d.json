{"ast":null,"code":"var _jsxFileName = \"/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/node_modules/react-native-drawer/index.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport tween from \"./tweener\";\nvar deviceScreen = Dimensions.get('window');\nvar DOUBLE_TAP_INTERVAL = 500;\nvar TAP_DURATION = 250;\nvar propsWhomRequireUpdate = ['closedDrawerOffset', 'openDrawerOffset', 'type', 'styles'];\nexport default class Drawer extends Component {\n  constructor() {\n    var _this;\n\n    super(...arguments);\n    _this = this;\n    this._length = 0;\n    this._prevLength = 0;\n    this._offsetOpen = 0;\n    this._offsetClosed = 0;\n    this._open = false;\n    this._panning = false;\n    this._tweenPending = false;\n    this._activeTween = null;\n    this._lastPress = 0;\n    this._panStartTime = 0;\n    this._syncAfterUpdate = false;\n    this._interactionHandle = null;\n    this.state = {\n      viewport: deviceScreen\n    };\n\n    this.getChildContext = () => ({\n      drawer: this\n    });\n\n    this.initialize = props => {\n      var fullLength = this.getDeviceLength();\n      this._offsetClosed = this.getClosedOffset(props, this.state.viewport);\n      this._offsetOpen = this.getOpenOffset(props, this.state.viewport);\n      this._prevLength = this._length;\n      var styles = {\n        container: {\n          flex: 1,\n          justifyContent: 'center',\n          alignItems: 'center'\n        }\n      };\n      styles.main = _extends({\n        position: 'absolute',\n        borderWidth: 0\n      }, this.isLeftOrRightSide() ? {\n        top: 0\n      } : {\n        left: 0\n      }, this.props.styles.main);\n      styles.drawer = _extends({\n        position: 'absolute',\n        borderWidth: 0\n      }, this.isLeftOrRightSide() ? {\n        top: 0\n      } : {\n        left: 0\n      }, this.props.styles.drawer);\n\n      if (props.initializeOpen || props.open) {\n        this._open = true;\n        this._length = fullLength - this._offsetOpen;\n        styles.main[this.props.side] = 0;\n        styles.drawer[this.props.side] = 0;\n        if (props.type === 'static') styles.main[this.props.side] = fullLength - this._offsetOpen;\n        if (props.type === 'displace') styles.main[this.props.side] = fullLength - this._offsetOpen;\n      } else {\n        this._open = false;\n        this._length = this._offsetClosed;\n        styles.main[this.props.side] = this._offsetClosed;\n        if (props.type === 'static') styles.drawer[this.props.side] = 0;\n        if (props.type === 'overlay') styles.drawer[this.props.side] = this._offsetClosed + this._offsetOpen - fullLength;\n        if (props.type === 'displace') styles.drawer[this.props.side] = -fullLength + this._offsetClosed + this._offsetOpen;\n      }\n\n      if (this.main) {\n        this.drawer.setNativeProps({\n          style: {\n            left: styles.drawer.left\n          }\n        });\n        this.main.setNativeProps({\n          style: {\n            left: styles.main.left\n          }\n        });\n      } else {\n        this.stylesheet = StyleSheet.create(styles);\n        this.responder = PanResponder.create({\n          onStartShouldSetPanResponder: this.onStartShouldSetPanResponder,\n          onStartShouldSetPanResponderCapture: this.onStartShouldSetPanResponderCapture,\n          onMoveShouldSetPanResponder: this.onMoveShouldSetPanResponder,\n          onMoveShouldSetPanResponderCapture: this.onMoveShouldSetPanResponderCapture,\n          onPanResponderMove: this.onPanResponderMove,\n          onPanResponderRelease: this.onPanResponderRelease,\n          onPanResponderTerminate: this.onPanResponderTerminate\n        });\n      }\n\n      this.resync(null, props);\n    };\n\n    this.updatePosition = () => {\n      var mainProps = {};\n      var drawerProps = {};\n\n      var ratio = (this._length - this._offsetClosed) / (this.getOpenLength() - this._offsetClosed);\n\n      switch (this.props.type) {\n        case 'overlay':\n          drawerProps[this.props.side] = -this.getDeviceLength() + this._offsetOpen + this._length;\n          mainProps[this.props.side] = this._offsetClosed;\n          break;\n\n        case 'static':\n          mainProps[this.props.side] = this._length;\n          drawerProps[this.props.side] = 0;\n          break;\n\n        case 'displace':\n          mainProps[this.props.side] = this._length;\n          drawerProps[this.props.side] = -this.getDeviceLength() + this._length + this._offsetOpen;\n          break;\n      }\n\n      var mainOverlayProps = null;\n      var drawerOverlayProps = null;\n\n      if (this.props.tweenHandler) {\n        var propsFrag = this.props.tweenHandler(ratio, this.props.side);\n        mainProps = _extends(mainProps, propsFrag.main);\n        drawerProps = _extends(drawerProps, propsFrag.drawer);\n        mainOverlayProps = propsFrag.mainOverlay;\n        drawerOverlayProps = propsFrag.drawerOverlay;\n      }\n\n      if (this.main && this.drawer && this.mainOverlay && this.drawerOverlay) {\n        this.drawer.setNativeProps({\n          style: drawerProps\n        });\n        this.main.setNativeProps({\n          style: mainProps\n        });\n        if (mainOverlayProps) this.mainOverlay.setNativeProps({\n          style: mainOverlayProps\n        });\n        if (drawerOverlayProps) this.drawerOverlay.setNativeProps({\n          style: drawerOverlayProps\n        });\n      }\n    };\n\n    this.onPanResponderTerminate = (e, gestureState) => {\n      this._panning = false;\n      this.shouldOpenDrawer(this.getGestureDelta(gestureState)) ? this.open() : this.close();\n    };\n\n    this.onStartShouldSetPanResponderCapture = (e, gestureState) => {\n      if (this.shouldCaptureGestures()) return this.processShouldSet(e, gestureState);\n      return false;\n    };\n\n    this.onStartShouldSetPanResponder = (e, gestureState) => {\n      if (!this.shouldCaptureGestures()) return this.processShouldSet(e, gestureState);\n      return false;\n    };\n\n    this.onMoveShouldSetPanResponderCapture = (e, gestureState) => {\n      if (this.shouldCaptureGestures() && this.props.negotiatePan) return this.processMoveShouldSet(e, gestureState);\n      return false;\n    };\n\n    this.onMoveShouldSetPanResponder = (e, gestureState) => {\n      if (!this.shouldCaptureGestures() && this.props.negotiatePan) return this.processMoveShouldSet(e, gestureState);\n      return false;\n    };\n\n    this.onPanResponderMove = (e, gestureState) => {\n      var delta = this.getGestureDelta(gestureState);\n      if (!this.props.acceptPan) return false;\n      if (this._open ^ delta < 0 ^ this.isRightOrBottomSide()) return false;\n      delta = this.isRightOrBottomSide() ? delta * -1 : delta;\n      var length = this._prevLength + delta;\n      length = Math.min(length, this.getOpenLength());\n      length = Math.max(length, this.getClosedLength());\n      length = Math.round(length * 2) / 2;\n      this._length = length;\n      this.updatePosition();\n\n      if (!this._panning) {\n        this.props.onDragStart && this.props.onDragStart();\n      }\n\n      this._panning = true;\n    };\n\n    this.onPanResponderRelease = (e, gestureState) => {\n      var delta = this.getGestureDelta(gestureState);\n      this._panning = false;\n      if (Date.now() - this._panStartTime < TAP_DURATION) this.processTapGestures();\n      if (Math.abs(delta) < 50 && this._activeTween) return;\n      this.shouldOpenDrawer(delta) ? this.open() : this.close();\n      this.updatePosition();\n      this._prevLength = this._length;\n    };\n\n    this.processShouldSet = (e, gestureState) => {\n      var inMask = this.testPanResponderMask(e, gestureState);\n      if (!inMask) return false;\n      if (!this._open && Math.abs(gestureState.dy) >= Math.abs(gestureState.dx)) return false;\n      this._panStartTime = Date.now();\n      if (inMask && this.shouldCaptureGestures()) return true;\n      if (this.props.negotiatePan) return false;\n      if (!this.props.acceptPan) return false;\n      this.terminateActiveTween();\n      return true;\n    };\n\n    this.processMoveShouldSet = (e, gestureState) => {\n      var inMask = this.testPanResponderMask(e, gestureState);\n      if (!inMask && (!this.props.acceptPanOnDrawer || this._open === false)) return false;\n      if (!this.props.acceptPan) return false;\n      if (!this.props.negotiatePan || this.props.disabled || !this.props.acceptPan || this._panning) return false;\n      var delta = this.getGestureDelta(gestureState);\n      var deltaOppositeAxis = this.getGestureDeltaOppositeAxis(gestureState);\n      var swipeToLeftOrTop = delta < 0 ? true : false;\n      var swipeToRightOrBottom = delta > 0 ? true : false;\n      var swipeOppositeAxis = Math.abs(deltaOppositeAxis) >= Math.abs(delta) ? true : false;\n      var swipeInCloseDirection = this.isLeftOrTopSide() ? swipeToLeftOrTop : swipeToRightOrBottom;\n\n      if (swipeOppositeAxis || this._open && !swipeInCloseDirection || !this._open && swipeInCloseDirection) {\n        return false;\n      }\n\n      this.terminateActiveTween();\n      return true;\n    };\n\n    this.processTapGestures = () => {\n      if (this._activeTween) return false;\n\n      if (this.props.acceptTap || this.props.tapToClose && this._open) {\n        this._open ? this.close() : this.open();\n        return true;\n      }\n\n      if (this.props.acceptDoubleTap) {\n        var now = new Date().getTime();\n        var timeDelta = now - this._lastPress;\n        this._lastPress = now;\n\n        if (timeDelta < DOUBLE_TAP_INTERVAL) {\n          this._open ? this.close() : this.open();\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    this.testPanResponderMask = (e, gestureState) => {\n      if (this.props.disabled) return false;\n      if (this.context.drawer && this.context.drawer._open) return false;\n      if (this._childDrawer && this._childDrawer._open) return false;\n      var pos0 = this.isLeftOrRightSide() ? e.nativeEvent.pageX : e.nativeEvent.pageY;\n      var deltaOpen = this.isLeftOrTopSide() ? this.getDeviceLength() - pos0 : pos0;\n      var deltaClose = this.isLeftOrTopSide() ? pos0 : this.getDeviceLength() - pos0;\n      if (this._open && deltaOpen > this.getOpenMask()) return false;\n      if (!this._open && deltaClose > this.getClosedMask()) return false;\n      return true;\n    };\n\n    this.terminateActiveTween = () => {\n      if (this._activeTween) {\n        this._activeTween.terminate();\n\n        this._activeTween = null;\n      }\n    };\n\n    this.open = (type, cb) => {\n      var start = this._length;\n      var end = this.getOpenLength();\n      if (this._activeTween) return;\n      if (type !== 'force' && start - end === 0 && this._open === true) return;\n      this.props.onOpenStart && this.props.onOpenStart();\n      this.setInteractionHandle();\n      this._activeTween = tween({\n        start: this._length,\n        end: this.getOpenLength(),\n        duration: this.props.tweenDuration,\n        easingType: this.props.tweenEasing,\n        onFrame: tweenValue => {\n          this._length = Math.round(tweenValue * 2) / 2;\n          this.updatePosition();\n        },\n        onEnd: () => {\n          this._activeTween = null;\n          this._open = true;\n          this._prevLength = this._length;\n          this.adjustForCaptureGestures();\n          this.props.onOpen();\n          this.clearInteractionHandle();\n\n          if (typeof type === 'function') {\n            type();\n          } else cb && cb();\n        }\n      });\n    };\n\n    this.close = (type, cb) => {\n      var start = this._length;\n      var end = this.getClosedLength();\n      if (this._activeTween) return;\n      if (type !== 'force' && start - end === 0 && this._open === false) return;\n      this.props.onCloseStart && this.props.onCloseStart();\n      this.setInteractionHandle();\n      this._activeTween = tween({\n        start,\n        end,\n        easingType: this.props.tweenEasing,\n        duration: this.props.tweenDuration,\n        onFrame: tweenValue => {\n          this._length = Math.round(tweenValue * 2) / 2;\n          this.updatePosition();\n        },\n        onEnd: () => {\n          this._activeTween = null;\n          this._open = false;\n          this._prevLength = this._length;\n          this.adjustForCaptureGestures();\n          this.props.onClose();\n          this.clearInteractionHandle();\n\n          if (typeof type === 'function') {\n            type();\n          } else cb && cb();\n        }\n      });\n    };\n\n    this.toggle = () => {\n      this._open ? this.close() : this.open();\n    };\n\n    this.handleSetViewport = e => {\n      var viewport = e.nativeEvent.layout;\n      var oldViewport = this.state.viewport;\n      if (viewport.width === oldViewport.width && viewport.height === oldViewport.height) return;\n      var didRotationChange = viewport.width !== oldViewport.width;\n      this.resync(viewport, null, didRotationChange);\n    };\n\n    this.resync = (viewport, props, didRotationChange) => {\n      if (didRotationChange) this._syncAfterUpdate = true;\n      viewport = viewport || this.state.viewport;\n      props = props || this.props;\n      this._offsetClosed = this.getClosedOffset(props, viewport);\n      this._offsetOpen = this.getOpenOffset(props, viewport);\n      this.setState({\n        viewport\n      });\n    };\n\n    this.requiresResync = nextProps => {\n      for (var i = 0; i < propsWhomRequireUpdate.length; i++) {\n        var key = propsWhomRequireUpdate[i];\n        if (this.props[key] !== nextProps[key]) return true;\n      }\n    };\n\n    this.getDeviceLength = function () {\n      var viewport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.viewport;\n      return _this.isLeftOrRightSide() ? viewport.width : viewport.height;\n    };\n\n    this.getOpenLength = () => this.getDeviceLength() - this._offsetOpen;\n\n    this.getClosedLength = () => this._offsetClosed;\n\n    this.getMainWidth = function () {\n      var viewport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.viewport;\n      return _this.isLeftOrRightSide() ? viewport.width - _this._offsetClosed : viewport.width;\n    };\n\n    this.getMainHeight = function () {\n      var viewport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.viewport;\n      return _this.isTopOrBottomSide() ? viewport.height - _this._offsetClosed : viewport.height;\n    };\n\n    this.getDrawerWidth = function () {\n      var viewport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.viewport;\n      return _this.isLeftOrRightSide() ? viewport.width - _this._offsetOpen : viewport.width;\n    };\n\n    this.getDrawerHeight = function () {\n      var viewport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.viewport;\n      return _this.isTopOrBottomSide() ? viewport.height - _this._offsetOpen : viewport.height;\n    };\n\n    this.getOpenMask = function () {\n      var viewport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.viewport;\n      if (_this.props.panCloseMask && _this.props.panCloseMask % 1 === 0) return _this.props.panCloseMask;\n      if (_this.props.panCloseMask) return _this.getDeviceLength(viewport) * _this.props.panCloseMask;\n      return Math.max(0.05, _this._offsetOpen);\n    };\n\n    this.getClosedMask = () => {\n      if (this.props.panOpenMask && this.props.panOpenMask % 1 === 0) return this.props.panOpenMask;\n      if (this.props.panOpenMask) return this.getDeviceLength() * this.props.panOpenMask;\n      return Math.max(0.05, this._offsetClosed);\n    };\n\n    this.getOpenOffset = (props, viewport) => {\n      if (typeof props.openDrawerOffset === 'function') return props.openDrawerOffset(viewport);\n      return props.openDrawerOffset > 1 || props.openDrawerOffset < 0 ? props.openDrawerOffset : props.openDrawerOffset * this.getDeviceLength(viewport);\n    };\n\n    this.getClosedOffset = (props, viewport) => {\n      if (typeof props.closedDrawerOffset === 'function') return props.closedDrawerOffset(viewport);\n      return props.closedDrawerOffset > 1 || props.closedDrawerOffset < 0 ? props.closedDrawerOffset : props.closedDrawerOffset * this.getDeviceLength(viewport);\n    };\n\n    this.getGestureDelta = gestureState => this.isLeftOrRightSide() ? gestureState.dx : gestureState.dy;\n\n    this.getGestureDeltaOppositeAxis = gestureState => this.isLeftOrRightSide() ? gestureState.dy : gestureState.dx;\n\n    this.isLeftOrRightSide = () => {\n      if (I18nManager.isRTL) {\n        return [\"right\", \"left\"].includes(this.props.side);\n      } else {\n        return [\"left\", \"right\"].includes(this.props.side);\n      }\n    };\n\n    this.isTopOrBottomSide = () => [\"top\", \"bottom\"].includes(this.props.side);\n\n    this.isLeftOrTopSide = () => {\n      var side = \"left\";\n\n      if (I18nManager.isRTL) {\n        side = \"right\";\n      }\n\n      return [side, \"top\"].includes(this.props.side);\n    };\n\n    this.isRightOrBottomSide = () => {\n      var side = \"right\";\n\n      if (I18nManager.isRTL) {\n        side = \"left\";\n      }\n\n      return [side, \"bottom\"].includes(this.props.side);\n    };\n  }\n\n  _registerChildDrawer(drawer) {\n    this._childDrawer = drawer;\n  }\n\n  componentWillMount() {\n    if (this.context.drawer) this.context.drawer._registerChildDrawer(this);\n    if (this.props.openDrawerThreshold && process.env.NODE_ENV !== 'production') console.error('react-native-drawer: openDrawerThreshold is obsolete. Use panThreshold instead.');\n    if (this.props.panStartCompensation && process.env.NODE_ENV !== 'production') console.error('react-native-drawer: panStartCompensation is deprecated.');\n    if (this.props.relativeDrag && process.env.NODE_ENV !== 'production') console.error('react-native-drawer: relativeDrag is deprecated.');\n    this.initialize(this.props);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.requiresResync(nextProps)) this.resync(null, nextProps);\n\n    if (nextProps.open !== null && this._open !== nextProps.open) {\n      this._syncAfterUpdate = true;\n      this._open = nextProps.open;\n    }\n  }\n\n  componentDidUpdate() {\n    if (this._syncAfterUpdate) {\n      this._syncAfterUpdate = false;\n      this._open ? this.open('force') : this.close('force');\n    }\n  }\n\n  shouldOpenDrawer(delta) {\n    var hasActiveHeading = this._open ^ delta > 0 ^ this.isRightOrBottomSide();\n    if (!hasActiveHeading) return this._open;else return this._open ^ Math.abs(delta) > this.getDeviceLength() * this.props.panThreshold;\n  }\n\n  shouldCaptureGestures() {\n    if (this.props.captureGestures === true) return true;\n    if (this.props.captureGestures === 'closed' && this._open === false) return true;\n    if (this.props.captureGestures === 'open' && this._open === true) return true;\n    return false;\n  }\n\n  adjustForCaptureGestures() {\n    if (!this.props.captureGestures) return;\n    var shouldCapture = this.shouldCaptureGestures();\n\n    if (this.mainOverlay && this.drawerOverlay) {\n      this.mainOverlay.setNativeProps({\n        pointerEvents: shouldCapture && this._open ? 'auto' : 'none'\n      });\n      this.drawerOverlay.setNativeProps({\n        pointerEvents: shouldCapture && !this._open ? 'auto' : 'none'\n      });\n    }\n  }\n\n  setInteractionHandle() {\n    if (this._interactionHandle) InteractionManager.clearInteractionHandle(this._interactionHandle);\n    if (this.props.useInteractionManager) this._interactionHandle = InteractionManager.createInteractionHandle();\n  }\n\n  clearInteractionHandle() {\n    if (this._interactionHandle) InteractionManager.clearInteractionHandle(this._interactionHandle);\n  }\n\n  render() {\n    var first = this.props.type === 'overlay' ? this.renderMain() : this.renderDrawer();\n    var second = this.props.type === 'overlay' ? this.renderDrawer() : this.renderMain();\n    return React.createElement(View, {\n      key: \"drawerContainer\",\n      onLayout: this.handleSetViewport,\n      style: this.stylesheet.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 7\n      }\n    }, first, second);\n  }\n\n  renderMain() {\n    return React.createElement(View, _extends({}, this.responder.panHandlers, {\n      key: \"main\",\n      ref: c => this.main = c,\n      style: [this.stylesheet.main, {\n        height: this.getMainHeight(),\n        width: this.getMainWidth()\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579,\n        columnNumber: 7\n      }\n    }), this.props.children, React.createElement(View, {\n      pointerEvents: this._open && this.shouldCaptureGestures() ? 'auto' : 'none',\n      ref: c => this.mainOverlay = c,\n      style: [styles.overlay, this.props.styles && this.props.styles.mainOverlay],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  renderDrawer() {\n    return React.createElement(View, _extends({}, this.responder.panHandlers, {\n      key: \"drawer\",\n      ref: c => this.drawer = c,\n      elevation: this.props.elevation,\n      style: [this.stylesheet.drawer, {\n        height: this.getDrawerHeight(),\n        width: this.getDrawerWidth()\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597,\n        columnNumber: 7\n      }\n    }), this.props.content, React.createElement(View, {\n      pointerEvents: !this._open && this.shouldCaptureGestures() ? 'auto' : 'none',\n      ref: c => this.drawerOverlay = c,\n      style: [styles.overlay, this.props.styles && this.props.styles.drawerOverlay],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 605,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\nDrawer.tweenPresets = {\n  parallax: function parallax(ratio) {\n    var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'left';\n    var drawer = {\n      [side]: -150 * (1 - ratio)\n    };\n    return {\n      drawer\n    };\n  }\n};\nDrawer.propTypes = {\n  acceptDoubleTap: PropTypes.bool,\n  acceptPan: PropTypes.bool,\n  acceptTap: PropTypes.bool,\n  acceptPanOnDrawer: PropTypes.bool,\n  captureGestures: PropTypes.oneOf([true, false, 'open', 'closed']),\n  children: PropTypes.node,\n  closedDrawerOffset: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),\n  content: PropTypes.node,\n  disabled: PropTypes.bool,\n  elevation: PropTypes.number,\n  initializeOpen: PropTypes.bool,\n  open: PropTypes.bool,\n  negotiatePan: PropTypes.bool,\n  onClose: PropTypes.func,\n  onCloseStart: PropTypes.func,\n  onOpen: PropTypes.func,\n  onOpenStart: PropTypes.func,\n  onDragStart: PropTypes.func,\n  openDrawerOffset: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),\n  panThreshold: PropTypes.number,\n  panCloseMask: PropTypes.number,\n  panOpenMask: PropTypes.number,\n  side: PropTypes.oneOf(['left', 'right', 'top', 'bottom']),\n  styles: PropTypes.object,\n  tapToClose: PropTypes.bool,\n  tweenDuration: PropTypes.number,\n  tweenEasing: PropTypes.string,\n  tweenHandler: PropTypes.func,\n  type: PropTypes.oneOf(['overlay', 'static', 'displace']),\n  useInteractionManager: PropTypes.bool,\n  panStartCompensation: PropTypes.bool,\n  openDrawerThreshold: PropTypes.any\n};\nDrawer.defaultProps = {\n  open: null,\n  initializeOpen: false,\n  type: 'displace',\n  closedDrawerOffset: 0,\n  openDrawerOffset: 0,\n  panThreshold: 0.25,\n  panOpenMask: null,\n  panCloseMask: null,\n  tweenHandler: null,\n  tweenDuration: 250,\n  tweenEasing: 'linear',\n  disabled: false,\n  negotiatePan: false,\n  captureGestures: 'open',\n  acceptDoubleTap: false,\n  acceptTap: false,\n  acceptPan: true,\n  acceptPanOnDrawer: true,\n  tapToClose: false,\n  styles: {},\n  elevation: 0,\n  onOpen: () => {},\n  onClose: () => {},\n  side: 'left',\n  useInteractionManager: false\n};\nDrawer.contextTypes = {\n  drawer: PropTypes.object\n};\nDrawer.childContextTypes = {\n  drawer: PropTypes.object\n};\nvar styles = StyleSheet.create({\n  overlay: {\n    right: 0,\n    left: 0,\n    top: 0,\n    bottom: 0,\n    position: 'absolute',\n    backgroundColor: 'transparent'\n  }\n});","map":{"version":3,"sources":["/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/node_modules/react-native-drawer/index.js"],"names":["React","Component","PropTypes","tween","deviceScreen","Dimensions","get","DOUBLE_TAP_INTERVAL","TAP_DURATION","propsWhomRequireUpdate","Drawer","_length","_prevLength","_offsetOpen","_offsetClosed","_open","_panning","_tweenPending","_activeTween","_lastPress","_panStartTime","_syncAfterUpdate","_interactionHandle","state","viewport","getChildContext","drawer","initialize","props","fullLength","getDeviceLength","getClosedOffset","getOpenOffset","styles","container","flex","justifyContent","alignItems","main","position","borderWidth","isLeftOrRightSide","top","left","initializeOpen","open","side","type","setNativeProps","style","stylesheet","StyleSheet","create","responder","PanResponder","onStartShouldSetPanResponder","onStartShouldSetPanResponderCapture","onMoveShouldSetPanResponder","onMoveShouldSetPanResponderCapture","onPanResponderMove","onPanResponderRelease","onPanResponderTerminate","resync","updatePosition","mainProps","drawerProps","ratio","getOpenLength","mainOverlayProps","drawerOverlayProps","tweenHandler","propsFrag","mainOverlay","drawerOverlay","e","gestureState","shouldOpenDrawer","getGestureDelta","close","shouldCaptureGestures","processShouldSet","negotiatePan","processMoveShouldSet","delta","acceptPan","isRightOrBottomSide","length","Math","min","max","getClosedLength","round","onDragStart","Date","now","processTapGestures","abs","inMask","testPanResponderMask","dy","dx","terminateActiveTween","acceptPanOnDrawer","disabled","deltaOppositeAxis","getGestureDeltaOppositeAxis","swipeToLeftOrTop","swipeToRightOrBottom","swipeOppositeAxis","swipeInCloseDirection","isLeftOrTopSide","acceptTap","tapToClose","acceptDoubleTap","getTime","timeDelta","context","_childDrawer","pos0","nativeEvent","pageX","pageY","deltaOpen","deltaClose","getOpenMask","getClosedMask","terminate","cb","start","end","onOpenStart","setInteractionHandle","duration","tweenDuration","easingType","tweenEasing","onFrame","tweenValue","onEnd","adjustForCaptureGestures","onOpen","clearInteractionHandle","onCloseStart","onClose","toggle","handleSetViewport","layout","oldViewport","width","height","didRotationChange","setState","requiresResync","nextProps","i","key","getMainWidth","getMainHeight","isTopOrBottomSide","getDrawerWidth","getDrawerHeight","panCloseMask","panOpenMask","openDrawerOffset","closedDrawerOffset","I18nManager","isRTL","includes","_registerChildDrawer","componentWillMount","openDrawerThreshold","process","env","NODE_ENV","console","error","panStartCompensation","relativeDrag","componentWillReceiveProps","componentDidUpdate","hasActiveHeading","panThreshold","captureGestures","shouldCapture","pointerEvents","InteractionManager","useInteractionManager","createInteractionHandle","render","first","renderMain","renderDrawer","second","panHandlers","c","children","overlay","elevation","content","tweenPresets","parallax","propTypes","bool","oneOf","node","oneOfType","number","func","object","string","any","defaultProps","contextTypes","childContextTypes","right","bottom","backgroundColor"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;;;;;AAGA,OAAOC,KAAP;AAEA,IAAIC,YAAY,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,CAAnB;AACA,IAAMC,mBAAmB,GAAG,GAA5B;AACA,IAAMC,YAAY,GAAG,GAArB;AACA,IAAMC,sBAAsB,GAAG,CAAC,oBAAD,EAAuB,kBAAvB,EAA2C,MAA3C,EAAmD,QAAnD,CAA/B;AAEA,eAAe,MAAMC,MAAN,SAAqBT,SAArB,CAA+B;AAAA;AAAA;;AAAA;AAAA;AAAA,SAE5CU,OAF4C,GAElC,CAFkC;AAAA,SAG5CC,WAH4C,GAG9B,CAH8B;AAAA,SAI5CC,WAJ4C,GAI9B,CAJ8B;AAAA,SAK5CC,aAL4C,GAK5B,CAL4B;AAAA,SAM5CC,KAN4C,GAMpC,KANoC;AAAA,SAO5CC,QAP4C,GAOjC,KAPiC;AAAA,SAQ5CC,aAR4C,GAQ5B,KAR4B;AAAA,SAS5CC,YAT4C,GAS7B,IAT6B;AAAA,SAU5CC,UAV4C,GAU/B,CAV+B;AAAA,SAW5CC,aAX4C,GAW5B,CAX4B;AAAA,SAY5CC,gBAZ4C,GAYzB,KAZyB;AAAA,SAa5CC,kBAb4C,GAavB,IAbuB;AAAA,SAsB5CC,KAtB4C,GAsBpC;AACNC,MAAAA,QAAQ,EAAEpB;AADJ,KAtBoC;;AAAA,SAmG5CqB,eAnG4C,GAmG1B,OAAO;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAP,CAnG0B;;AAAA,SAoI5CC,UApI4C,GAoI9BC,KAAD,IAAW;AACtB,UAAIC,UAAU,GAAG,KAAKC,eAAL,EAAjB;AACA,WAAKhB,aAAL,GAAqB,KAAKiB,eAAL,CAAqBH,KAArB,EAA4B,KAAKL,KAAL,CAAWC,QAAvC,CAArB;AACA,WAAKX,WAAL,GAAmB,KAAKmB,aAAL,CAAmBJ,KAAnB,EAA0B,KAAKL,KAAL,CAAWC,QAArC,CAAnB;AAEA,WAAKZ,WAAL,GAAmB,KAAKD,OAAxB;AAEA,UAAIsB,MAAM,GAAG;AACXC,QAAAA,SAAS,EAAE;AACTC,UAAAA,IAAI,EAAE,CADG;AAETC,UAAAA,cAAc,EAAE,QAFP;AAGTC,UAAAA,UAAU,EAAE;AAHH;AADA,OAAb;AAQAJ,MAAAA,MAAM,CAACK,IAAP,GAAc,SAAc;AAC1BC,QAAAA,QAAQ,EAAE,UADgB;AAE1BC,QAAAA,WAAW,EAAE;AAFa,OAAd,EAGX,KAAKC,iBAAL,KAA2B;AAACC,QAAAA,GAAG,EAAE;AAAN,OAA3B,GAAsC;AAACC,QAAAA,IAAI,EAAE;AAAP,OAH3B,EAGsC,KAAKf,KAAL,CAAWK,MAAX,CAAkBK,IAHxD,CAAd;AAKAL,MAAAA,MAAM,CAACP,MAAP,GAAgB,SAAc;AAC5Ba,QAAAA,QAAQ,EAAE,UADkB;AAE5BC,QAAAA,WAAW,EAAC;AAFgB,OAAd,EAGb,KAAKC,iBAAL,KAA2B;AAACC,QAAAA,GAAG,EAAE;AAAN,OAA3B,GAAsC;AAACC,QAAAA,IAAI,EAAE;AAAP,OAHzB,EAGoC,KAAKf,KAAL,CAAWK,MAAX,CAAkBP,MAHtD,CAAhB;;AAKA,UAAIE,KAAK,CAACgB,cAAN,IAAwBhB,KAAK,CAACiB,IAAlC,EAAwC;AACtC,aAAK9B,KAAL,GAAa,IAAb;AACA,aAAKJ,OAAL,GAAekB,UAAU,GAAG,KAAKhB,WAAjC;AACAoB,QAAAA,MAAM,CAACK,IAAP,CAAY,KAAKV,KAAL,CAAWkB,IAAvB,IAA+B,CAA/B;AACAb,QAAAA,MAAM,CAACP,MAAP,CAAc,KAAKE,KAAL,CAAWkB,IAAzB,IAAiC,CAAjC;AACA,YAAIlB,KAAK,CAACmB,IAAN,KAAe,QAAnB,EAA6Bd,MAAM,CAACK,IAAP,CAAY,KAAKV,KAAL,CAAWkB,IAAvB,IAA+BjB,UAAU,GAAG,KAAKhB,WAAjD;AAC7B,YAAIe,KAAK,CAACmB,IAAN,KAAe,UAAnB,EAA+Bd,MAAM,CAACK,IAAP,CAAY,KAAKV,KAAL,CAAWkB,IAAvB,IAA+BjB,UAAU,GAAG,KAAKhB,WAAjD;AAChC,OAPD,MAOO;AACL,aAAKE,KAAL,GAAa,KAAb;AACA,aAAKJ,OAAL,GAAe,KAAKG,aAApB;AACAmB,QAAAA,MAAM,CAACK,IAAP,CAAY,KAAKV,KAAL,CAAWkB,IAAvB,IAA+B,KAAKhC,aAApC;AACA,YAAIc,KAAK,CAACmB,IAAN,KAAe,QAAnB,EAA6Bd,MAAM,CAACP,MAAP,CAAc,KAAKE,KAAL,CAAWkB,IAAzB,IAAiC,CAAjC;AAC7B,YAAIlB,KAAK,CAACmB,IAAN,KAAe,SAAnB,EAA8Bd,MAAM,CAACP,MAAP,CAAc,KAAKE,KAAL,CAAWkB,IAAzB,IAAiC,KAAKhC,aAAL,GAAqB,KAAKD,WAA1B,GAAwCgB,UAAzE;AAC9B,YAAID,KAAK,CAACmB,IAAN,KAAe,UAAnB,EAA+Bd,MAAM,CAACP,MAAP,CAAc,KAAKE,KAAL,CAAWkB,IAAzB,IAAiC,CAAEjB,UAAF,GAAe,KAAKf,aAApB,GAAoC,KAAKD,WAA1E;AAChC;;AAED,UAAI,KAAKyB,IAAT,EAAe;AACb,aAAKZ,MAAL,CAAYsB,cAAZ,CAA2B;AAAEC,UAAAA,KAAK,EAAE;AAACN,YAAAA,IAAI,EAAEV,MAAM,CAACP,MAAP,CAAciB;AAArB;AAAT,SAA3B;AACA,aAAKL,IAAL,CAAUU,cAAV,CAAyB;AAAEC,UAAAA,KAAK,EAAE;AAACN,YAAAA,IAAI,EAAEV,MAAM,CAACK,IAAP,CAAYK;AAAnB;AAAT,SAAzB;AACD,OAHD,MAGO;AACL,aAAKO,UAAL,GAAkBC,UAAU,CAACC,MAAX,CAAkBnB,MAAlB,CAAlB;AACA,aAAKoB,SAAL,GAAiBC,YAAY,CAACF,MAAb,CAAoB;AACnCG,UAAAA,4BAA4B,EAAE,KAAKA,4BADA;AAEnCC,UAAAA,mCAAmC,EAAE,KAAKA,mCAFP;AAGnCC,UAAAA,2BAA2B,EAAE,KAAKA,2BAHC;AAInCC,UAAAA,kCAAkC,EAAE,KAAKA,kCAJN;AAKnCC,UAAAA,kBAAkB,EAAE,KAAKA,kBALU;AAMnCC,UAAAA,qBAAqB,EAAE,KAAKA,qBANO;AAO1CC,UAAAA,uBAAuB,EAAE,KAAKA;AAPY,SAApB,CAAjB;AASD;;AAED,WAAKC,MAAL,CAAY,IAAZ,EAAkBlC,KAAlB;AACD,KA9L2C;;AAAA,SAgM5CmC,cAhM4C,GAgM3B,MAAM;AACrB,UAAIC,SAAS,GAAG,EAAhB;AACA,UAAIC,WAAW,GAAG,EAAlB;;AACA,UAAIC,KAAK,GAAG,CAAC,KAAKvD,OAAL,GAAe,KAAKG,aAArB,KAAuC,KAAKqD,aAAL,KAAuB,KAAKrD,aAAnE,CAAZ;;AAEA,cAAQ,KAAKc,KAAL,CAAWmB,IAAnB;AACE,aAAK,SAAL;AACEkB,UAAAA,WAAW,CAAC,KAAKrC,KAAL,CAAWkB,IAAZ,CAAX,GAA+B,CAAC,KAAKhB,eAAL,EAAD,GAA0B,KAAKjB,WAA/B,GAA6C,KAAKF,OAAjF;AACAqD,UAAAA,SAAS,CAAC,KAAKpC,KAAL,CAAWkB,IAAZ,CAAT,GAA6B,KAAKhC,aAAlC;AACA;;AACF,aAAK,QAAL;AACEkD,UAAAA,SAAS,CAAC,KAAKpC,KAAL,CAAWkB,IAAZ,CAAT,GAA6B,KAAKnC,OAAlC;AACAsD,UAAAA,WAAW,CAAC,KAAKrC,KAAL,CAAWkB,IAAZ,CAAX,GAA+B,CAA/B;AACA;;AACF,aAAK,UAAL;AACEkB,UAAAA,SAAS,CAAC,KAAKpC,KAAL,CAAWkB,IAAZ,CAAT,GAA6B,KAAKnC,OAAlC;AACAsD,UAAAA,WAAW,CAAC,KAAKrC,KAAL,CAAWkB,IAAZ,CAAX,GAA+B,CAAC,KAAKhB,eAAL,EAAD,GAA0B,KAAKnB,OAA/B,GAAyC,KAAKE,WAA7E;AACA;AAZJ;;AAeA,UAAIuD,gBAAgB,GAAG,IAAvB;AACA,UAAIC,kBAAkB,GAAG,IAAzB;;AACA,UAAI,KAAKzC,KAAL,CAAW0C,YAAf,EAA6B;AAC3B,YAAIC,SAAS,GAAG,KAAK3C,KAAL,CAAW0C,YAAX,CAAwBJ,KAAxB,EAA+B,KAAKtC,KAAL,CAAWkB,IAA1C,CAAhB;AACAkB,QAAAA,SAAS,GAAG,SAAcA,SAAd,EAAyBO,SAAS,CAACjC,IAAnC,CAAZ;AACA2B,QAAAA,WAAW,GAAG,SAAcA,WAAd,EAA2BM,SAAS,CAAC7C,MAArC,CAAd;AACA0C,QAAAA,gBAAgB,GAAGG,SAAS,CAACC,WAA7B;AACAH,QAAAA,kBAAkB,GAAGE,SAAS,CAACE,aAA/B;AACD;;AACD,UAAI,KAAKnC,IAAL,IAAa,KAAKZ,MAAlB,IAA4B,KAAK8C,WAAjC,IAAgD,KAAKC,aAAzD,EAAwE;AACtE,aAAK/C,MAAL,CAAYsB,cAAZ,CAA2B;AAACC,UAAAA,KAAK,EAAEgB;AAAR,SAA3B;AACA,aAAK3B,IAAL,CAAUU,cAAV,CAAyB;AAACC,UAAAA,KAAK,EAAEe;AAAR,SAAzB;AACA,YAAII,gBAAJ,EAAsB,KAAKI,WAAL,CAAiBxB,cAAjB,CAAgC;AAACC,UAAAA,KAAK,EAAEmB;AAAR,SAAhC;AACtB,YAAIC,kBAAJ,EAAwB,KAAKI,aAAL,CAAmBzB,cAAnB,CAAkC;AAACC,UAAAA,KAAK,EAAEoB;AAAR,SAAlC;AACzB;AACF,KAnO2C;;AAAA,SA2O5CR,uBA3O4C,GA2OlB,CAACa,CAAD,EAAIC,YAAJ,KAAqB;AAC7C,WAAK3D,QAAL,GAAgB,KAAhB;AACA,WAAK4D,gBAAL,CAAsB,KAAKC,eAAL,CAAqBF,YAArB,CAAtB,IAA4D,KAAK9B,IAAL,EAA5D,GAA0E,KAAKiC,KAAL,EAA1E;AACD,KA9O2C;;AAAA,SAgP5CtB,mCAhP4C,GAgPN,CAACkB,CAAD,EAAIC,YAAJ,KAAqB;AACzD,UAAI,KAAKI,qBAAL,EAAJ,EAAkC,OAAO,KAAKC,gBAAL,CAAsBN,CAAtB,EAAyBC,YAAzB,CAAP;AAClC,aAAO,KAAP;AACD,KAnP2C;;AAAA,SAqP5CpB,4BArP4C,GAqPb,CAACmB,CAAD,EAAIC,YAAJ,KAAqB;AAClD,UAAI,CAAC,KAAKI,qBAAL,EAAL,EAAmC,OAAO,KAAKC,gBAAL,CAAsBN,CAAtB,EAAyBC,YAAzB,CAAP;AACnC,aAAO,KAAP;AACD,KAxP2C;;AAAA,SA0P5CjB,kCA1P4C,GA0PP,CAACgB,CAAD,EAAIC,YAAJ,KAAqB;AACxD,UAAI,KAAKI,qBAAL,MAAgC,KAAKnD,KAAL,CAAWqD,YAA/C,EAA6D,OAAO,KAAKC,oBAAL,CAA0BR,CAA1B,EAA6BC,YAA7B,CAAP;AAC7D,aAAO,KAAP;AACD,KA7P2C;;AAAA,SA+P5ClB,2BA/P4C,GA+Pd,CAACiB,CAAD,EAAIC,YAAJ,KAAqB;AACjD,UAAI,CAAC,KAAKI,qBAAL,EAAD,IAAiC,KAAKnD,KAAL,CAAWqD,YAAhD,EAA8D,OAAO,KAAKC,oBAAL,CAA0BR,CAA1B,EAA6BC,YAA7B,CAAP;AAC9D,aAAO,KAAP;AACD,KAlQ2C;;AAAA,SAoQ5ChB,kBApQ4C,GAoQvB,CAACe,CAAD,EAAIC,YAAJ,KAAqB;AACxC,UAAIQ,KAAK,GAAG,KAAKN,eAAL,CAAqBF,YAArB,CAAZ;AACA,UAAI,CAAC,KAAK/C,KAAL,CAAWwD,SAAhB,EAA2B,OAAO,KAAP;AAG3B,UAAI,KAAKrE,KAAL,GAAaoE,KAAK,GAAG,CAArB,GAAyB,KAAKE,mBAAL,EAA7B,EAAyD,OAAO,KAAP;AAEzDF,MAAAA,KAAK,GAAG,KAAKE,mBAAL,KAA6BF,KAAK,GAAG,CAAC,CAAtC,GAA0CA,KAAlD;AACA,UAAIG,MAAM,GAAG,KAAK1E,WAAL,GAAmBuE,KAAhC;AACAG,MAAAA,MAAM,GAAGC,IAAI,CAACC,GAAL,CAASF,MAAT,EAAiB,KAAKnB,aAAL,EAAjB,CAAT;AACAmB,MAAAA,MAAM,GAAGC,IAAI,CAACE,GAAL,CAASH,MAAT,EAAiB,KAAKI,eAAL,EAAjB,CAAT;AACAJ,MAAAA,MAAM,GAAGC,IAAI,CAACI,KAAL,CAAWL,MAAM,GAAC,CAAlB,IAAqB,CAA9B;AACA,WAAK3E,OAAL,GAAe2E,MAAf;AAEA,WAAKvB,cAAL;;AACA,UAAI,CAAC,KAAK/C,QAAV,EAAoB;AAClB,aAAKY,KAAL,CAAWgE,WAAX,IAA0B,KAAKhE,KAAL,CAAWgE,WAAX,EAA1B;AACD;;AACD,WAAK5E,QAAL,GAAgB,IAAhB;AACD,KAvR2C;;AAAA,SAyR5C4C,qBAzR4C,GAyRpB,CAACc,CAAD,EAAIC,YAAJ,KAAqB;AAC3C,UAAIQ,KAAK,GAAG,KAAKN,eAAL,CAAqBF,YAArB,CAAZ;AACA,WAAK3D,QAAL,GAAgB,KAAhB;AACA,UAAI6E,IAAI,CAACC,GAAL,KAAa,KAAK1E,aAAlB,GAAkCZ,YAAtC,EAAoD,KAAKuF,kBAAL;AACpD,UAAIR,IAAI,CAACS,GAAL,CAASb,KAAT,IAAkB,EAAlB,IAAwB,KAAKjE,YAAjC,EAA+C;AAE/C,WAAK0D,gBAAL,CAAsBO,KAAtB,IAA+B,KAAKtC,IAAL,EAA/B,GAA6C,KAAKiC,KAAL,EAA7C;AACA,WAAKf,cAAL;AACA,WAAKnD,WAAL,GAAmB,KAAKD,OAAxB;AACD,KAlS2C;;AAAA,SAoS5CqE,gBApS4C,GAoSzB,CAACN,CAAD,EAAIC,YAAJ,KAAqB;AACtC,UAAIsB,MAAM,GAAG,KAAKC,oBAAL,CAA0BxB,CAA1B,EAA6BC,YAA7B,CAAb;AACA,UAAI,CAACsB,MAAL,EAAa,OAAO,KAAP;AAEb,UAAI,CAAC,KAAKlF,KAAN,IAAewE,IAAI,CAACS,GAAL,CAASrB,YAAY,CAACwB,EAAtB,KAA6BZ,IAAI,CAACS,GAAL,CAASrB,YAAY,CAACyB,EAAtB,CAAhD,EAA2E,OAAO,KAAP;AAC3E,WAAKhF,aAAL,GAAqByE,IAAI,CAACC,GAAL,EAArB;AACA,UAAIG,MAAM,IAAI,KAAKlB,qBAAL,EAAd,EAA4C,OAAO,IAAP;AAC5C,UAAI,KAAKnD,KAAL,CAAWqD,YAAf,EAA6B,OAAO,KAAP;AAC7B,UAAI,CAAC,KAAKrD,KAAL,CAAWwD,SAAhB,EAA2B,OAAO,KAAP;AAC3B,WAAKiB,oBAAL;AACA,aAAO,IAAP;AACD,KA/S2C;;AAAA,SAiT5CnB,oBAjT4C,GAiTrB,CAACR,CAAD,EAAIC,YAAJ,KAAqB;AAC1C,UAAIsB,MAAM,GAAG,KAAKC,oBAAL,CAA0BxB,CAA1B,EAA6BC,YAA7B,CAAb;AACA,UAAI,CAACsB,MAAD,KAAY,CAAC,KAAKrE,KAAL,CAAW0E,iBAAZ,IAAiC,KAAKvF,KAAL,KAAe,KAA5D,CAAJ,EAAyE,OAAO,KAAP;AACzE,UAAI,CAAC,KAAKa,KAAL,CAAWwD,SAAhB,EAA2B,OAAO,KAAP;AAE3B,UAAI,CAAC,KAAKxD,KAAL,CAAWqD,YAAZ,IAA4B,KAAKrD,KAAL,CAAW2E,QAAvC,IAAmD,CAAC,KAAK3E,KAAL,CAAWwD,SAA/D,IAA4E,KAAKpE,QAArF,EAA+F,OAAO,KAAP;AAC/F,UAAImE,KAAK,GAAG,KAAKN,eAAL,CAAqBF,YAArB,CAAZ;AACA,UAAI6B,iBAAiB,GAAG,KAAKC,2BAAL,CAAiC9B,YAAjC,CAAxB;AACA,UAAI+B,gBAAgB,GAAIvB,KAAK,GAAG,CAAT,GAAc,IAAd,GAAqB,KAA5C;AACA,UAAIwB,oBAAoB,GAAIxB,KAAK,GAAG,CAAT,GAAc,IAAd,GAAqB,KAAhD;AACA,UAAIyB,iBAAiB,GAAIrB,IAAI,CAACS,GAAL,CAASQ,iBAAT,KAA+BjB,IAAI,CAACS,GAAL,CAASb,KAAT,CAAhC,GAAmD,IAAnD,GAA0D,KAAlF;AACA,UAAI0B,qBAAqB,GAAI,KAAKC,eAAL,EAAD,GAA2BJ,gBAA3B,GAA8CC,oBAA1E;;AACA,UAAIC,iBAAiB,IAAK,KAAK7F,KAAL,IAAc,CAAC8F,qBAArC,IAAgE,CAAC,KAAK9F,KAAN,IAAe8F,qBAAnF,EAA2G;AACzG,eAAO,KAAP;AACD;;AAED,WAAKR,oBAAL;AACA,aAAO,IAAP;AACD,KAnU2C;;AAAA,SAqU5CN,kBArU4C,GAqUvB,MAAM;AACzB,UAAI,KAAK7E,YAAT,EAAuB,OAAO,KAAP;;AACvB,UAAI,KAAKU,KAAL,CAAWmF,SAAX,IAAyB,KAAKnF,KAAL,CAAWoF,UAAX,IAAyB,KAAKjG,KAA3D,EAAmE;AACjE,aAAKA,KAAL,GAAa,KAAK+D,KAAL,EAAb,GAA4B,KAAKjC,IAAL,EAA5B;AACA,eAAO,IAAP;AACD;;AACD,UAAI,KAAKjB,KAAL,CAAWqF,eAAf,EAAgC;AAC9B,YAAInB,GAAG,GAAG,IAAID,IAAJ,GAAWqB,OAAX,EAAV;AACA,YAAIC,SAAS,GAAGrB,GAAG,GAAG,KAAK3E,UAA3B;AACA,aAAKA,UAAL,GAAkB2E,GAAlB;;AACA,YAAIqB,SAAS,GAAG5G,mBAAhB,EAAqC;AACnC,eAAKQ,KAAL,GAAa,KAAK+D,KAAL,EAAb,GAA4B,KAAKjC,IAAL,EAA5B;AACA,iBAAO,IAAP;AACD;AACF;;AACD,aAAO,KAAP;AACD,KArV2C;;AAAA,SA8V5CqD,oBA9V4C,GA8VrB,CAACxB,CAAD,EAAIC,YAAJ,KAAqB;AAC1C,UAAI,KAAK/C,KAAL,CAAW2E,QAAf,EAAyB,OAAO,KAAP;AAIzB,UAAI,KAAKa,OAAL,CAAa1F,MAAb,IAAuB,KAAK0F,OAAL,CAAa1F,MAAb,CAAoBX,KAA/C,EAAsD,OAAO,KAAP;AACtD,UAAI,KAAKsG,YAAL,IAAqB,KAAKA,YAAL,CAAkBtG,KAA3C,EAAkD,OAAO,KAAP;AAElD,UAAIuG,IAAI,GAAG,KAAK7E,iBAAL,KAA2BiC,CAAC,CAAC6C,WAAF,CAAcC,KAAzC,GAAiD9C,CAAC,CAAC6C,WAAF,CAAcE,KAA1E;AACA,UAAIC,SAAS,GAAG,KAAKZ,eAAL,KAAyB,KAAKhF,eAAL,KAAyBwF,IAAlD,GAAyDA,IAAzE;AACA,UAAIK,UAAU,GAAG,KAAKb,eAAL,KAAyBQ,IAAzB,GAAgC,KAAKxF,eAAL,KAAyBwF,IAA1E;AAEA,UAAK,KAAKvG,KAAL,IAAc2G,SAAS,GAAG,KAAKE,WAAL,EAA/B,EAAoD,OAAO,KAAP;AACpD,UAAK,CAAC,KAAK7G,KAAN,IAAe4G,UAAU,GAAG,KAAKE,aAAL,EAAjC,EAAwD,OAAO,KAAP;AACxD,aAAO,IAAP;AACD,KA7W2C;;AAAA,SA+W5CxB,oBA/W4C,GA+WrB,MAAM;AAC3B,UAAI,KAAKnF,YAAT,EAAuB;AACrB,aAAKA,YAAL,CAAkB4G,SAAlB;;AACA,aAAK5G,YAAL,GAAoB,IAApB;AACD;AACF,KApX2C;;AAAA,SAsX5C2B,IAtX4C,GAsXrC,CAACE,IAAD,EAAOgF,EAAP,KAAc;AACnB,UAAIC,KAAK,GAAG,KAAKrH,OAAjB;AACA,UAAIsH,GAAG,GAAG,KAAK9D,aAAL,EAAV;AAEA,UAAI,KAAKjD,YAAT,EAAuB;AACvB,UAAI6B,IAAI,KAAK,OAAT,IAAoBiF,KAAK,GAAGC,GAAR,KAAgB,CAApC,IAAyC,KAAKlH,KAAL,KAAe,IAA5D,EAAkE;AAElE,WAAKa,KAAL,CAAWsG,WAAX,IAA0B,KAAKtG,KAAL,CAAWsG,WAAX,EAA1B;AACA,WAAKC,oBAAL;AACA,WAAKjH,YAAL,GAAoBf,KAAK,CAAC;AACxB6H,QAAAA,KAAK,EAAE,KAAKrH,OADY;AAExBsH,QAAAA,GAAG,EAAE,KAAK9D,aAAL,EAFmB;AAGxBiE,QAAAA,QAAQ,EAAE,KAAKxG,KAAL,CAAWyG,aAHG;AAIxBC,QAAAA,UAAU,EAAE,KAAK1G,KAAL,CAAW2G,WAJC;AAKxBC,QAAAA,OAAO,EAAGC,UAAD,IAAgB;AAC9B,eAAK9H,OAAL,GAAe4E,IAAI,CAACI,KAAL,CAAW8C,UAAU,GAAC,CAAtB,IAAyB,CAAxC;AACO,eAAK1E,cAAL;AACD,SARuB;AASxB2E,QAAAA,KAAK,EAAE,MAAM;AACX,eAAKxH,YAAL,GAAoB,IAApB;AACA,eAAKH,KAAL,GAAa,IAAb;AACA,eAAKH,WAAL,GAAmB,KAAKD,OAAxB;AACA,eAAKgI,wBAAL;AACA,eAAK/G,KAAL,CAAWgH,MAAX;AACA,eAAKC,sBAAL;;AAEA,cAAG,OAAO9F,IAAP,KAAgB,UAAnB,EAA+B;AAC7BA,YAAAA,IAAI;AACL,WAFD,MAEOgF,EAAE,IAAIA,EAAE,EAAR;AAER;AArBuB,OAAD,CAAzB;AAuBD,KAtZ2C;;AAAA,SAwZ5CjD,KAxZ4C,GAwZpC,CAAC/B,IAAD,EAAOgF,EAAP,KAAc;AACpB,UAAIC,KAAK,GAAG,KAAKrH,OAAjB;AACA,UAAIsH,GAAG,GAAG,KAAKvC,eAAL,EAAV;AAEA,UAAI,KAAKxE,YAAT,EAAuB;AACvB,UAAI6B,IAAI,KAAK,OAAT,IAAoBiF,KAAK,GAAGC,GAAR,KAAgB,CAApC,IAAyC,KAAKlH,KAAL,KAAe,KAA5D,EAAmE;AAEnE,WAAKa,KAAL,CAAWkH,YAAX,IAA2B,KAAKlH,KAAL,CAAWkH,YAAX,EAA3B;AACA,WAAKX,oBAAL;AACA,WAAKjH,YAAL,GAAoBf,KAAK,CAAC;AACxB6H,QAAAA,KADwB;AAExBC,QAAAA,GAFwB;AAGxBK,QAAAA,UAAU,EAAE,KAAK1G,KAAL,CAAW2G,WAHC;AAIxBH,QAAAA,QAAQ,EAAE,KAAKxG,KAAL,CAAWyG,aAJG;AAKxBG,QAAAA,OAAO,EAAGC,UAAD,IAAgB;AAC9B,eAAK9H,OAAL,GAAe4E,IAAI,CAACI,KAAL,CAAW8C,UAAU,GAAC,CAAtB,IAAyB,CAAxC;AACO,eAAK1E,cAAL;AACD,SARuB;AASxB2E,QAAAA,KAAK,EAAE,MAAM;AACX,eAAKxH,YAAL,GAAoB,IAApB;AACA,eAAKH,KAAL,GAAa,KAAb;AACA,eAAKH,WAAL,GAAmB,KAAKD,OAAxB;AACA,eAAKgI,wBAAL;AACA,eAAK/G,KAAL,CAAWmH,OAAX;AACA,eAAKF,sBAAL;;AAEA,cAAG,OAAO9F,IAAP,KAAgB,UAAnB,EAA+B;AAC7BA,YAAAA,IAAI;AACL,WAFD,MAEOgF,EAAE,IAAIA,EAAE,EAAR;AAER;AArBuB,OAAD,CAAzB;AAuBD,KAxb2C;;AAAA,SA4c5CiB,MA5c4C,GA4cnC,MAAM;AACb,WAAKjI,KAAL,GAAa,KAAK+D,KAAL,EAAb,GAA4B,KAAKjC,IAAL,EAA5B;AACD,KA9c2C;;AAAA,SAgd5CoG,iBAhd4C,GAgdvBvE,CAAD,IAAO;AACzB,UAAIlD,QAAQ,GAAGkD,CAAC,CAAC6C,WAAF,CAAc2B,MAA7B;AACA,UAAIC,WAAW,GAAG,KAAK5H,KAAL,CAAWC,QAA7B;AACA,UAAIA,QAAQ,CAAC4H,KAAT,KAAmBD,WAAW,CAACC,KAA/B,IAAwC5H,QAAQ,CAAC6H,MAAT,KAAoBF,WAAW,CAACE,MAA5E,EAAoF;AACpF,UAAIC,iBAAiB,GAAG9H,QAAQ,CAAC4H,KAAT,KAAmBD,WAAW,CAACC,KAAvD;AACA,WAAKtF,MAAL,CAAYtC,QAAZ,EAAsB,IAAtB,EAA4B8H,iBAA5B;AACD,KAtd2C;;AAAA,SAwd5CxF,MAxd4C,GAwdnC,CAACtC,QAAD,EAAWI,KAAX,EAAkB0H,iBAAlB,KAAwC;AAC/C,UAAIA,iBAAJ,EAAuB,KAAKjI,gBAAL,GAAwB,IAAxB;AACvBG,MAAAA,QAAQ,GAAGA,QAAQ,IAAI,KAAKD,KAAL,CAAWC,QAAlC;AACAI,MAAAA,KAAK,GAAGA,KAAK,IAAI,KAAKA,KAAtB;AACA,WAAKd,aAAL,GAAqB,KAAKiB,eAAL,CAAqBH,KAArB,EAA4BJ,QAA5B,CAArB;AACA,WAAKX,WAAL,GAAmB,KAAKmB,aAAL,CAAmBJ,KAAnB,EAA0BJ,QAA1B,CAAnB;AACA,WAAK+H,QAAL,CAAc;AAAE/H,QAAAA;AAAF,OAAd;AACD,KA/d2C;;AAAA,SAie5CgI,cAje4C,GAie1BC,SAAD,IAAe;AAC9B,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjJ,sBAAsB,CAAC6E,MAA3C,EAAmDoE,CAAC,EAApD,EAAwD;AACtD,YAAIC,GAAG,GAAGlJ,sBAAsB,CAACiJ,CAAD,CAAhC;AACA,YAAI,KAAK9H,KAAL,CAAW+H,GAAX,MAAoBF,SAAS,CAACE,GAAD,CAAjC,EAAwC,OAAO,IAAP;AACzC;AACF,KAte2C;;AAAA,SAye5C7H,eAze4C,GAye1B;AAAA,UAACN,QAAD,uEAAY,KAAI,CAACD,KAAL,CAAWC,QAAvB;AAAA,aAAoC,KAAI,CAACiB,iBAAL,KAA2BjB,QAAQ,CAAC4H,KAApC,GAA4C5H,QAAQ,CAAC6H,MAAzF;AAAA,KAze0B;;AAAA,SA0e5ClF,aA1e4C,GA0e5B,MAAM,KAAKrC,eAAL,KAAyB,KAAKjB,WA1eR;;AAAA,SA2e5C6E,eA3e4C,GA2e1B,MAAM,KAAK5E,aA3ee;;AAAA,SA4e5C8I,YA5e4C,GA4e7B,YAAoC;AAAA,UAAnCpI,QAAmC,uEAAxB,KAAI,CAACD,KAAL,CAAWC,QAAa;AACjD,aAAO,KAAI,CAACiB,iBAAL,KAA2BjB,QAAQ,CAAC4H,KAAT,GAAiB,KAAI,CAACtI,aAAjD,GAAiEU,QAAQ,CAAC4H,KAAjF;AACD,KA9e2C;;AAAA,SA+e5CS,aA/e4C,GA+e5B,YAAoC;AAAA,UAAnCrI,QAAmC,uEAAxB,KAAI,CAACD,KAAL,CAAWC,QAAa;AAClD,aAAO,KAAI,CAACsI,iBAAL,KAA2BtI,QAAQ,CAAC6H,MAAT,GAAkB,KAAI,CAACvI,aAAlD,GAAkEU,QAAQ,CAAC6H,MAAlF;AACD,KAjf2C;;AAAA,SAkf5CU,cAlf4C,GAkf3B,YAAoC;AAAA,UAAnCvI,QAAmC,uEAAxB,KAAI,CAACD,KAAL,CAAWC,QAAa;AACnD,aAAO,KAAI,CAACiB,iBAAL,KAA2BjB,QAAQ,CAAC4H,KAAT,GAAiB,KAAI,CAACvI,WAAjD,GAA+DW,QAAQ,CAAC4H,KAA/E;AACD,KApf2C;;AAAA,SAqf5CY,eArf4C,GAqf1B,YAAoC;AAAA,UAAnCxI,QAAmC,uEAAxB,KAAI,CAACD,KAAL,CAAWC,QAAa;AACpD,aAAO,KAAI,CAACsI,iBAAL,KAA2BtI,QAAQ,CAAC6H,MAAT,GAAkB,KAAI,CAACxI,WAAlD,GAAgEW,QAAQ,CAAC6H,MAAhF;AACD,KAvf2C;;AAAA,SAwf5CzB,WAxf4C,GAwf9B,YAAoC;AAAA,UAAnCpG,QAAmC,uEAAxB,KAAI,CAACD,KAAL,CAAWC,QAAa;AAChD,UAAI,KAAI,CAACI,KAAL,CAAWqI,YAAX,IAA2B,KAAI,CAACrI,KAAL,CAAWqI,YAAX,GAA0B,CAA1B,KAAgC,CAA/D,EAAkE,OAAO,KAAI,CAACrI,KAAL,CAAWqI,YAAlB;AAClE,UAAI,KAAI,CAACrI,KAAL,CAAWqI,YAAf,EAA6B,OAAO,KAAI,CAACnI,eAAL,CAAqBN,QAArB,IAAiC,KAAI,CAACI,KAAL,CAAWqI,YAAnD;AAC7B,aAAO1E,IAAI,CAACE,GAAL,CAAS,IAAT,EAAe,KAAI,CAAC5E,WAApB,CAAP;AACD,KA5f2C;;AAAA,SA6f5CgH,aA7f4C,GA6f5B,MAAM;AACpB,UAAI,KAAKjG,KAAL,CAAWsI,WAAX,IAA0B,KAAKtI,KAAL,CAAWsI,WAAX,GAAyB,CAAzB,KAA+B,CAA7D,EAAgE,OAAO,KAAKtI,KAAL,CAAWsI,WAAlB;AAChE,UAAI,KAAKtI,KAAL,CAAWsI,WAAf,EAA4B,OAAO,KAAKpI,eAAL,KAAyB,KAAKF,KAAL,CAAWsI,WAA3C;AAC5B,aAAO3E,IAAI,CAACE,GAAL,CAAS,IAAT,EAAe,KAAK3E,aAApB,CAAP;AACD,KAjgB2C;;AAAA,SAkgB5CkB,aAlgB4C,GAkgB5B,CAACJ,KAAD,EAAQJ,QAAR,KAAqB;AACnC,UAAI,OAAOI,KAAK,CAACuI,gBAAb,KAAkC,UAAtC,EAAkD,OAAOvI,KAAK,CAACuI,gBAAN,CAAuB3I,QAAvB,CAAP;AAClD,aAAOI,KAAK,CAACuI,gBAAN,GAAyB,CAAzB,IAA8BvI,KAAK,CAACuI,gBAAN,GAAyB,CAAvD,GAA2DvI,KAAK,CAACuI,gBAAjE,GAAoFvI,KAAK,CAACuI,gBAAN,GAAyB,KAAKrI,eAAL,CAAqBN,QAArB,CAApH;AACD,KArgB2C;;AAAA,SAsgB5CO,eAtgB4C,GAsgB1B,CAACH,KAAD,EAAQJ,QAAR,KAAqB;AACrC,UAAI,OAAOI,KAAK,CAACwI,kBAAb,KAAoC,UAAxC,EAAoD,OAAOxI,KAAK,CAACwI,kBAAN,CAAyB5I,QAAzB,CAAP;AACpD,aAAOI,KAAK,CAACwI,kBAAN,GAA2B,CAA3B,IAAgCxI,KAAK,CAACwI,kBAAN,GAA2B,CAA3D,GAA+DxI,KAAK,CAACwI,kBAArE,GAA0FxI,KAAK,CAACwI,kBAAN,GAA2B,KAAKtI,eAAL,CAAqBN,QAArB,CAA5H;AACD,KAzgB2C;;AAAA,SA0gB5CqD,eA1gB4C,GA0gBzBF,YAAD,IAAkB,KAAKlC,iBAAL,KAA2BkC,YAAY,CAACyB,EAAxC,GAA6CzB,YAAY,CAACwB,EA1gBlD;;AAAA,SA2gB5CM,2BA3gB4C,GA2gBb9B,YAAD,IAAkB,KAAKlC,iBAAL,KAA2BkC,YAAY,CAACwB,EAAxC,GAA6CxB,YAAY,CAACyB,EA3gB9D;;AAAA,SA8gB5C3D,iBA9gB4C,GA8gBxB,MAAM;AACxB,UAAI4H,WAAW,CAACC,KAAhB,EAAuB;AACrB,eAAO,CAAC,OAAD,EAAU,MAAV,EAAkBC,QAAlB,CAA2B,KAAK3I,KAAL,CAAWkB,IAAtC,CAAP;AACD,OAFD,MAEO;AACL,eAAO,CAAC,MAAD,EAAS,OAAT,EAAkByH,QAAlB,CAA2B,KAAK3I,KAAL,CAAWkB,IAAtC,CAAP;AACD;AACF,KAphB2C;;AAAA,SAqhB5CgH,iBArhB4C,GAqhBxB,MAAM,CAAC,KAAD,EAAQ,QAAR,EAAkBS,QAAlB,CAA2B,KAAK3I,KAAL,CAAWkB,IAAtC,CArhBkB;;AAAA,SAshB5CgE,eAthB4C,GAshB1B,MAAM;AACtB,UAAIhE,IAAI,GAAG,MAAX;;AACA,UAAIuH,WAAW,CAACC,KAAhB,EAAuB;AACrBxH,QAAAA,IAAI,GAAG,OAAP;AACD;;AACD,aAAO,CAACA,IAAD,EAAO,KAAP,EAAcyH,QAAd,CAAuB,KAAK3I,KAAL,CAAWkB,IAAlC,CAAP;AACD,KA5hB2C;;AAAA,SA6hB5CuC,mBA7hB4C,GA6hBtB,MAAM;AAC1B,UAAIvC,IAAI,GAAG,OAAX;;AACA,UAAIuH,WAAW,CAACC,KAAhB,EAAuB;AACrBxH,QAAAA,IAAI,GAAG,MAAP;AACD;;AACD,aAAO,CAACA,IAAD,EAAO,QAAP,EAAiByH,QAAjB,CAA0B,KAAK3I,KAAL,CAAWkB,IAArC,CAAP;AACD,KAniB2C;AAAA;;AAsG5C0H,EAAAA,oBAAoB,CAAC9I,MAAD,EAAS;AAG3B,SAAK2F,YAAL,GAAoB3F,MAApB;AACD;;AAED+I,EAAAA,kBAAkB,GAAG;AACnB,QAAI,KAAKrD,OAAL,CAAa1F,MAAjB,EAAyB,KAAK0F,OAAL,CAAa1F,MAAb,CAAoB8I,oBAApB,CAAyC,IAAzC;AACzB,QAAI,KAAK5I,KAAL,CAAW8I,mBAAX,IAAkCC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA/D,EAA6EC,OAAO,CAACC,KAAR,CAAc,iFAAd;AAC7E,QAAI,KAAKnJ,KAAL,CAAWoJ,oBAAX,IAAmCL,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAhE,EAA8EC,OAAO,CAACC,KAAR,CAAc,0DAAd;AAC9E,QAAI,KAAKnJ,KAAL,CAAWqJ,YAAX,IAA2BN,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAxD,EAAsEC,OAAO,CAACC,KAAR,CAAc,kDAAd;AACtE,SAAKpJ,UAAL,CAAgB,KAAKC,KAArB;AACD;;AAEDsJ,EAAAA,yBAAyB,CAACzB,SAAD,EAAY;AACnC,QAAI,KAAKD,cAAL,CAAoBC,SAApB,CAAJ,EAAoC,KAAK3F,MAAL,CAAY,IAAZ,EAAkB2F,SAAlB;;AAEpC,QAAIA,SAAS,CAAC5G,IAAV,KAAmB,IAAnB,IAA2B,KAAK9B,KAAL,KAAe0I,SAAS,CAAC5G,IAAxD,EAA8D;AAC5D,WAAKxB,gBAAL,GAAwB,IAAxB;AACA,WAAKN,KAAL,GAAa0I,SAAS,CAAC5G,IAAvB;AACD;AACF;;AAEDsI,EAAAA,kBAAkB,GAAG;AACnB,QAAI,KAAK9J,gBAAT,EAA2B;AACzB,WAAKA,gBAAL,GAAwB,KAAxB;AACA,WAAKN,KAAL,GAAa,KAAK8B,IAAL,CAAU,OAAV,CAAb,GAAkC,KAAKiC,KAAL,CAAW,OAAX,CAAlC;AACD;AACF;;AAmGDF,EAAAA,gBAAgB,CAACO,KAAD,EAAQ;AACtB,QAAIiG,gBAAgB,GAAG,KAAKrK,KAAL,GAAaoE,KAAK,GAAG,CAArB,GAAyB,KAAKE,mBAAL,EAAhD;AACA,QAAI,CAAC+F,gBAAL,EAAuB,OAAO,KAAKrK,KAAZ,CAAvB,KACK,OAAO,KAAKA,KAAL,GAAawE,IAAI,CAACS,GAAL,CAASb,KAAT,IAAkB,KAAKrD,eAAL,KAAyB,KAAKF,KAAL,CAAWyJ,YAA1E;AACN;;AA8GDtG,EAAAA,qBAAqB,GAAG;AACtB,QAAI,KAAKnD,KAAL,CAAW0J,eAAX,KAA+B,IAAnC,EAAyC,OAAO,IAAP;AACzC,QAAI,KAAK1J,KAAL,CAAW0J,eAAX,KAA+B,QAA/B,IAA2C,KAAKvK,KAAL,KAAe,KAA9D,EAAqE,OAAO,IAAP;AACrE,QAAI,KAAKa,KAAL,CAAW0J,eAAX,KAA+B,MAA/B,IAAyC,KAAKvK,KAAL,KAAe,IAA5D,EAAkE,OAAO,IAAP;AAClE,WAAO,KAAP;AACD;;AA8FD4H,EAAAA,wBAAwB,GAAG;AACzB,QAAI,CAAC,KAAK/G,KAAL,CAAW0J,eAAhB,EAAiC;AACjC,QAAIC,aAAa,GAAG,KAAKxG,qBAAL,EAApB;;AACA,QAAI,KAAKP,WAAL,IAAoB,KAAKC,aAA7B,EAA4C;AAC1C,WAAKD,WAAL,CAAiBxB,cAAjB,CAAgC;AAAEwI,QAAAA,aAAa,EAAED,aAAa,IAAI,KAAKxK,KAAtB,GAA8B,MAA9B,GAAuC;AAAxD,OAAhC;AACA,WAAK0D,aAAL,CAAmBzB,cAAnB,CAAkC;AAAEwI,QAAAA,aAAa,EAAED,aAAa,IAAI,CAAC,KAAKxK,KAAvB,GAA+B,MAA/B,GAAwC;AAAzD,OAAlC;AACD;AACF;;AAEDoH,EAAAA,oBAAoB,GAAG;AACrB,QAAI,KAAK7G,kBAAT,EAA6BmK,kBAAkB,CAAC5C,sBAAnB,CAA0C,KAAKvH,kBAA/C;AAC7B,QAAI,KAAKM,KAAL,CAAW8J,qBAAf,EAAsC,KAAKpK,kBAAL,GAA0BmK,kBAAkB,CAACE,uBAAnB,EAA1B;AACvC;;AAED9C,EAAAA,sBAAsB,GAAG;AACvB,QAAI,KAAKvH,kBAAT,EAA6BmK,kBAAkB,CAAC5C,sBAAnB,CAA0C,KAAKvH,kBAA/C;AAC9B;;AA2FDsK,EAAAA,MAAM,GAAG;AACP,QAAIC,KAAK,GAAG,KAAKjK,KAAL,CAAWmB,IAAX,KAAoB,SAApB,GAAgC,KAAK+I,UAAL,EAAhC,GAAoD,KAAKC,YAAL,EAAhE;AACA,QAAIC,MAAM,GAAG,KAAKpK,KAAL,CAAWmB,IAAX,KAAoB,SAApB,GAAgC,KAAKgJ,YAAL,EAAhC,GAAsD,KAAKD,UAAL,EAAnE;AAEA,WACE,oBAAC,IAAD;AACE,MAAA,GAAG,EAAC,iBADN;AAEE,MAAA,QAAQ,EAAE,KAAK7C,iBAFjB;AAGE,MAAA,KAAK,EAAE,KAAK/F,UAAL,CAAgBhB,SAHzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKG2J,KALH,EAMGG,MANH,CADF;AAUD;;AAEDF,EAAAA,UAAU,GAAG;AACX,WACE,oBAAC,IAAD,eACM,KAAKzI,SAAL,CAAe4I,WADrB;AAEE,MAAA,GAAG,EAAC,MAFN;AAGE,MAAA,GAAG,EAAEC,CAAC,IAAI,KAAK5J,IAAL,GAAY4J,CAHxB;AAIE,MAAA,KAAK,EAAE,CAAC,KAAKhJ,UAAL,CAAgBZ,IAAjB,EAAuB;AAAC+G,QAAAA,MAAM,EAAE,KAAKQ,aAAL,EAAT;AAA+BT,QAAAA,KAAK,EAAE,KAAKQ,YAAL;AAAtC,OAAvB,CAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAMG,KAAKhI,KAAL,CAAWuK,QANd,EAOE,oBAAC,IAAD;AACE,MAAA,aAAa,EAAG,KAAKpL,KAAL,IAAc,KAAKgE,qBAAL,EAAd,GAA6C,MAA7C,GAAsD,MADxE;AAEE,MAAA,GAAG,EAAEmH,CAAC,IAAI,KAAK1H,WAAL,GAAmB0H,CAF/B;AAGE,MAAA,KAAK,EAAE,CAACjK,MAAM,CAACmK,OAAR,EAAiB,KAAKxK,KAAL,CAAWK,MAAX,IAAqB,KAAKL,KAAL,CAAWK,MAAX,CAAkBuC,WAAxD,CAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,CADF;AAeD;;AAEDuH,EAAAA,YAAY,GAAG;AACb,WACE,oBAAC,IAAD,eACM,KAAK1I,SAAL,CAAe4I,WADrB;AAEE,MAAA,GAAG,EAAC,QAFN;AAGE,MAAA,GAAG,EAAEC,CAAC,IAAI,KAAKxK,MAAL,GAAcwK,CAH1B;AAIE,MAAA,SAAS,EAAE,KAAKtK,KAAL,CAAWyK,SAJxB;AAKE,MAAA,KAAK,EAAE,CAAC,KAAKnJ,UAAL,CAAgBxB,MAAjB,EAAyB;AAAC2H,QAAAA,MAAM,EAAE,KAAKW,eAAL,EAAT;AAAiCZ,QAAAA,KAAK,EAAE,KAAKW,cAAL;AAAxC,OAAzB,CALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAOG,KAAKnI,KAAL,CAAW0K,OAPd,EAQE,oBAAC,IAAD;AACE,MAAA,aAAa,EAAG,CAAC,KAAKvL,KAAN,IAAe,KAAKgE,qBAAL,EAAf,GAA8C,MAA9C,GAAuD,MADzE;AAEE,MAAA,GAAG,EAAEmH,CAAC,IAAI,KAAKzH,aAAL,GAAqByH,CAFjC;AAGE,MAAA,KAAK,EAAE,CAACjK,MAAM,CAACmK,OAAR,EAAiB,KAAKxK,KAAL,CAAWK,MAAX,IAAqB,KAAKL,KAAL,CAAWK,MAAX,CAAkBwC,aAAxD,CAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,CADF;AAgBD;;AAxlB2C;AAAzB/D,M,CAeZ6L,Y,GAAe;AACpBC,EAAAA,QAAQ,EAAE,kBAACtI,KAAD,EAA0B;AAAA,QAAlBpB,IAAkB,uEAAX,MAAW;AAClC,QAAIpB,MAAM,GAAG;AAAE,OAACoB,IAAD,GAAS,CAAC,GAAD,IAAQ,IAAIoB,KAAZ;AAAX,KAAb;AACA,WAAO;AAAExC,MAAAA;AAAF,KAAP;AACD;AAJmB,C;AAfHhB,M,CA0BZ+L,S,GAAY;AACjBxF,EAAAA,eAAe,EAAE/G,SAAS,CAACwM,IADV;AAEjBtH,EAAAA,SAAS,EAAElF,SAAS,CAACwM,IAFJ;AAGjB3F,EAAAA,SAAS,EAAE7G,SAAS,CAACwM,IAHJ;AAIjBpG,EAAAA,iBAAiB,EAAEpG,SAAS,CAACwM,IAJZ;AAKjBpB,EAAAA,eAAe,EAAEpL,SAAS,CAACyM,KAAV,CAAgB,CAAC,IAAD,EAAO,KAAP,EAAc,MAAd,EAAsB,QAAtB,CAAhB,CALA;AAMjBR,EAAAA,QAAQ,EAAEjM,SAAS,CAAC0M,IANH;AAOjBxC,EAAAA,kBAAkB,EAAElK,SAAS,CAAC2M,SAAV,CAAoB,CAAC3M,SAAS,CAAC4M,MAAX,EAAmB5M,SAAS,CAAC6M,IAA7B,CAApB,CAPH;AAQjBT,EAAAA,OAAO,EAAEpM,SAAS,CAAC0M,IARF;AASjBrG,EAAAA,QAAQ,EAAErG,SAAS,CAACwM,IATH;AAUjBL,EAAAA,SAAS,EAAEnM,SAAS,CAAC4M,MAVJ;AAWjBlK,EAAAA,cAAc,EAAE1C,SAAS,CAACwM,IAXT;AAYjB7J,EAAAA,IAAI,EAAE3C,SAAS,CAACwM,IAZC;AAajBzH,EAAAA,YAAY,EAAE/E,SAAS,CAACwM,IAbP;AAcjB3D,EAAAA,OAAO,EAAE7I,SAAS,CAAC6M,IAdF;AAejBjE,EAAAA,YAAY,EAAE5I,SAAS,CAAC6M,IAfP;AAgBjBnE,EAAAA,MAAM,EAAE1I,SAAS,CAAC6M,IAhBD;AAiBjB7E,EAAAA,WAAW,EAAEhI,SAAS,CAAC6M,IAjBN;AAkBjBnH,EAAAA,WAAW,EAAE1F,SAAS,CAAC6M,IAlBN;AAmBjB5C,EAAAA,gBAAgB,EAAEjK,SAAS,CAAC2M,SAAV,CAAoB,CAAC3M,SAAS,CAAC4M,MAAX,EAAmB5M,SAAS,CAAC6M,IAA7B,CAApB,CAnBD;AAoBjB1B,EAAAA,YAAY,EAAEnL,SAAS,CAAC4M,MApBP;AAqBjB7C,EAAAA,YAAY,EAAE/J,SAAS,CAAC4M,MArBP;AAsBjB5C,EAAAA,WAAW,EAAEhK,SAAS,CAAC4M,MAtBN;AAuBjBhK,EAAAA,IAAI,EAAE5C,SAAS,CAACyM,KAAV,CAAgB,CAAC,MAAD,EAAS,OAAT,EAAkB,KAAlB,EAAyB,QAAzB,CAAhB,CAvBW;AAwBjB1K,EAAAA,MAAM,EAAE/B,SAAS,CAAC8M,MAxBD;AAyBjBhG,EAAAA,UAAU,EAAE9G,SAAS,CAACwM,IAzBL;AA0BjBrE,EAAAA,aAAa,EAAEnI,SAAS,CAAC4M,MA1BR;AA2BjBvE,EAAAA,WAAW,EAAErI,SAAS,CAAC+M,MA3BN;AA4BjB3I,EAAAA,YAAY,EAAEpE,SAAS,CAAC6M,IA5BP;AA6BjBhK,EAAAA,IAAI,EAAE7C,SAAS,CAACyM,KAAV,CAAgB,CAAC,SAAD,EAAY,QAAZ,EAAsB,UAAtB,CAAhB,CA7BW;AA8BjBjB,EAAAA,qBAAqB,EAAExL,SAAS,CAACwM,IA9BhB;AAiCjB1B,EAAAA,oBAAoB,EAAE9K,SAAS,CAACwM,IAjCf;AAkCjBhC,EAAAA,mBAAmB,EAAExK,SAAS,CAACgN;AAlCd,C;AA1BAxM,M,CA+DZyM,Y,GAAe;AACpBtK,EAAAA,IAAI,EAAE,IADc;AAEpBD,EAAAA,cAAc,EAAE,KAFI;AAIpBG,EAAAA,IAAI,EAAE,UAJc;AAKpBqH,EAAAA,kBAAkB,EAAE,CALA;AAMpBD,EAAAA,gBAAgB,EAAE,CANE;AAOpBkB,EAAAA,YAAY,EAAE,IAPM;AAQpBnB,EAAAA,WAAW,EAAE,IARO;AASpBD,EAAAA,YAAY,EAAE,IATM;AAWpB3F,EAAAA,YAAY,EAAE,IAXM;AAYpB+D,EAAAA,aAAa,EAAE,GAZK;AAapBE,EAAAA,WAAW,EAAE,QAbO;AAepBhC,EAAAA,QAAQ,EAAE,KAfU;AAgBpBtB,EAAAA,YAAY,EAAE,KAhBM;AAiBpBqG,EAAAA,eAAe,EAAE,MAjBG;AAkBpBrE,EAAAA,eAAe,EAAE,KAlBG;AAmBpBF,EAAAA,SAAS,EAAE,KAnBS;AAoBpB3B,EAAAA,SAAS,EAAE,IApBS;AAqBpBkB,EAAAA,iBAAiB,EAAE,IArBC;AAsBpBU,EAAAA,UAAU,EAAE,KAtBQ;AAwBpB/E,EAAAA,MAAM,EAAE,EAxBY;AAyBpBoK,EAAAA,SAAS,EAAE,CAzBS;AA0BpBzD,EAAAA,MAAM,EAAE,MAAM,CAAE,CA1BI;AA2BpBG,EAAAA,OAAO,EAAE,MAAM,CAAE,CA3BG;AA4BpBjG,EAAAA,IAAI,EAAE,MA5Bc;AA8BpB4I,EAAAA,qBAAqB,EAAE;AA9BH,C;AA/DHhL,M,CAiGZ0M,Y,GAAe;AAAE1L,EAAAA,MAAM,EAAExB,SAAS,CAAC8M;AAApB,C;AAjGHtM,M,CAkGZ2M,iB,GAAoB;AAAE3L,EAAAA,MAAM,EAAExB,SAAS,CAAC8M;AAApB,C;AAyf7B,IAAM/K,MAAM,GAAGkB,UAAU,CAACC,MAAX,CAAkB;AAC/BgJ,EAAAA,OAAO,EAAE;AACPkB,IAAAA,KAAK,EAAE,CADA;AAEP3K,IAAAA,IAAI,EAAE,CAFC;AAGPD,IAAAA,GAAG,EAAE,CAHE;AAIP6K,IAAAA,MAAM,EAAE,CAJD;AAKPhL,IAAAA,QAAQ,EAAE,UALH;AAMPiL,IAAAA,eAAe,EAAE;AANV;AADsB,CAAlB,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\nimport { PanResponder, View, StyleSheet, Dimensions, InteractionManager, I18nManager } from 'react-native'\n\nimport tween from './tweener'\n\nlet deviceScreen = Dimensions.get('window')\nconst DOUBLE_TAP_INTERVAL = 500\nconst TAP_DURATION = 250\nconst propsWhomRequireUpdate = ['closedDrawerOffset', 'openDrawerOffset', 'type', 'styles']\n\nexport default class Drawer extends Component {\n\n  _length = 0;\n  _prevLength = 0;\n  _offsetOpen = 0;\n  _offsetClosed = 0;\n  _open = false;\n  _panning = false;\n  _tweenPending = false;\n  _activeTween = null;\n  _lastPress = 0;\n  _panStartTime = 0;\n  _syncAfterUpdate = false;\n  _interactionHandle = null;\n\n  static tweenPresets = {\n    parallax: (ratio, side = 'left') => {\n      let drawer = { [side] : -150 * (1 - ratio)}\n      return { drawer }\n    }\n  };\n\n  state = {\n    viewport: deviceScreen\n  };\n\n  static propTypes = {\n    acceptDoubleTap: PropTypes.bool,\n    acceptPan: PropTypes.bool,\n    acceptTap: PropTypes.bool,\n    acceptPanOnDrawer: PropTypes.bool,\n    captureGestures: PropTypes.oneOf([true, false, 'open', 'closed']),\n    children: PropTypes.node,\n    closedDrawerOffset: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),\n    content: PropTypes.node,\n    disabled: PropTypes.bool,\n    elevation: PropTypes.number,\n    initializeOpen: PropTypes.bool,\n    open: PropTypes.bool,\n    negotiatePan: PropTypes.bool,\n    onClose: PropTypes.func,\n    onCloseStart: PropTypes.func,\n    onOpen: PropTypes.func,\n    onOpenStart: PropTypes.func,\n    onDragStart: PropTypes.func,\n    openDrawerOffset: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),\n    panThreshold: PropTypes.number,\n    panCloseMask: PropTypes.number,\n    panOpenMask: PropTypes.number,\n    side: PropTypes.oneOf(['left', 'right', 'top', 'bottom']),\n    styles: PropTypes.object,\n    tapToClose: PropTypes.bool,\n    tweenDuration: PropTypes.number,\n    tweenEasing: PropTypes.string,\n    tweenHandler: PropTypes.func,\n    type: PropTypes.oneOf(['overlay', 'static', 'displace']),\n    useInteractionManager: PropTypes.bool,\n\n    // deprecated\n    panStartCompensation: PropTypes.bool,\n    openDrawerThreshold: PropTypes.any,\n  };\n\n  static defaultProps = {\n    open: null,\n    initializeOpen: false,\n\n    type: 'displace',\n    closedDrawerOffset: 0,\n    openDrawerOffset: 0,\n    panThreshold: 0.25, // @TODO consider rename to panThreshold\n    panOpenMask: null, // defaults to closedDrawerOffset\n    panCloseMask: null, // defaults to openDrawerOffset\n\n    tweenHandler: null,\n    tweenDuration: 250,\n    tweenEasing: 'linear',\n\n    disabled: false,\n    negotiatePan: false,\n    captureGestures: 'open',\n    acceptDoubleTap: false,\n    acceptTap: false,\n    acceptPan: true,\n    acceptPanOnDrawer: true,\n    tapToClose: false,\n\n    styles: {},\n    elevation: 0,\n    onOpen: () => {},\n    onClose: () => {},\n    side: 'left',\n\n    useInteractionManager: false,\n  };\n\n  /*** CONTEXT ***/\n  static contextTypes = { drawer: PropTypes.object };\n  static childContextTypes = { drawer: PropTypes.object };\n  getChildContext = () => ({ drawer: this });\n  /*** END CONTEXT ***/\n\n  _registerChildDrawer(drawer) {\n    // Store child drawer for gesture disambiguation with multi drawer\n    // @TODO make cleaner, generalize to work with 3+ drawers, prop to disable/configure\n    this._childDrawer = drawer\n  }\n\n  componentWillMount() {\n    if (this.context.drawer) this.context.drawer._registerChildDrawer(this)\n    if (this.props.openDrawerThreshold && process.env.NODE_ENV !== 'production') console.error('react-native-drawer: openDrawerThreshold is obsolete. Use panThreshold instead.')\n    if (this.props.panStartCompensation && process.env.NODE_ENV !== 'production') console.error('react-native-drawer: panStartCompensation is deprecated.')\n    if (this.props.relativeDrag && process.env.NODE_ENV !== 'production') console.error('react-native-drawer: relativeDrag is deprecated.')\n    this.initialize(this.props)\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.requiresResync(nextProps)) this.resync(null, nextProps)\n\n    if (nextProps.open !== null && this._open !== nextProps.open) {\n      this._syncAfterUpdate = true\n      this._open = nextProps.open\n    }\n  }\n\n  componentDidUpdate() {\n    if (this._syncAfterUpdate) {\n      this._syncAfterUpdate = false\n      this._open ? this.open('force') : this.close('force')\n    }\n  }\n\n  initialize = (props) => {\n    let fullLength = this.getDeviceLength();\n    this._offsetClosed = this.getClosedOffset(props, this.state.viewport)\n    this._offsetOpen = this.getOpenOffset(props, this.state.viewport)\n    // add function options\n    this._prevLength = this._length\n\n    let styles = {\n      container: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n      },\n    }\n\n    styles.main = Object.assign({\n      position: 'absolute',\n      borderWidth: 0,\n    }, this.isLeftOrRightSide() ? {top: 0} : {left: 0}, this.props.styles.main)\n\n    styles.drawer = Object.assign({\n      position: 'absolute',\n      borderWidth:0,\n    }, this.isLeftOrRightSide() ? {top: 0} : {left: 0}, this.props.styles.drawer)\n\n    if (props.initializeOpen || props.open) { // open\n      this._open = true\n      this._length = fullLength - this._offsetOpen\n      styles.main[this.props.side] = 0\n      styles.drawer[this.props.side] = 0\n      if (props.type === 'static') styles.main[this.props.side] = fullLength - this._offsetOpen\n      if (props.type === 'displace') styles.main[this.props.side] = fullLength - this._offsetOpen\n    } else { // closed\n      this._open = false\n      this._length = this._offsetClosed\n      styles.main[this.props.side] = this._offsetClosed\n      if (props.type === 'static') styles.drawer[this.props.side] = 0\n      if (props.type === 'overlay') styles.drawer[this.props.side] = this._offsetClosed + this._offsetOpen - fullLength\n      if (props.type === 'displace') styles.drawer[this.props.side] = - fullLength + this._offsetClosed + this._offsetOpen\n    }\n\n    if (this.main) {\n      this.drawer.setNativeProps({ style: {left: styles.drawer.left}})\n      this.main.setNativeProps({ style: {left: styles.main.left}})\n    } else {\n      this.stylesheet = StyleSheet.create(styles)\n      this.responder = PanResponder.create({\n        onStartShouldSetPanResponder: this.onStartShouldSetPanResponder,\n        onStartShouldSetPanResponderCapture: this.onStartShouldSetPanResponderCapture,\n        onMoveShouldSetPanResponder: this.onMoveShouldSetPanResponder,\n        onMoveShouldSetPanResponderCapture: this.onMoveShouldSetPanResponderCapture,\n        onPanResponderMove: this.onPanResponderMove,\n        onPanResponderRelease: this.onPanResponderRelease,\n\tonPanResponderTerminate: this.onPanResponderTerminate\n      })\n    }\n\n    this.resync(null, props)\n  };\n\n  updatePosition = () => {\n    let mainProps = {}\n    let drawerProps = {}\n    let ratio = (this._length - this._offsetClosed) / (this.getOpenLength() - this._offsetClosed)\n\n    switch (this.props.type) {\n      case 'overlay':\n        drawerProps[this.props.side] = -this.getDeviceLength() + this._offsetOpen + this._length\n        mainProps[this.props.side] = this._offsetClosed\n        break\n      case 'static':\n        mainProps[this.props.side] = this._length\n        drawerProps[this.props.side] = 0\n        break\n      case 'displace':\n        mainProps[this.props.side] = this._length\n        drawerProps[this.props.side] = -this.getDeviceLength() + this._length + this._offsetOpen\n        break\n    }\n\n    let mainOverlayProps = null\n    let drawerOverlayProps = null\n    if (this.props.tweenHandler) {\n      let propsFrag = this.props.tweenHandler(ratio, this.props.side)\n      mainProps = Object.assign(mainProps, propsFrag.main)\n      drawerProps = Object.assign(drawerProps, propsFrag.drawer)\n      mainOverlayProps = propsFrag.mainOverlay\n      drawerOverlayProps = propsFrag.drawerOverlay\n    }\n    if (this.main && this.drawer && this.mainOverlay && this.drawerOverlay) {\n      this.drawer.setNativeProps({style: drawerProps})\n      this.main.setNativeProps({style: mainProps})\n      if (mainOverlayProps) this.mainOverlay.setNativeProps({style: mainOverlayProps})\n      if (drawerOverlayProps) this.drawerOverlay.setNativeProps({style: drawerOverlayProps})\n    }\n  };\n\n  shouldOpenDrawer(delta) {\n    let hasActiveHeading = this._open ^ delta > 0 ^ this.isRightOrBottomSide()\n    if (!hasActiveHeading) return this._open\n    else return this._open ^ Math.abs(delta) > this.getDeviceLength() * this.props.panThreshold\n  }\n\n  onPanResponderTerminate = (e, gestureState) => {\n    this._panning = false\n    this.shouldOpenDrawer(this.getGestureDelta(gestureState)) ? this.open() : this.close()\n  };\n\n  onStartShouldSetPanResponderCapture = (e, gestureState) => {\n    if (this.shouldCaptureGestures()) return this.processShouldSet(e, gestureState)\n    return false\n  };\n\n  onStartShouldSetPanResponder = (e, gestureState) => {\n    if (!this.shouldCaptureGestures()) return this.processShouldSet(e, gestureState)\n    return false\n  };\n\n  onMoveShouldSetPanResponderCapture = (e, gestureState) => {\n    if (this.shouldCaptureGestures() && this.props.negotiatePan) return this.processMoveShouldSet(e, gestureState)\n    return false\n  };\n\n  onMoveShouldSetPanResponder = (e, gestureState) => {\n    if (!this.shouldCaptureGestures() && this.props.negotiatePan) return this.processMoveShouldSet(e, gestureState)\n    return false\n  };\n\n  onPanResponderMove = (e, gestureState) => {\n    let delta = this.getGestureDelta(gestureState);\n    if (!this.props.acceptPan) return false\n\n    //Do nothing if we are panning the wrong way\n    if (this._open ^ delta < 0 ^ this.isRightOrBottomSide()) return false\n\n    delta = this.isRightOrBottomSide() ? delta * -1 : delta\n    let length = this._prevLength + delta\n    length = Math.min(length, this.getOpenLength())\n    length = Math.max(length, this.getClosedLength())\n    length = Math.round(length*2)/2\n    this._length = length\n\n    this.updatePosition()\n    if (!this._panning) {\n      this.props.onDragStart && this.props.onDragStart();\n    }\n    this._panning = true\n  };\n\n  onPanResponderRelease = (e, gestureState) => {\n    let delta = this.getGestureDelta(gestureState);\n    this._panning = false\n    if (Date.now() - this._panStartTime < TAP_DURATION) this.processTapGestures()\n    if (Math.abs(delta) < 50 && this._activeTween) return\n\n    this.shouldOpenDrawer(delta) ? this.open() : this.close()\n    this.updatePosition()\n    this._prevLength = this._length\n  };\n\n  processShouldSet = (e, gestureState) => {\n    let inMask = this.testPanResponderMask(e, gestureState)\n    if (!inMask) return false\n    // skip gesture process if we have mostly vertical swipe\n    if (!this._open && Math.abs(gestureState.dy) >= Math.abs(gestureState.dx)) return false\n    this._panStartTime = Date.now()\n    if (inMask && this.shouldCaptureGestures()) return true\n    if (this.props.negotiatePan) return false\n    if (!this.props.acceptPan) return false\n    this.terminateActiveTween()\n    return true\n  };\n\n  processMoveShouldSet = (e, gestureState) => {\n    let inMask = this.testPanResponderMask(e, gestureState)\n    if (!inMask && (!this.props.acceptPanOnDrawer || this._open === false )) return false\n    if (!this.props.acceptPan) return false\n\n    if (!this.props.negotiatePan || this.props.disabled || !this.props.acceptPan || this._panning) return false\n    let delta = this.getGestureDelta(gestureState)\n    let deltaOppositeAxis = this.getGestureDeltaOppositeAxis(gestureState)\n    let swipeToLeftOrTop = (delta < 0) ? true : false\n    let swipeToRightOrBottom = (delta > 0) ? true : false\n    let swipeOppositeAxis = (Math.abs(deltaOppositeAxis) >= Math.abs(delta)) ? true : false\n    let swipeInCloseDirection = (this.isLeftOrTopSide()) ? swipeToLeftOrTop : swipeToRightOrBottom\n    if (swipeOppositeAxis || (this._open && !swipeInCloseDirection) || (!this._open && swipeInCloseDirection)) {\n      return false\n    }\n\n    this.terminateActiveTween()\n    return true\n  };\n\n  processTapGestures = () => {\n    if (this._activeTween) return false // disable tap gestures during tween\n    if (this.props.acceptTap || (this.props.tapToClose && this._open)) {\n      this._open ? this.close() : this.open()\n      return true\n    }\n    if (this.props.acceptDoubleTap) {\n      let now = new Date().getTime()\n      let timeDelta = now - this._lastPress\n      this._lastPress = now\n      if (timeDelta < DOUBLE_TAP_INTERVAL) {\n        this._open ? this.close() : this.open()\n        return true\n      }\n    }\n    return false\n  };\n\n  shouldCaptureGestures() {\n    if (this.props.captureGestures === true) return true\n    if (this.props.captureGestures === 'closed' && this._open === false) return true\n    if (this.props.captureGestures === 'open' && this._open === true) return true\n    return false\n  }\n\n  testPanResponderMask = (e, gestureState) => {\n    if (this.props.disabled) return false\n\n    // Disable if parent or child drawer exist and are open\n    // @TODO make cleaner, generalize to work with 3+ drawers, prop to disable/configure\n    if (this.context.drawer && this.context.drawer._open) return false\n    if (this._childDrawer && this._childDrawer._open) return false\n\n    let pos0 = this.isLeftOrRightSide() ? e.nativeEvent.pageX : e.nativeEvent.pageY\n    let deltaOpen = this.isLeftOrTopSide() ? this.getDeviceLength() - pos0 : pos0\n    let deltaClose = this.isLeftOrTopSide() ? pos0 : this.getDeviceLength() - pos0\n\n    if ( this._open && deltaOpen > this.getOpenMask() ) return false\n    if ( !this._open && deltaClose > this.getClosedMask() ) return false\n    return true\n  };\n\n  terminateActiveTween = () => {\n    if (this._activeTween) {\n      this._activeTween.terminate()\n      this._activeTween = null\n    }\n  };\n\n  open = (type, cb) => {\n    let start = this._length\n    let end = this.getOpenLength()\n\n    if (this._activeTween) return\n    if (type !== 'force' && start - end === 0 && this._open === true) return // do nothing if the delta is 0\n\n    this.props.onOpenStart && this.props.onOpenStart()\n    this.setInteractionHandle()\n    this._activeTween = tween({\n      start: this._length,\n      end: this.getOpenLength(),\n      duration: this.props.tweenDuration,\n      easingType: this.props.tweenEasing,\n      onFrame: (tweenValue) => {\n\tthis._length = Math.round(tweenValue*2)/2;\n        this.updatePosition()\n      },\n      onEnd: () => {\n        this._activeTween = null\n        this._open = true\n        this._prevLength = this._length\n        this.adjustForCaptureGestures()\n        this.props.onOpen()\n        this.clearInteractionHandle()\n\n        if(typeof type === 'function') {\n          type() // this is actually a callback\n        } else cb && cb()\n\n      }\n    })\n  };\n\n  close = (type, cb) => {\n    let start = this._length\n    let end = this.getClosedLength()\n\n    if (this._activeTween) return\n    if (type !== 'force' && start - end === 0 && this._open === false) return // do nothing if the delta is 0\n\n    this.props.onCloseStart && this.props.onCloseStart()\n    this.setInteractionHandle()\n    this._activeTween = tween({\n      start,\n      end,\n      easingType: this.props.tweenEasing,\n      duration: this.props.tweenDuration,\n      onFrame: (tweenValue) => {\n\tthis._length = Math.round(tweenValue*2)/2;\n        this.updatePosition()\n      },\n      onEnd: () => {\n        this._activeTween = null\n        this._open = false\n        this._prevLength = this._length\n        this.adjustForCaptureGestures()\n        this.props.onClose()\n        this.clearInteractionHandle()\n\n        if(typeof type === 'function') {\n          type() // this is actually a callback\n        } else cb && cb()\n\n      }\n    })\n  };\n\n  adjustForCaptureGestures() {\n    if (!this.props.captureGestures) return\n    let shouldCapture = this.shouldCaptureGestures()\n    if (this.mainOverlay && this.drawerOverlay) {\n      this.mainOverlay.setNativeProps({ pointerEvents: shouldCapture && this._open ? 'auto' : 'none' })\n      this.drawerOverlay.setNativeProps({ pointerEvents: shouldCapture && !this._open ? 'auto' : 'none' })\n    }\n  }\n\n  setInteractionHandle() {\n    if (this._interactionHandle) InteractionManager.clearInteractionHandle(this._interactionHandle)\n    if (this.props.useInteractionManager) this._interactionHandle = InteractionManager.createInteractionHandle()\n  }\n\n  clearInteractionHandle() {\n    if (this._interactionHandle) InteractionManager.clearInteractionHandle(this._interactionHandle)\n  }\n\n  toggle = () => {\n    this._open ? this.close() : this.open()\n  };\n\n  handleSetViewport = (e) => {\n    let viewport = e.nativeEvent.layout\n    let oldViewport = this.state.viewport\n    if (viewport.width === oldViewport.width && viewport.height === oldViewport.height) return\n    let didRotationChange = viewport.width !== oldViewport.width\n    this.resync(viewport, null, didRotationChange)\n  };\n\n  resync = (viewport, props, didRotationChange) => {\n    if (didRotationChange) this._syncAfterUpdate = true\n    viewport = viewport || this.state.viewport\n    props = props || this.props\n    this._offsetClosed = this.getClosedOffset(props, viewport)\n    this._offsetOpen = this.getOpenOffset(props, viewport)\n    this.setState({ viewport })\n  };\n\n  requiresResync = (nextProps) => {\n    for (let i = 0; i < propsWhomRequireUpdate.length; i++) {\n      let key = propsWhomRequireUpdate[i]\n      if (this.props[key] !== nextProps[key]) return true\n    }\n  };\n\n  /*** DYNAMIC GETTERS ***/\n  getDeviceLength = (viewport = this.state.viewport) => this.isLeftOrRightSide() ? viewport.width : viewport.height;\n  getOpenLength = () => this.getDeviceLength() - this._offsetOpen;\n  getClosedLength = () => this._offsetClosed;\n  getMainWidth = (viewport = this.state.viewport) => {\n    return this.isLeftOrRightSide() ? viewport.width - this._offsetClosed : viewport.width;\n  };\n  getMainHeight = (viewport = this.state.viewport) => {\n    return this.isTopOrBottomSide() ? viewport.height - this._offsetClosed : viewport.height;\n  };\n  getDrawerWidth = (viewport = this.state.viewport) => {\n    return this.isLeftOrRightSide() ? viewport.width - this._offsetOpen : viewport.width;\n  };\n  getDrawerHeight = (viewport = this.state.viewport) => {\n    return this.isTopOrBottomSide() ? viewport.height - this._offsetOpen : viewport.height;\n  };\n  getOpenMask = (viewport = this.state.viewport) => {\n    if (this.props.panCloseMask && this.props.panCloseMask % 1 === 0) return this.props.panCloseMask\n    if (this.props.panCloseMask) return this.getDeviceLength(viewport) * this.props.panCloseMask\n    return Math.max(0.05, this._offsetOpen)\n  };\n  getClosedMask = () => {\n    if (this.props.panOpenMask && this.props.panOpenMask % 1 === 0) return this.props.panOpenMask\n    if (this.props.panOpenMask) return this.getDeviceLength() * this.props.panOpenMask\n    return Math.max(0.05, this._offsetClosed)\n  };\n  getOpenOffset = (props, viewport) => {\n    if (typeof props.openDrawerOffset === 'function') return props.openDrawerOffset(viewport)\n    return props.openDrawerOffset > 1 || props.openDrawerOffset < 0 ? props.openDrawerOffset : props.openDrawerOffset * this.getDeviceLength(viewport)\n  };\n  getClosedOffset = (props, viewport) => {\n    if (typeof props.closedDrawerOffset === 'function') return props.closedDrawerOffset(viewport)\n    return props.closedDrawerOffset > 1 || props.closedDrawerOffset < 0 ? props.closedDrawerOffset : props.closedDrawerOffset * this.getDeviceLength(viewport)\n  };\n  getGestureDelta = (gestureState) => this.isLeftOrRightSide() ? gestureState.dx : gestureState.dy;\n  getGestureDeltaOppositeAxis = (gestureState) => this.isLeftOrRightSide() ? gestureState.dy : gestureState.dx;\n  /*** END DYNAMIC GETTERS ***/\n\n  isLeftOrRightSide = () => {\n    if (I18nManager.isRTL) {\n      return [\"right\", \"left\"].includes(this.props.side)\n    } else {\n      return [\"left\", \"right\"].includes(this.props.side)\n    }\n  }\n  isTopOrBottomSide = () => [\"top\", \"bottom\"].includes(this.props.side);\n  isLeftOrTopSide = () => {\n    let side = \"left\";\n    if (I18nManager.isRTL) {\n      side = \"right\";\n    }\n    return [side, \"top\"].includes(this.props.side);\n  }\n  isRightOrBottomSide = () => {\n    let side = \"right\"\n    if (I18nManager.isRTL) {\n      side = \"left\"\n    }\n    return [side, \"bottom\"].includes(this.props.side);\n  }\n\n  render() {\n    let first = this.props.type === 'overlay' ? this.renderMain() : this.renderDrawer()\n    let second = this.props.type === 'overlay' ? this.renderDrawer() : this.renderMain()\n\n    return (\n      <View\n        key=\"drawerContainer\"\n        onLayout={this.handleSetViewport}\n        style={this.stylesheet.container}\n        >\n        {first}\n        {second}\n      </View>\n    )\n  }\n\n  renderMain() {\n    return (\n      <View\n        {...this.responder.panHandlers}\n        key=\"main\"\n        ref={c => this.main = c}\n        style={[this.stylesheet.main, {height: this.getMainHeight(), width: this.getMainWidth()}]}\n        >\n        {this.props.children}\n        <View\n          pointerEvents={ this._open && this.shouldCaptureGestures() ? 'auto' : 'none' }\n          ref={c => this.mainOverlay = c}\n          style={[styles.overlay, this.props.styles && this.props.styles.mainOverlay]}\n          />\n      </View>\n    )\n  }\n\n  renderDrawer() {\n    return (\n      <View\n        {...this.responder.panHandlers}\n        key=\"drawer\"\n        ref={c => this.drawer = c}\n        elevation={this.props.elevation}\n        style={[this.stylesheet.drawer, {height: this.getDrawerHeight(), width: this.getDrawerWidth()}]}\n        >\n        {this.props.content}\n        <View\n          pointerEvents={ !this._open && this.shouldCaptureGestures() ? 'auto' : 'none' }\n          ref={c => this.drawerOverlay = c}\n          style={[styles.overlay, this.props.styles && this.props.styles.drawerOverlay]}\n          />\n      </View>\n    )\n  }\n}\n\nconst styles = StyleSheet.create({\n  overlay: {\n    right: 0,\n    left: 0,\n    top: 0,\n    bottom: 0,\n    position: 'absolute',\n    backgroundColor: 'transparent'\n  }\n})\n"]},"metadata":{},"sourceType":"module"}