{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport invariant from \"../utils/invariant\";\nimport ThemeContext from \"../views/ThemeContext\";\nimport NavigationFocusEvents from \"../views/NavigationFocusEvents\";\n\nfunction createNavigator(NavigatorView, router, navigationConfig) {\n  class Navigator extends React.Component {\n    constructor(props, context) {\n      super(props, context);\n      this.state = {\n        descriptors: {},\n        screenProps: this.props.screenProps,\n        theme: context,\n        themeContext: context\n      };\n    }\n\n    static getDerivedStateFromProps(nextProps, currentState) {\n      var prevDescriptors = currentState.descriptors;\n      var {\n        navigation,\n        screenProps\n      } = nextProps;\n      invariant(navigation != null, 'The navigation prop is missing for this navigator. In react-navigation v3 and v4 you must set up your app container directly. More info: https://reactnavigation.org/docs/en/app-containers.html');\n      var {\n        state\n      } = navigation;\n      var {\n        routes\n      } = state;\n\n      if (typeof routes === 'undefined') {\n        throw new TypeError('No \"routes\" found in navigation state. Did you try to pass the navigation prop of a React component to a Navigator child? See https://reactnavigation.org/docs/en/custom-navigators.html#navigator-navigation-prop');\n      }\n\n      var descriptors = routes.reduce((descriptors, route) => {\n        if (prevDescriptors && prevDescriptors[route.key] && route === prevDescriptors[route.key].state && screenProps === currentState.screenProps && currentState.themeContext === currentState.theme) {\n          descriptors[route.key] = prevDescriptors[route.key];\n          return descriptors;\n        }\n\n        var getComponent = router.getComponentForRouteName.bind(null, route.routeName);\n        var childNavigation = navigation.getChildNavigation(route.key);\n        var options = router.getScreenOptions(childNavigation, screenProps, currentState.themeContext);\n        descriptors[route.key] = {\n          key: route.key,\n          getComponent,\n          options,\n          state: route,\n          navigation: childNavigation\n        };\n        return descriptors;\n      }, {});\n      return {\n        descriptors,\n        screenProps,\n        theme: state.themeContext\n      };\n    }\n\n    componentDidUpdate() {\n      if (this.context !== this.state.themeContext) {\n        this.setState({\n          themeContext: this.context\n        });\n      }\n    }\n\n    render() {\n      return React.createElement(React.Fragment, null, React.createElement(NavigationFocusEvents, {\n        navigation: this.props.navigation,\n        onEvent: (target, type, data) => {\n          var _this$state$descripto;\n\n          (_this$state$descripto = this.state.descriptors[target]) === null || _this$state$descripto === void 0 ? void 0 : _this$state$descripto.navigation.emit(type, data);\n        }\n      }), React.createElement(NavigatorView, _extends({}, this.props, {\n        screenProps: this.state.screenProps,\n        navigation: this.props.navigation,\n        navigationConfig: navigationConfig,\n        descriptors: this.state.descriptors\n      })));\n    }\n\n  }\n\n  _defineProperty(Navigator, \"contextType\", ThemeContext);\n\n  _defineProperty(Navigator, \"router\", router);\n\n  _defineProperty(Navigator, \"navigationOptions\", navigationConfig.navigationOptions);\n\n  return Navigator;\n}\n\nexport default createNavigator;","map":{"version":3,"sources":["createNavigator.js"],"names":["React","navigationConfig","constructor","descriptors","screenProps","theme","themeContext","context","prevDescriptors","currentState","invariant","navigation","state","routes","route","getComponent","router","childNavigation","options","key","componentDidUpdate","render"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport invariant from '../utils/invariant';\nimport ThemeContext from '../views/ThemeContext';\nimport NavigationFocusEvents from '../views/NavigationFocusEvents';\n\nfunction createNavigator(NavigatorView, router, navigationConfig) {\n  class Navigator extends React.Component {\n    // eslint-disable-next-line react/sort-comp\n    static contextType = ThemeContext;\n    static router = router;\n    static navigationOptions = navigationConfig.navigationOptions;\n\n    constructor(props, context) {\n      super(props, context);\n\n      this.state = {\n        descriptors: {},\n        screenProps: this.props.screenProps,\n        theme: context,\n        themeContext: context,\n      };\n    }\n\n    static getDerivedStateFromProps(nextProps, currentState) {\n      const prevDescriptors = currentState.descriptors;\n      const { navigation, screenProps } = nextProps;\n      invariant(\n        navigation != null,\n        'The navigation prop is missing for this navigator. In react-navigation v3 and v4 you must set up your app container directly. More info: https://reactnavigation.org/docs/en/app-containers.html'\n      );\n      const { state } = navigation;\n      const { routes } = state;\n      if (typeof routes === 'undefined') {\n        throw new TypeError(\n          'No \"routes\" found in navigation state. Did you try to pass the navigation prop of a React component to a Navigator child? See https://reactnavigation.org/docs/en/custom-navigators.html#navigator-navigation-prop'\n        );\n      }\n\n      const descriptors = routes.reduce((descriptors, route) => {\n        if (\n          prevDescriptors &&\n          prevDescriptors[route.key] &&\n          route === prevDescriptors[route.key].state &&\n          screenProps === currentState.screenProps &&\n          currentState.themeContext === currentState.theme\n        ) {\n          descriptors[route.key] = prevDescriptors[route.key];\n          return descriptors;\n        }\n        const getComponent = router.getComponentForRouteName.bind(\n          null,\n          route.routeName\n        );\n        const childNavigation = navigation.getChildNavigation(route.key);\n        const options = router.getScreenOptions(\n          childNavigation,\n          screenProps,\n          currentState.themeContext\n        );\n        descriptors[route.key] = {\n          key: route.key,\n          getComponent,\n          options,\n          state: route,\n          navigation: childNavigation,\n        };\n        return descriptors;\n      }, {});\n\n      return { descriptors, screenProps, theme: state.themeContext };\n    }\n\n    componentDidUpdate() {\n      if (this.context !== this.state.themeContext) {\n        // eslint-disable-next-line react/no-did-update-set-state\n        this.setState({ themeContext: this.context });\n      }\n    }\n\n    render() {\n      return (\n        <React.Fragment>\n          <NavigationFocusEvents\n            navigation={this.props.navigation}\n            onEvent={(target, type, data) => {\n              this.state.descriptors[target]?.navigation.emit(type, data);\n            }}\n          />\n          <NavigatorView\n            {...this.props}\n            screenProps={this.state.screenProps}\n            navigation={this.props.navigation}\n            navigationConfig={navigationConfig}\n            descriptors={this.state.descriptors}\n          />\n        </React.Fragment>\n      );\n    }\n  }\n\n  return Navigator;\n}\n\nexport default createNavigator;\n"]},"metadata":{},"sourceType":"module"}