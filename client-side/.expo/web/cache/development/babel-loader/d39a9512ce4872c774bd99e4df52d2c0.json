{"ast":null,"code":"var _jsxFileName = \"/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/src/screens/legacy/LoginScreen/index.js\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { Actions } from 'react-native-router-flux';\nimport { Header, Container, Content, Button, Text, Toast, Spinner, CheckBox, Radio, ListItem, Left, Right, Body } from 'native-base';\nimport { NavigationActions, StackActions, NavigationProp } from 'react-navigation';\nimport { bindActionCreators } from 'redux';\nimport { connect } from \"react-redux\";\nimport { Input } from 'react-native-elements';\nimport styles from \"./style\";\nimport { ScreenNames, ImageSources } from \"../../../constants\";\nimport { BackButton } from \"../../../components/StandardButtons\";\nimport { StandardHeader } from \"../../../components/legacy/Header\";\nimport { authActions } from \"../../../store/actions\";\nimport { ActionStatusTypeValues } from \"../../../constants/actionStatusTypes\";\nimport { selectViewActionStatus } from \"../../../store/selectors/app\";\n\nclass LoginScreen extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.backToRoot = () => {\n      var {\n        navigation\n      } = this.props;\n      navigation.pop();\n    };\n\n    this.closeDialog = () => {\n      this.setState({\n        isShowAlert: false\n      });\n    };\n\n    this.doSaveLogin = () => {\n      this.setState({\n        isUserWantToSavedLogin: !this.state.isUserWantToSavedLogin\n      });\n    };\n\n    this.successLoginAction = () => {\n      var {\n        navigation\n      } = this.props;\n      var action = StackActions.reset({\n        index: 0,\n        actions: [StackActions.replace({\n          routeName: ScreenNames.root,\n          actions: [StackActions.push({\n            routeName: ScreenNames.AppMain\n          })]\n        })]\n      });\n      navigation.dispatch(action);\n    };\n\n    this.validate = text => {\n      var reg = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n\n      if (reg.test(text) === false) {\n        return false;\n      } else {\n        return true;\n      }\n    };\n\n    this.doLoginNow = () => {\n      if (!this.email || !this.password) {\n        Toast.show({\n          type: \"danger\",\n          text: 'Please enter email and password'\n        });\n      } else if (this.validate(this.email) == false) {\n        Toast.show({\n          type: \"danger\",\n          text: 'Your email address is not a correct format'\n        });\n      } else {\n        this.processSubmitForm();\n      }\n    };\n\n    this.processSubmitForm = () => {\n      this.setState({\n        isLoading: true\n      });\n      Keyboard.dismiss();\n      var {\n        authActions,\n        navigation\n      } = this.props;\n      authActions.login(navigation.state.key, this.email, this.password);\n    };\n\n    this.state = {\n      isLoading: false,\n      lastRequest: 0,\n      lastSent: 0,\n      isUserWantToSavedLogin: false,\n      isShowAlert: false,\n      isShowingSuccessAlert: false\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    var {\n      props,\n      state\n    } = this;\n\n    if (state.lastRequest !== props.loginRequest.lastRequest) {\n      if (props.loginRequest.status === ActionStatusTypeValues.ERROR) {\n        this.setState({\n          isLoading: false,\n          lastRequest: props.loginRequest.lastRequest\n        }, () => {\n          Toast.show({\n            type: \"danger\",\n            text: \"Sorry, it seems you are facing some technical problem. Please contact IT Support.\"\n          });\n        });\n      } else if (props.loginRequest.status === ActionStatusTypeValues.COMPLETED) {\n        console.log(this.props.loginStatus);\n        console.log(this.props.loginErrorMessage);\n\n        if (this.props.loginStatus === \"success\") {\n          this.setState({\n            isLoading: false,\n            isShowingSuccessAlert: true,\n            lastRequest: props.loginRequest.lastRequest\n          }, () => {});\n        } else {\n          this.setState({\n            isLoading: false,\n            isShowAlert: true,\n            lastRequest: props.loginRequest.lastRequest\n          }, () => {});\n        }\n      }\n    }\n  }\n\n  render() {\n    var {\n      props\n    } = this;\n    var isCompleteSubmit = props.loginRequest.status === ActionStatusTypeValues.COMPLETED;\n    var loginStatus = props.loginStatus;\n    var loginErrorMessage = props.loginErrorMessage;\n    return React.createElement(Container, {\n      style: styles.registerBackgroundStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 13\n      }\n    }, React.createElement(StandardHeader, {\n      back: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }\n    }), React.createElement(Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }\n    }, React.createElement(View, {\n      style: styles.body,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 21\n      }\n    }, React.createElement(View, {\n      style: styles.descWrap,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 25\n      }\n    }, React.createElement(Text, {\n      style: styles.txt,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 25\n      }\n    }, \"Log into\"), React.createElement(Text, {\n      style: styles.txt,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 25\n      }\n    }, \"your account\")), React.createElement(View, {\n      style: styles.formInputContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 27\n      }\n    }, React.createElement(Text, {\n      style: styles.inputHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 25\n      }\n    }, \"Your email\"), React.createElement(TextInput, {\n      ref: el => {\n        this.emailInput = el;\n      },\n      onChangeText: text => this.email = text,\n      id: \"email\",\n      autoCapitalize: \"none\",\n      placeholder: \"Enter your email address\",\n      autoCompleteType: 'email',\n      style: styles.textInputStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 25\n      }\n    }), React.createElement(Text, {\n      style: styles.inputHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 27\n      }\n    }, \"Your password\"), React.createElement(TextInput, {\n      ref: el => {\n        this.passwordInput = el;\n      },\n      onChangeText: text => this.password = text,\n      id: \"password\",\n      placeholder: \"Enter your password\",\n      autoCompleteType: 'password',\n      secureTextEntry: true,\n      style: styles.textInputStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 27\n      }\n    }), React.createElement(ListItem, {\n      style: styles.tncstyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 15\n      }\n    }, React.createElement(CheckBox, {\n      color: \"#000\",\n      checked: this.state.isUserWantToSavedLogin,\n      onPress: () => this.doSaveLogin(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 13\n      }\n    }), React.createElement(Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 13\n      }\n    }, \"Save my Login Info\")))), React.createElement(View, {\n      style: styles.bottomLayerFiller,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 17\n      }\n    }), React.createElement(View, {\n      style: styles.bottomLayer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }\n    }, React.createElement(Button, {\n      transparent: true,\n      full: true,\n      style: styles.btnLogin,\n      onPress: this.doLoginNow,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 26\n      }\n    }, React.createElement(Text, {\n      style: styles.btnLoginTextStyle,\n      large: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 29\n      }\n    }, \"Login\"))))), this.state.isLoading ? React.createElement(View, {\n      style: styles.loadingDialog,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 13\n      }\n    }, React.createElement(ActivityIndicator, {\n      style: styles.loadingStyle,\n      size: \"large\",\n      color: 'white',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 22\n      }\n    })) : null, this.state.isShowingSuccessAlert ? React.createElement(View, {\n      style: styles.registerSuccessDialog,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 13\n      }\n    }, React.createElement(View, {\n      style: styles.sucessWordingsContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 22\n      }\n    }, React.createElement(Text, {\n      style: styles.sucessHeading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 29\n      }\n    }, \"Login Success\"), React.createElement(Button, {\n      transparent: true,\n      full: true,\n      style: styles.btnLogonNow,\n      onPress: this.successLoginAction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 29\n      }\n    }, React.createElement(Text, {\n      style: styles.btnLogonNowTextStyle,\n      large: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 33\n      }\n    }, \"Go Shopping Now!\")))) : null, this.state.isShowAlert ? React.createElement(View, {\n      style: styles.registerSuccessDialog,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 13\n      }\n    }, React.createElement(View, {\n      style: styles.sucessWordingsContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 22\n      }\n    }, React.createElement(Text, {\n      style: styles.errorHeading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 29\n      }\n    }, \"Error\"), React.createElement(Text, {\n      style: styles.sucessDescription,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 29\n      }\n    }, loginErrorMessage), React.createElement(Button, {\n      transparent: true,\n      full: true,\n      style: styles.btnLogonNow,\n      onPress: this.closeDialog,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 29\n      }\n    }, React.createElement(Text, {\n      style: styles.btnLogonNowTextStyle,\n      large: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 33\n      }\n    }, \"Close\")))) : null);\n  }\n\n}\n\nvar mapStateToProps = (state, ownProps) => {\n  var {\n    navigation\n  } = ownProps;\n  return {\n    loginStatus: state.auth.loginStatus,\n    loginErrorMessage: state.auth.loginErrorMessage,\n    loginRequest: selectViewActionStatus(state, navigation.state.key, authActions.LOGIN_ACCOUNT)\n  };\n};\n\nvar mapDispatchToProps = dispatch => {\n  return {\n    authActions: bindActionCreators(authActions, dispatch)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginScreen);","map":{"version":3,"sources":["/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/src/screens/legacy/LoginScreen/index.js"],"names":["React","Actions","Header","Container","Content","Button","Text","Toast","Spinner","CheckBox","Radio","ListItem","Left","Right","Body","NavigationActions","StackActions","NavigationProp","bindActionCreators","connect","Input","styles","ScreenNames","ImageSources","BackButton","StandardHeader","authActions","ActionStatusTypeValues","selectViewActionStatus","LoginScreen","Component","constructor","props","backToRoot","navigation","pop","closeDialog","setState","isShowAlert","doSaveLogin","isUserWantToSavedLogin","state","successLoginAction","action","reset","index","actions","replace","routeName","root","push","AppMain","dispatch","validate","text","reg","test","doLoginNow","email","password","show","type","processSubmitForm","isLoading","Keyboard","dismiss","login","key","lastRequest","lastSent","isShowingSuccessAlert","componentDidUpdate","prevProps","loginRequest","status","ERROR","COMPLETED","console","log","loginStatus","loginErrorMessage","render","isCompleteSubmit","registerBackgroundStyle","body","descWrap","txt","formInputContainer","inputHeader","el","emailInput","textInputStyle","passwordInput","tncstyle","bottomLayerFiller","bottomLayer","btnLogin","btnLoginTextStyle","loadingDialog","loadingStyle","registerSuccessDialog","sucessWordingsContainer","sucessHeading","btnLogonNow","btnLogonNowTextStyle","errorHeading","sucessDescription","mapStateToProps","ownProps","auth","LOGIN_ACCOUNT","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {\n    View,\n    TextInput,\n    ActivityIndicator,\n    Image,\n    TouchableOpacity,\n    KeyboardAvoidingView,\n    Platform,\n    Keyboard,\n    StatusBar,\n    ImageBackground,\n    Alert\n} from 'react-native'\nimport { Actions } from 'react-native-router-flux'\nimport { Header, Container, Content, Button, Text, Toast , Spinner, CheckBox, Radio, ListItem, Left, Right, Body} from 'native-base'\nimport { NavigationActions, StackActions, NavigationProp } from 'react-navigation';\nimport { bindActionCreators } from 'redux';\nimport { connect } from \"react-redux\";\nimport { Input } from 'react-native-elements';\nimport styles from './style'\nimport { ScreenNames, ImageSources } from '../../../constants'\nimport { BackButton } from '../../../components/StandardButtons'\nimport { StandardHeader } from '../../../components/legacy/Header';\nimport { authActions } from  '../../../store/actions';\nimport { ActionStatusTypeValues } from '../../../constants/actionStatusTypes';\nimport { selectViewActionStatus } from '../../../store/selectors/app';\n\n\ntype OwnProps = {\n    navigation: NavigationProp;\n}\n\ntype Props = OwnProps & {\n    loginRequest: ViewActionStateInfo,\n    authActions: typeof authActions,\n}\nclass LoginScreen extends React.Component<Props> {\n\n    constructor(props) {\n        super(props);\n        this.state = { \n            isLoading: false,\n            lastRequest:0,\n            lastSent: 0,\n            isUserWantToSavedLogin: false,\n            isShowAlert:false,\n            isShowingSuccessAlert: false\n        };\n    }\n\n    // navigation.popToTop();\n    backToRoot=() =>{\n        const { navigation} = this.props;\n        navigation.pop();\n    }\n\n\n    closeDialog=()=>{\n        this.setState({\n            isShowAlert:false\n        });\n    }\n\n    doSaveLogin=()=>{\n        this.setState({\n            isUserWantToSavedLogin: !this.state.isUserWantToSavedLogin\n        });\n    }\n\n    successLoginAction = () =>{\n            const { navigation} = this.props;\n            // navigation.popToTop();\n\n            const action = StackActions.reset({\n                index:0,\n                actions: [\n                    StackActions.replace({\n                        routeName: ScreenNames.root,\n                        actions: [\n\n                    StackActions.push({\n                        routeName: ScreenNames.AppMain,\n                    })\n                        ]\n                    }),\n                ],\n            })\n            navigation.dispatch(action);\n    }\n\n    validate = (text) => {\n        let reg = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n        if (reg.test(text) === false) {\n           return false;\n        }\n        else {\n            return true;\n\n        }\n      }\n\n    doLoginNow = () => {\n        if (  !this.email || !this.password ) {\n            Toast.show({\n                type: \"danger\",\n                text: 'Please enter email and password',\n            });\n        }else if( this.validate(this.email) == false){\n            Toast.show({\n                type: \"danger\",\n                text: 'Your email address is not a correct format',\n            });\n        \n        }\n        else{\n            this.processSubmitForm();\n        }\n    }\n\n    processSubmitForm = () =>{\n        this.setState({\n            isLoading: true\n        });\n        Keyboard.dismiss();\n        const { authActions, navigation } = this.props;\n        authActions.login(navigation.state.key, this.email, this.password);\n    }\n\n\n\n    componentDidUpdate(prevProps: Props) {\n        const { props, state } = this;\n        if (state.lastRequest !== props.loginRequest.lastRequest) {\n            if (props.loginRequest.status === ActionStatusTypeValues.ERROR) {\n                this.setState({\n                    isLoading: false,\n                    lastRequest: props.loginRequest.lastRequest,\n                }, () => {\n                    Toast.show({\n                        type: \"danger\",\n                        text:\"Sorry, it seems you are facing some technical problem. Please contact IT Support.\"\n                    })\n                });\n            }\n            else if (props.loginRequest.status === ActionStatusTypeValues.COMPLETED) {\n                console.log(this.props.loginStatus);\n                console.log(this.props.loginErrorMessage);\n                if(this.props.loginStatus===\"success\"){\n\n                    this.setState({\n                        isLoading: false,\n                        isShowingSuccessAlert: true,\n                        lastRequest: props.loginRequest.lastRequest,\n                    }, () => {\n    \n                    });\n\n                }else{\n                    this.setState({\n                        isLoading: false,\n                        isShowAlert:true,\n                        lastRequest: props.loginRequest.lastRequest,\n                    }, () => {\n                    });\n                }\n            }\n        }\n    }\n\n\n    render() {\n        const { props } = this;\n        const isCompleteSubmit = props.loginRequest.status === ActionStatusTypeValues.COMPLETED;\n        const loginStatus = props.loginStatus;\n        const loginErrorMessage = props.loginErrorMessage;\n\n\n        return (\n            <Container style={styles.registerBackgroundStyle}>\n            <StandardHeader back />\n\n\n          \n                {/* <StandardHeader back /> */}\n\n\n                <Content>\n                    <View style={styles.body}>\n                        <View style={styles.descWrap}>\n                        <Text style={styles.txt}>Log into</Text>\n                        <Text style={styles.txt}>your account</Text>\n\n\n\n\n                          </View>\n\n                          <View style={styles.formInputContainer}>\n                        \n                    \n\n                        <Text style={styles.inputHeader}>Your email</Text>\n                        <TextInput \n                            ref= {(el) => { this.emailInput = el; }}\n                            onChangeText={(text) => this.email = text}\n                            id=\"email\"\n                            autoCapitalize = 'none'\n                            placeholder='Enter your email address' \n                            autoCompleteType={'email'}\n                            style={styles.textInputStyle}></TextInput>\n\n\n                            \n                          <Text style={styles.inputHeader}>Your password</Text>\n                          <TextInput \n                            ref= {(el) => { this.passwordInput = el; }}\n                            onChangeText={(text) => this.password = text}\n                            id=\"password\" \n                            placeholder='Enter your password' \n                            autoCompleteType={'password'}\n                            secureTextEntry={true} \n                            style={styles.textInputStyle}></TextInput>\n              \n              \n              \n              \n              <ListItem style={styles.tncstyle} >\n            <CheckBox\n              color=\"#000\"\n              checked={this.state.isUserWantToSavedLogin}\n              onPress={() => this.doSaveLogin()}\n            />\n            <Body>\n            <Text>Save my Login Info</Text>\n            </Body>\n          </ListItem>\n\n              \n              \n              \n              \n              \n              \n              \n              \n                </View>\n\n                     \n\n\n                <View style={styles.bottomLayerFiller}></View>\n        <View style={styles.bottomLayer}>\n                         <Button transparent full  style={styles.btnLogin} onPress={this.doLoginNow}>\n                            <Text style={styles.btnLoginTextStyle} large>Login</Text>\n                        </Button>\n\n                    \n        </View>\n\n\n\n\n\n                    </View>\n\n\n\n\n\n                {/* <View style={styles.menubuttoncontainer}>\n                                <TouchableOpacity onPress={this.backToRoot}>\n                                    <View style={styles.menucontainer}>\n                                        <Image source={ImageSources.LeftArrow} style={{ width: 15, height: 15, }} />\n                                    </View>\n                                </TouchableOpacity>\n                        </View>\n */}\n\n\n\n\n                </Content>\n\n\n\n\n                {this.state.isLoading ? (\n            <View style={styles.loadingDialog}>\n                     <ActivityIndicator style={styles.loadingStyle} size=\"large\" color={'white'} />\n            </View>\n        ) : null}\n\n\n\n        { this.state.isShowingSuccessAlert ? (\n            <View style={styles.registerSuccessDialog} >\n                     <View style={styles.sucessWordingsContainer}>\n                            <Text style={styles.sucessHeading}>Login Success</Text>\n                            <Button transparent full style={styles.btnLogonNow} onPress={this.successLoginAction}>\n                                <Text style={styles.btnLogonNowTextStyle} large>Go Shopping Now!</Text>\n                            </Button> \n                     </View>\n               \n            </View>\n        ) : null}\n\n\n\n\n        { this.state.isShowAlert  ? (\n            <View style={styles.registerSuccessDialog} >\n                     <View style={styles.sucessWordingsContainer}>\n                            <Text style={styles.errorHeading}>Error</Text>\n                            <Text style={styles.sucessDescription}>{loginErrorMessage}</Text>\n                            <Button transparent full style={styles.btnLogonNow} onPress={this.closeDialog}>\n                                <Text style={styles.btnLogonNowTextStyle} large>Close</Text>\n                            </Button> \n                     </View>\n               \n            </View>\n        ) : null}\n\n\n\n            </Container>\n        )\n    }\n}\n\n\n\n\nconst mapStateToProps = (state, ownProps: OwnProps) => {\n    const { navigation } = ownProps;\n    return {\n        loginStatus: state.auth.loginStatus,\n        loginErrorMessage: state.auth.loginErrorMessage,\n        loginRequest: selectViewActionStatus(state, navigation.state.key, authActions.LOGIN_ACCOUNT),\n    };\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        authActions: bindActionCreators(authActions, dispatch),\n    };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginScreen);"]},"metadata":{},"sourceType":"module"}