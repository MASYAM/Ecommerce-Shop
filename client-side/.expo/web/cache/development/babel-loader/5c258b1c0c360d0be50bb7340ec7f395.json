{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ExpoErrorRecovery from \"./ExpoErrorRecovery\";\nimport { getRecoveryPropsToSave } from \"./ErroRecoveryStore\";\n\nif (Platform.OS !== 'web') {\n  var globalHandler = ErrorUtils.getGlobalHandler();\n  ErrorUtils.setGlobalHandler(function () {\n    var _ref = _asyncToGenerator(function* (error, isFatal) {\n      if (ExpoErrorRecovery.saveRecoveryProps) {\n        yield ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());\n      }\n\n      globalHandler(error, isFatal);\n    });\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n} else {\n  window.addEventListener('error', () => {\n    ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());\n  });\n}","map":{"version":3,"sources":["../src/ErrorRecovery.fx.ts"],"names":[],"mappings":";;;;;AACA,OAAO,iBAAP;AACA,SAAS,sBAAT;;AAEA,IAAI,QAAQ,CAAC,EAAT,KAAgB,KAApB,EAA2B;AACzB,MAAM,aAAa,GAAG,UAAU,CAAC,gBAAX,EAAtB;AAGA,EAAA,UAAU,CAAC,gBAAX;AAAA,iCAA4B,WAAO,KAAP,EAAc,OAAd,EAAyB;AACnD,UAAI,iBAAiB,CAAC,iBAAtB,EAAyC;AACvC,cAAM,iBAAiB,CAAC,iBAAlB,CAAoC,sBAAsB,EAA1D,CAAN;AACD;;AACD,MAAA,aAAa,CAAC,KAAD,EAAQ,OAAR,CAAb;AACD,KALD;;AAAA;AAAA;AAAA;AAAA;AAMD,CAVD,MAUO;AACL,EAAA,MAAM,CAAC,gBAAP,CAAwB,OAAxB,EAAiC,MAAK;AACpC,IAAA,iBAAiB,CAAC,iBAAlB,CAAoC,sBAAsB,EAA1D;AACD,GAFD;AAGD","sourcesContent":["import { Platform } from 'react-native';\nimport ExpoErrorRecovery from './ExpoErrorRecovery';\nimport { getRecoveryPropsToSave } from './ErroRecoveryStore';\n\nif (Platform.OS !== 'web') {\n  const globalHandler = ErrorUtils.getGlobalHandler();\n  // ErrorUtils came from react-native\n  // https://github.com/facebook/react-native/blob/1151c096dab17e5d9a6ac05b61aacecd4305f3db/Libraries/vendor/core/ErrorUtils.js#L25\n  ErrorUtils.setGlobalHandler(async (error, isFatal) => {\n    if (ExpoErrorRecovery.saveRecoveryProps) {\n      await ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());\n    }\n    globalHandler(error, isFatal);\n  });\n} else {\n  window.addEventListener('error', () => {\n    ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}