{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport { emitNotification } from \"./Notifications\";\nimport { getExponentPushTokenAsync } from \"./ExponentNotificationsHelper.web\";\n\nif (canUseDOM && 'serviceWorker' in navigator) {\n  navigator.serviceWorker.addEventListener('message', event => {\n    emitNotification(event.data);\n  });\n  navigator.serviceWorker.addEventListener('pushsubscriptionchange', function () {\n    var _ref = _asyncToGenerator(function* (event) {\n      yield getExponentPushTokenAsync();\n    });\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n}","map":{"version":3,"sources":["../../src/Notifications/ExponentNotifications.fx.web.ts"],"names":[],"mappings":";;;;AAAA,SAAS,SAAT,QAA0B,+BAA1B;AACA,SAAS,gBAAT;AACA,SAAS,yBAAT;;AAEA,IAAI,SAAS,IAAI,mBAAmB,SAApC,EAA+C;AAC7C,EAAA,SAAS,CAAC,aAAV,CAAwB,gBAAxB,CAAyC,SAAzC,EAAoD,KAAK,IAAG;AAC1D,IAAA,gBAAgB,CAAC,KAAK,CAAC,IAAP,CAAhB;AACD,GAFD;AAIA,EAAA,SAAS,CAAC,aAAV,CAAwB,gBAAxB,CAAyC,wBAAzC;AAAA,iCAAmE,WAAM,KAAN,EAAc;AAE/E,YAAM,yBAAyB,EAA/B;AACD,KAHD;;AAAA;AAAA;AAAA;AAAA;AAID","sourcesContent":["import { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport { emitNotification } from './Notifications';\nimport { getExponentPushTokenAsync } from './ExponentNotificationsHelper.web';\n\nif (canUseDOM && 'serviceWorker' in navigator) {\n  navigator.serviceWorker.addEventListener('message', event => {\n    emitNotification(event.data);\n  });\n\n  navigator.serviceWorker.addEventListener('pushsubscriptionchange', async event => {\n    // Updates Expo token with new device token.\n    await getExponentPushTokenAsync();\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}