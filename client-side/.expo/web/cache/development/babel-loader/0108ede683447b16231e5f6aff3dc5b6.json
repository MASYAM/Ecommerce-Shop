{"ast":null,"code":"var _jsxFileName = \"/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/node_modules/react-native-gesture-handler/createNativeWrapper.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport NativeViewGestureHandler from \"./NativeViewGestureHandler\";\nvar NATIVE_WRAPPER_BIND_BLACKLIST = new Set(['replaceState', 'isMounted']);\nvar NATIVE_WRAPPER_PROPS_FILTER = ['id', 'minPointers', 'enabled', 'waitFor', 'simultaneousHandlers', 'shouldCancelWhenOutside', 'hitSlop', 'onGestureEvent', 'onHandlerStateChange', 'onBegan', 'onFailed', 'onCancelled', 'onActivated', 'onEnded', 'shouldActivateOnStart', 'disallowInterruption', 'onGestureHandlerEvent', 'onGestureHandlerStateChange'];\nexport default function createNativeWrapper(Component) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  class ComponentWrapper extends React.Component {\n    constructor() {\n      super(...arguments);\n\n      this._refHandler = node => {\n        var source = node;\n\n        while (source != null) {\n          for (var methodName of Object.getOwnPropertyNames(source)) {\n            if (!methodName.startsWith('_') && !methodName.startsWith('component') && !NATIVE_WRAPPER_BIND_BLACKLIST.has(methodName) && typeof source[methodName] === 'function' && this[methodName] === undefined) {\n              if (source[methodName].prototype) {\n                this[methodName] = source[methodName].bind(node);\n              } else {\n                this[methodName] = source[methodName];\n              }\n            }\n          }\n\n          source = Object.getPrototypeOf(source);\n        }\n      };\n    }\n\n    render() {\n      var gestureHandlerProps = Object.keys(this.props).reduce((props, key) => {\n        if (NATIVE_WRAPPER_PROPS_FILTER.indexOf(key) !== -1) {\n          props[key] = this.props[key];\n        }\n\n        return props;\n      }, _objectSpread({}, config));\n      return React.createElement(NativeViewGestureHandler, _extends({}, gestureHandlerProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }\n      }), React.createElement(Component, _extends({}, this.props, {\n        ref: this._refHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }\n      })));\n    }\n\n  }\n\n  ComponentWrapper.propTypes = _objectSpread({}, Component.propTypes);\n  ComponentWrapper.displayName = Component.displayName || 'ComponentWrapper';\n  return ComponentWrapper;\n}","map":{"version":3,"sources":["/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/node_modules/react-native-gesture-handler/createNativeWrapper.js"],"names":["React","NativeViewGestureHandler","NATIVE_WRAPPER_BIND_BLACKLIST","Set","NATIVE_WRAPPER_PROPS_FILTER","createNativeWrapper","Component","config","ComponentWrapper","_refHandler","node","source","methodName","Object","getOwnPropertyNames","startsWith","has","undefined","prototype","bind","getPrototypeOf","render","gestureHandlerProps","keys","props","reduce","key","indexOf","propTypes","displayName"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,wBAAP;AAEA,IAAMC,6BAA6B,GAAG,IAAIC,GAAJ,CAAQ,CAAC,cAAD,EAAiB,WAAjB,CAAR,CAAtC;AASA,IAAMC,2BAA2B,GAAG,CAClC,IADkC,EAElC,aAFkC,EAGlC,SAHkC,EAIlC,SAJkC,EAKlC,sBALkC,EAMlC,yBANkC,EAOlC,SAPkC,EAQlC,gBARkC,EASlC,sBATkC,EAUlC,SAVkC,EAWlC,UAXkC,EAYlC,aAZkC,EAalC,aAbkC,EAclC,SAdkC,EAelC,uBAfkC,EAgBlC,sBAhBkC,EAiBlC,uBAjBkC,EAkBlC,6BAlBkC,CAApC;AAqBA,eAAe,SAASC,mBAAT,CAA6BC,SAA7B,EAAqD;AAAA,MAAbC,MAAa,uEAAJ,EAAI;;AAClE,QAAMC,gBAAN,SAA+BR,KAAK,CAACM,SAArC,CAA+C;AAAA;AAAA;;AAAA,WAO7CG,WAP6C,GAO/BC,IAAI,IAAI;AAEpB,YAAIC,MAAM,GAAGD,IAAb;;AACA,eAAOC,MAAM,IAAI,IAAjB,EAAuB;AACrB,eAAK,IAAIC,UAAT,IAAuBC,MAAM,CAACC,mBAAP,CAA2BH,MAA3B,CAAvB,EAA2D;AACzD,gBACE,CAACC,UAAU,CAACG,UAAX,CAAsB,GAAtB,CAAD,IACA,CAACH,UAAU,CAACG,UAAX,CAAsB,WAAtB,CADD,IAEA,CAACb,6BAA6B,CAACc,GAA9B,CAAkCJ,UAAlC,CAFD,IAGA,OAAOD,MAAM,CAACC,UAAD,CAAb,KAA8B,UAH9B,IAIA,KAAKA,UAAL,MAAqBK,SALvB,EAME;AACA,kBAAIN,MAAM,CAACC,UAAD,CAAN,CAAmBM,SAAvB,EAAkC;AAEhC,qBAAKN,UAAL,IAAmBD,MAAM,CAACC,UAAD,CAAN,CAAmBO,IAAnB,CAAwBT,IAAxB,CAAnB;AACD,eAHD,MAGO;AACL,qBAAKE,UAAL,IAAmBD,MAAM,CAACC,UAAD,CAAzB;AACD;AACF;AACF;;AACDD,UAAAA,MAAM,GAAGE,MAAM,CAACO,cAAP,CAAsBT,MAAtB,CAAT;AACD;AACF,OA7B4C;AAAA;;AA+B7CU,IAAAA,MAAM,GAAG;AAEP,UAAMC,mBAAmB,GAAGT,MAAM,CAACU,IAAP,CAAY,KAAKC,KAAjB,EAAwBC,MAAxB,CAC1B,CAACD,KAAD,EAAQE,GAAR,KAAgB;AACd,YAAItB,2BAA2B,CAACuB,OAA5B,CAAoCD,GAApC,MAA6C,CAAC,CAAlD,EAAqD;AACnDF,UAAAA,KAAK,CAACE,GAAD,CAAL,GAAa,KAAKF,KAAL,CAAWE,GAAX,CAAb;AACD;;AACD,eAAOF,KAAP;AACD,OANyB,oBAOrBjB,MAPqB,EAA5B;AASA,aACE,oBAAC,wBAAD,eAA8Be,mBAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACE,oBAAC,SAAD,eAAe,KAAKE,KAApB;AAA2B,QAAA,GAAG,EAAE,KAAKf,WAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,CADF;AAKD;;AA/C4C;;AAAzCD,EAAAA,gBAD4D,CAEzDoB,SAFyD,qBAG3DtB,SAAS,CAACsB,SAHiD;AAC5DpB,EAAAA,gBAD4D,CAMzDqB,WANyD,GAM3CvB,SAAS,CAACuB,WAAV,IAAyB,kBANkB;AAkDlE,SAAOrB,gBAAP;AACD","sourcesContent":["import React from 'react';\n\nimport NativeViewGestureHandler from './NativeViewGestureHandler';\n\nconst NATIVE_WRAPPER_BIND_BLACKLIST = new Set(['replaceState', 'isMounted']);\n\n/*\n * This array should consist of:\n *   - All keys in propTypes from NativeGestureHandler\n *     (and all keys in GestureHandlerPropTypes)\n *   - 'onGestureHandlerEvent'\n *   - 'onGestureHandlerStateChange'\n */\nconst NATIVE_WRAPPER_PROPS_FILTER = [\n  'id',\n  'minPointers',\n  'enabled',\n  'waitFor',\n  'simultaneousHandlers',\n  'shouldCancelWhenOutside',\n  'hitSlop',\n  'onGestureEvent',\n  'onHandlerStateChange',\n  'onBegan',\n  'onFailed',\n  'onCancelled',\n  'onActivated',\n  'onEnded',\n  'shouldActivateOnStart',\n  'disallowInterruption',\n  'onGestureHandlerEvent',\n  'onGestureHandlerStateChange',\n];\n\nexport default function createNativeWrapper(Component, config = {}) {\n  class ComponentWrapper extends React.Component {\n    static propTypes = {\n      ...Component.propTypes,\n    };\n\n    static displayName = Component.displayName || 'ComponentWrapper';\n\n    _refHandler = node => {\n      // bind native component's methods\n      let source = node;\n      while (source != null) {\n        for (let methodName of Object.getOwnPropertyNames(source)) {\n          if (\n            !methodName.startsWith('_') && // private methods\n            !methodName.startsWith('component') && // lifecycle methods\n            !NATIVE_WRAPPER_BIND_BLACKLIST.has(methodName) && // other\n            typeof source[methodName] === 'function' &&\n            this[methodName] === undefined\n          ) {\n            if (source[methodName].prototype) {\n              // determine if it's not bound already\n              this[methodName] = source[methodName].bind(node);\n            } else {\n              this[methodName] = source[methodName];\n            }\n          }\n        }\n        source = Object.getPrototypeOf(source);\n      }\n    };\n\n    render() {\n      // filter out props that should be passed to gesture handler wrapper\n      const gestureHandlerProps = Object.keys(this.props).reduce(\n        (props, key) => {\n          if (NATIVE_WRAPPER_PROPS_FILTER.indexOf(key) !== -1) {\n            props[key] = this.props[key];\n          }\n          return props;\n        },\n        { ...config } // watch out not to modify config\n      );\n      return (\n        <NativeViewGestureHandler {...gestureHandlerProps}>\n          <Component {...this.props} ref={this._refHandler} />\n        </NativeViewGestureHandler>\n      );\n    }\n  }\n  return ComponentWrapper;\n}\n"]},"metadata":{},"sourceType":"module"}