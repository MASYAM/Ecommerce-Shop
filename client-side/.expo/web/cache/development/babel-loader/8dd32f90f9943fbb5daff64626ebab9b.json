{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport invariant from \"../utils/invariant\";\nimport getScreenForRouteName from \"./getScreenForRouteName\";\nimport validateScreenOptions from \"./validateScreenOptions\";\n\nfunction applyConfig(configurer, navigationOptions, configProps) {\n  if (typeof configurer === 'function') {\n    return _objectSpread(_objectSpread({}, navigationOptions), configurer(_objectSpread(_objectSpread({}, configProps), {}, {\n      navigationOptions\n    })));\n  }\n\n  if (typeof configurer === 'object') {\n    return _objectSpread(_objectSpread({}, navigationOptions), configurer);\n  }\n\n  return navigationOptions;\n}\n\nexport default ((routeConfigs, navigatorScreenConfig) => (navigation, screenProps, theme) => {\n  var {\n    state\n  } = navigation;\n  var route = state;\n  invariant(route.routeName && typeof route.routeName === 'string', 'Cannot get config because the route does not have a routeName.');\n  var Component = getScreenForRouteName(routeConfigs, route.routeName);\n  var routeConfig = routeConfigs[route.routeName];\n  var routeScreenConfig = routeConfig === Component ? null : routeConfig.navigationOptions;\n  var componentScreenConfig = Component.navigationOptions;\n  var configOptions = {\n    navigation,\n    screenProps: screenProps || {},\n    theme\n  };\n  var outputConfig = applyConfig(navigatorScreenConfig, {}, configOptions);\n  outputConfig = applyConfig(componentScreenConfig, outputConfig, configOptions);\n  outputConfig = applyConfig(routeScreenConfig, outputConfig, configOptions);\n  validateScreenOptions(outputConfig, route);\n  return outputConfig;\n});","map":{"version":3,"sources":["createConfigGetter.js"],"names":["configurer","navigationOptions","state","route","invariant","Component","getScreenForRouteName","routeConfig","routeConfigs","routeScreenConfig","componentScreenConfig","configOptions","screenProps","theme","outputConfig","applyConfig","validateScreenOptions"],"mappings":";;;;;;AAAA,OAAA,SAAA;AAEA,OAAA,qBAAA;AACA,OAAA,qBAAA;;AAEA,SAAA,WAAA,CAAA,UAAA,EAAA,iBAAA,EAAA,WAAA,EAAiE;AAC/D,MAAI,OAAA,UAAA,KAAJ,UAAA,EAAsC;AACpC,2CAAO,iBAAP,GAEKA,UAAU,iCAAC,WAAD;AAEXC,MAAAA;AAFW,OAFf;AAOD;;AACD,MAAI,OAAA,UAAA,KAAJ,QAAA,EAAoC;AAClC,2CAAO,iBAAP,GAEKD,UAFL;AAID;;AACD,SAAA,iBAAA;AACD;;AAED,gBAAe,CAAA,YAAA,EAAA,qBAAA,KAAyC,CAAA,UAAA,EAAA,WAAA,EAAA,KAAA,KAInD;AACH,MAAM;AAAEE,IAAAA;AAAF,MAAN,UAAA;AACA,MAAMC,KAAK,GAAX,KAAA;AAEAC,EAAAA,SAAS,CACPD,KAAK,CAALA,SAAAA,IAAmB,OAAOA,KAAK,CAAZ,SAAA,KADZ,QAAA,EAATC,gEAAS,CAATA;AAKA,MAAMC,SAAS,GAAGC,qBAAqB,CAAA,YAAA,EAAeH,KAAK,CAA3D,SAAuC,CAAvC;AAEA,MAAMI,WAAW,GAAGC,YAAY,CAACL,KAAK,CAAtC,SAAgC,CAAhC;AAEA,MAAMM,iBAAiB,GACrBF,WAAW,KAAXA,SAAAA,GAAAA,IAAAA,GAAmCA,WAAW,CADhD,iBAAA;AAEA,MAAMG,qBAAqB,GAAGL,SAAS,CAAvC,iBAAA;AAEA,MAAMM,aAAa,GAAG;AAAA,IAAA,UAAA;AAAcC,IAAAA,WAAW,EAAEA,WAAW,IAAtC,EAAA;AAA8CC,IAAAA;AAA9C,GAAtB;AAEA,MAAIC,YAAY,GAAGC,WAAW,CAAA,qBAAA,EAAA,EAAA,EAA9B,aAA8B,CAA9B;AACAD,EAAAA,YAAY,GAAGC,WAAW,CAAA,qBAAA,EAAA,YAAA,EAA1BD,aAA0B,CAA1BA;AAKAA,EAAAA,YAAY,GAAGC,WAAW,CAAA,iBAAA,EAAA,YAAA,EAA1BD,aAA0B,CAA1BA;AAEAE,EAAAA,qBAAqB,CAAA,YAAA,EAArBA,KAAqB,CAArBA;AAEA,SAAA,YAAA;AAjCF,CAAA","sourcesContent":["import invariant from '../utils/invariant';\n\nimport getScreenForRouteName from './getScreenForRouteName';\nimport validateScreenOptions from './validateScreenOptions';\n\nfunction applyConfig(configurer, navigationOptions, configProps) {\n  if (typeof configurer === 'function') {\n    return {\n      ...navigationOptions,\n      ...configurer({\n        ...configProps,\n        navigationOptions,\n      }),\n    };\n  }\n  if (typeof configurer === 'object') {\n    return {\n      ...navigationOptions,\n      ...configurer,\n    };\n  }\n  return navigationOptions;\n}\n\nexport default (routeConfigs, navigatorScreenConfig) => (\n  navigation,\n  screenProps,\n  theme\n) => {\n  const { state } = navigation;\n  const route = state;\n\n  invariant(\n    route.routeName && typeof route.routeName === 'string',\n    'Cannot get config because the route does not have a routeName.'\n  );\n\n  const Component = getScreenForRouteName(routeConfigs, route.routeName);\n\n  const routeConfig = routeConfigs[route.routeName];\n\n  const routeScreenConfig =\n    routeConfig === Component ? null : routeConfig.navigationOptions;\n  const componentScreenConfig = Component.navigationOptions;\n\n  const configOptions = { navigation, screenProps: screenProps || {}, theme };\n\n  let outputConfig = applyConfig(navigatorScreenConfig, {}, configOptions);\n  outputConfig = applyConfig(\n    componentScreenConfig,\n    outputConfig,\n    configOptions\n  );\n  outputConfig = applyConfig(routeScreenConfig, outputConfig, configOptions);\n\n  validateScreenOptions(outputConfig, route);\n\n  return outputConfig;\n};\n"]},"metadata":{},"sourceType":"module"}