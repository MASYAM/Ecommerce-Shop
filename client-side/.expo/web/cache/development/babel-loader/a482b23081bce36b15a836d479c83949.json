{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ADD_TO_CART, REMOVE_FROM_CART, CLEAR_CART } from \"../actions/cart\";\nimport { ActionStatusTypeValues } from \"../../constants/actionStatusTypes\";\nvar initialState = {\n  cartListing: []\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var {\n    type,\n    payload,\n    status\n  } = action;\n\n  switch (action.type) {\n    case ADD_TO_CART:\n      if (status === ActionStatusTypeValues.COMPLETED) {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          cartListing: action.cartListing\n        });\n      }\n\n      break;\n\n    case REMOVE_FROM_CART:\n      if (status === ActionStatusTypeValues.COMPLETED) {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          cartListing: action.cartListing\n        });\n      }\n\n      break;\n\n    case CLEAR_CART:\n      if (status === ActionStatusTypeValues.COMPLETED) {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          cartListing: action.cartListing\n        });\n      }\n\n      break;\n\n    default:\n      return state;\n  }\n\n  return state;\n});","map":{"version":3,"sources":["/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/src/store/reducers/cart.js"],"names":["ADD_TO_CART","REMOVE_FROM_CART","CLEAR_CART","ActionStatusTypeValues","initialState","cartListing","state","action","type","payload","status","COMPLETED"],"mappings":";;;;;;AAAA,SACEA,WADF,EAEEC,gBAFF,EAGEC,UAHF;AAKA,SAASC,sBAAT;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,WAAW,EAAE;AADM,CAArB;AAKA,gBAAe,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBF,YAAyB;AAAA,MAAXG,MAAW;AAC/C,MAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA4BH,MAAlC;;AACA,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,WAAL;AACE,UAAIU,MAAM,KAAKP,sBAAsB,CAACQ,SAAtC,EAAiD;AAC/C,+CACKL,KADL;AAEED,UAAAA,WAAW,EAACE,MAAM,CAACF;AAFrB;AAID;;AACD;;AACF,SAAKJ,gBAAL;AACI,UAAIS,MAAM,KAAKP,sBAAsB,CAACQ,SAAtC,EAAiD;AAC/C,+CACKL,KADL;AAEED,UAAAA,WAAW,EAACE,MAAM,CAACF;AAFrB;AAID;;AACD;;AACJ,SAAKH,UAAL;AACM,UAAIQ,MAAM,KAAKP,sBAAsB,CAACQ,SAAtC,EAAiD;AAC/C,+CACKL,KADL;AAEED,UAAAA,WAAW,EAACE,MAAM,CAACF;AAFrB;AAID;;AACD;;AACN;AACE,aAAOC,KAAP;AA1BJ;;AA4BA,SAAOA,KAAP;AACD,CA/BD","sourcesContent":["import { \n  ADD_TO_CART,\n  REMOVE_FROM_CART,\n  CLEAR_CART\n} from '../actions/cart';\nimport { ActionStatusTypeValues } from '../../constants/actionStatusTypes';\n\nconst initialState = {\n  cartListing: []\n};\n\n\nexport default (state = initialState, action) => {\n  const { type, payload, status } = action;\n  switch (action.type) {\n    case ADD_TO_CART:\n      if (status === ActionStatusTypeValues.COMPLETED) {\n        return {\n          ...state,\n          cartListing:action.cartListing\n        };\n      }\n      break;\n    case REMOVE_FROM_CART:\n        if (status === ActionStatusTypeValues.COMPLETED) {\n          return {\n            ...state,\n            cartListing:action.cartListing\n          };\n        }\n        break;\n    case CLEAR_CART:\n          if (status === ActionStatusTypeValues.COMPLETED) {\n            return {\n              ...state,\n              cartListing:action.cartListing\n            };\n          }\n          break;\n    default:\n      return state;\n  }\n  return state;\n};\n"]},"metadata":{},"sourceType":"module"}