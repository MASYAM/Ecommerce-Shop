{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { CodedError } from '@unimodules/core';\nimport Constants from 'expo-constants';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport function guardPermission() {\n  if (!('Notification' in window)) {\n    throw new Error('The Notification API is not available on this device.');\n  }\n\n  if (!navigator.serviceWorker) {\n    throw new Error('Notifications cannot be used because the service worker API is not supported on this device. This might also happen because your web page does not support HTTPS.');\n  }\n\n  if (Notification.permission !== 'granted') {\n    throw new Error('Cannot use Notifications without permissions. Please request permissions with `expo-permissions`');\n  }\n}\nexport function getExponentPushTokenAsync() {\n  return _getExponentPushTokenAsync.apply(this, arguments);\n}\n\nfunction _getExponentPushTokenAsync() {\n  _getExponentPushTokenAsync = _asyncToGenerator(function* () {\n    if (!Constants.manifest.owner || !Constants.manifest.slug) {\n      throw new CodedError('E_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG', 'You must provide `owner` and `slug` in `app.json` to use push notifications on web. Learn more: https://docs.expo.io/versions/latest/guides/using-vapid/.');\n    }\n\n    var data = yield _subscribeUserToPushAsync();\n    var experienceId = \"@\".concat(Constants.manifest.owner, \"/\").concat(Constants.manifest.slug);\n    var tokenArguments = {\n      deviceId: Constants.installationId,\n      experienceId,\n      appId: experienceId,\n      deviceToken: JSON.stringify(data),\n      type: 'web'\n    };\n    var response = yield fetch('https://exp.host/--/api/v2/push/getExpoPushToken', {\n      method: 'POST',\n      body: JSON.stringify(tokenArguments)\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n\n      return response;\n    }).then(response => response.json()).catch(error => {\n      throw new CodedError('E_NOTIFICATIONS_TOKEN_REGISTRATION_FAILED', 'The device was unable to register for remote notifications with Expo. (' + error + ')');\n    });\n    return response.data.expoPushToken;\n  });\n  return _getExponentPushTokenAsync.apply(this, arguments);\n}\n\nexport function getDevicePushTokenAsync() {\n  return _getDevicePushTokenAsync.apply(this, arguments);\n}\n\nfunction _getDevicePushTokenAsync() {\n  _getDevicePushTokenAsync = _asyncToGenerator(function* () {\n    var data = yield _subscribeUserToPushAsync();\n    return {\n      type: Platform.OS,\n      data\n    };\n  });\n  return _getDevicePushTokenAsync.apply(this, arguments);\n}\n\nfunction _subscribeUserToPushAsync() {\n  return _subscribeUserToPushAsync2.apply(this, arguments);\n}\n\nfunction _subscribeUserToPushAsync2() {\n  _subscribeUserToPushAsync2 = _asyncToGenerator(function* () {\n    if (!Constants.manifest.notification || !Constants.manifest.notification.vapidPublicKey) {\n      throw new CodedError('E_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG', 'You must provide `notification.vapidPublicKey` in `app.json` to use push notifications on web. Learn more: https://docs.expo.io/versions/latest/guides/using-vapid/.');\n    }\n\n    guardPermission();\n    var registration = yield navigator.serviceWorker.register('/expo-service-worker.js');\n    yield navigator.serviceWorker.ready;\n\n    if (!registration.active) {\n      throw new Error('Notifications might not be working because the service worker API is not active.');\n    }\n\n    var subscribeOptions = {\n      userVisibleOnly: true,\n      applicationServerKey: _urlBase64ToUint8Array(Constants.manifest.notification.vapidPublicKey)\n    };\n    var pushSubscription = yield registration.pushManager.subscribe(subscribeOptions).catch(error => {\n      throw new CodedError('E_NOTIFICATIONS_PUSH_WEB_TOKEN_REGISTRATION_FAILED', 'The device was unable to register for remote notifications with the browser endpoint. (' + error + ')');\n    });\n    var pushSubscriptionJson = pushSubscription.toJSON();\n    var subscriptionObject = {\n      endpoint: pushSubscriptionJson.endpoint,\n      keys: {\n        p256dh: pushSubscriptionJson.keys.p256dh,\n        auth: pushSubscriptionJson.keys.auth\n      }\n    };\n    var notificationIcon = (Constants.manifest.notification || {}).icon;\n    yield registration.active.postMessage(JSON.stringify({\n      fromExpoWebClient: {\n        notificationIcon\n      }\n    }));\n    return subscriptionObject;\n  });\n  return _subscribeUserToPushAsync2.apply(this, arguments);\n}\n\nfunction _urlBase64ToUint8Array(base64String) {\n  var padding = '='.repeat((4 - base64String.length % 4) % 4);\n  var base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n  var rawData = window.atob(base64);\n  var outputArray = new Uint8Array(rawData.length);\n\n  for (var i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n}","map":{"version":3,"sources":["../../src/Notifications/ExponentNotificationsHelper.web.ts"],"names":[],"mappings":"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","sourcesContent":["import { CodedError } from '@unimodules/core';\nimport Constants from 'expo-constants';\nimport { Platform } from 'react-native';\n\nexport function guardPermission() {\n  if (!('Notification' in window)) {\n    throw new Error('The Notification API is not available on this device.');\n  }\n  if (!navigator.serviceWorker) {\n    throw new Error(\n      'Notifications cannot be used because the service worker API is not supported on this device. This might also happen because your web page does not support HTTPS.'\n    );\n  }\n  if (Notification.permission !== 'granted') {\n    throw new Error(\n      'Cannot use Notifications without permissions. Please request permissions with `expo-permissions`'\n    );\n  }\n}\n\nexport async function getExponentPushTokenAsync(): Promise<string> {\n  if (!Constants.manifest.owner || !Constants.manifest.slug) {\n    throw new CodedError(\n      'E_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG',\n      'You must provide `owner` and `slug` in `app.json` to use push notifications on web. Learn more: https://docs.expo.io/versions/latest/guides/using-vapid/.'\n    );\n  }\n\n  const data = await _subscribeUserToPushAsync();\n  const experienceId = `@${Constants.manifest.owner}/${Constants.manifest.slug}`;\n  const tokenArguments: { [key: string]: string } = {\n    deviceId: Constants.installationId,\n    experienceId,\n    // Also uses `experienceId` for `appId` because there's no `appId` for web.\n    appId: experienceId,\n    deviceToken: JSON.stringify(data),\n    type: 'web',\n  };\n\n  const response = await fetch('https://exp.host/--/api/v2/push/getExpoPushToken', {\n    method: 'POST',\n    body: JSON.stringify(tokenArguments),\n  })\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      return response;\n    })\n    .then(response => response.json())\n    .catch(error => {\n      throw new CodedError(\n        'E_NOTIFICATIONS_TOKEN_REGISTRATION_FAILED',\n        'The device was unable to register for remote notifications with Expo. (' + error + ')'\n      );\n    });\n\n  return response.data.expoPushToken;\n}\n\nexport async function getDevicePushTokenAsync(): Promise<{ type: string; data: Object }> {\n  const data = await _subscribeUserToPushAsync();\n  return { type: Platform.OS, data };\n}\n\nasync function _subscribeUserToPushAsync(): Promise<Object> {\n  if (!Constants.manifest.notification || !Constants.manifest.notification.vapidPublicKey) {\n    throw new CodedError(\n      'E_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG',\n      'You must provide `notification.vapidPublicKey` in `app.json` to use push notifications on web. Learn more: https://docs.expo.io/versions/latest/guides/using-vapid/.'\n    );\n  }\n  guardPermission();\n\n  const registration = await navigator.serviceWorker.register('/expo-service-worker.js');\n  await navigator.serviceWorker.ready;\n\n  if (!registration.active) {\n    throw new Error(\n      'Notifications might not be working because the service worker API is not active.'\n    );\n  }\n\n  const subscribeOptions = {\n    userVisibleOnly: true,\n    applicationServerKey: _urlBase64ToUint8Array(Constants.manifest.notification.vapidPublicKey),\n  };\n  const pushSubscription = await registration.pushManager\n    .subscribe(subscribeOptions)\n    .catch(error => {\n      throw new CodedError(\n        'E_NOTIFICATIONS_PUSH_WEB_TOKEN_REGISTRATION_FAILED',\n        'The device was unable to register for remote notifications with the browser endpoint. (' +\n          error +\n          ')'\n      );\n    });\n  const pushSubscriptionJson = pushSubscription.toJSON();\n\n  const subscriptionObject = {\n    endpoint: pushSubscriptionJson.endpoint,\n    keys: {\n      p256dh: pushSubscriptionJson.keys!.p256dh,\n      auth: pushSubscriptionJson.keys!.auth,\n    },\n  };\n\n  // Store notification icon string in service worker.\n  // This message is received by `/expo-service-worker.js`.\n  // We wrap it with `fromExpoWebClient` to make sure other message\n  // will not override content such as `notificationIcon`.\n  // https://stackoverflow.com/a/35729334/2603230\n  let notificationIcon = (Constants.manifest.notification || {}).icon;\n  await registration.active.postMessage(\n    JSON.stringify({ fromExpoWebClient: { notificationIcon } })\n  );\n\n  return subscriptionObject;\n}\n\n// https://github.com/web-push-libs/web-push#using-vapid-key-for-applicationserverkey\nfunction _urlBase64ToUint8Array(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}