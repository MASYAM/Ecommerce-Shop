{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { TabView } from 'react-native-tab-view';\nimport createTabNavigator from \"../utils/createTabNavigator\";\nimport MaterialTopTabBar from \"../views/MaterialTopTabBar\";\n\nclass MaterialTabView extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"renderTabBar\", props => {\n      var {\n        state\n      } = this.props.navigation;\n      var route = state.routes[state.index];\n      var {\n        descriptors\n      } = this.props;\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n      var tabBarVisible = options.tabBarVisible == null ? true : options.tabBarVisible;\n      var {\n        navigation,\n        getLabelText,\n        getAccessibilityLabel,\n        getTestID,\n        renderIcon,\n        onTabPress,\n        onTabLongPress,\n        tabBarComponent: TabBarComponent = MaterialTopTabBar,\n        tabBarPosition,\n        tabBarOptions,\n        screenProps\n      } = this.props;\n\n      if (TabBarComponent === null || !tabBarVisible) {\n        return null;\n      }\n\n      return React.createElement(TabBarComponent, _extends({}, tabBarOptions, props, {\n        tabBarPosition: tabBarPosition,\n        screenProps: screenProps,\n        navigation: navigation,\n        getLabelText: getLabelText,\n        getAccessibilityLabel: getAccessibilityLabel,\n        getTestID: getTestID,\n        renderIcon: renderIcon,\n        onTabPress: onTabPress,\n        onTabLongPress: onTabLongPress\n      }));\n    });\n  }\n\n  render() {\n    var _this$props = this.props,\n        {\n      getLabelText,\n      getAccessibilityLabel,\n      getTestID,\n      renderIcon,\n      onTabPress,\n      onTabLongPress,\n      screenProps,\n      tabBarComponent,\n      tabBarOptions,\n      lazyPlaceholderComponent,\n      pagerComponent,\n      navigation,\n      descriptors\n    } = _this$props,\n        rest = _objectWithoutProperties(_this$props, [\"getLabelText\", \"getAccessibilityLabel\", \"getTestID\", \"renderIcon\", \"onTabPress\", \"onTabLongPress\", \"screenProps\", \"tabBarComponent\", \"tabBarOptions\", \"lazyPlaceholderComponent\", \"pagerComponent\", \"navigation\", \"descriptors\"]);\n\n    var {\n      state\n    } = navigation;\n    var route = state.routes[state.index];\n    var descriptor = descriptors[route.key];\n    var options = descriptor.options;\n    var swipeEnabled = options.swipeEnabled == null ? this.props.swipeEnabled : options.swipeEnabled;\n\n    if (typeof swipeEnabled === 'function') {\n      swipeEnabled = swipeEnabled(state);\n    }\n\n    return React.createElement(TabView, _extends({}, rest, {\n      navigationState: navigation.state,\n      swipeEnabled: swipeEnabled,\n      renderTabBar: this.renderTabBar,\n      renderLazyPlaceholder: lazyPlaceholderComponent !== undefined ? props => React.createElement(lazyPlaceholderComponent, props) : undefined,\n      renderPager: pagerComponent !== undefined ? props => React.createElement(pagerComponent, props) : undefined\n    }));\n  }\n\n}\n\nexport default createTabNavigator(MaterialTabView);","map":{"version":3,"sources":["createMaterialTopTabNavigator.tsx"],"names":["React","props","state","route","descriptors","descriptor","options","tabBarVisible","tabBarComponent","TabBarComponent","screenProps","onTabLongPress","render","rest","swipeEnabled","navigation","lazyPlaceholderComponent","pagerComponent","undefined","createTabNavigator"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleProp, ViewStyle } from 'react-native';\nimport { TabView, SceneRendererProps } from 'react-native-tab-view';\nimport createTabNavigator, {\n  NavigationViewProps,\n} from '../utils/createTabNavigator';\nimport MaterialTopTabBar from '../views/MaterialTopTabBar';\nimport {\n  NavigationTabProp,\n  NavigationMaterialTabOptions,\n  MaterialTabBarOptions,\n  SceneDescriptorMap,\n} from '../types';\n\ntype Route = {\n  key: string;\n  routeName: string;\n};\n\ntype Config = {\n  keyboardDismissMode?: 'none' | 'on-drag';\n  swipeEnabled?: boolean;\n  swipeDistanceThreshold?: number;\n  swipeVelocityThreshold?: number;\n  initialLayout?: { width?: number; height?: number };\n  lazy?: boolean;\n  lazyPlaceholderComponent?: React.ComponentType<{ route: Route }>;\n  pagerComponent?: React.ComponentType<\n    Parameters<React.ComponentProps<typeof TabView>['renderPager']>[0]\n  >;\n  tabBarComponent?: React.ComponentType<any>;\n  tabBarOptions?: MaterialTabBarOptions;\n  tabBarPosition?: 'top' | 'bottom';\n  sceneContainerStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n};\n\ntype Props = NavigationViewProps &\n  Config & {\n    onSwipeStart?: () => void;\n    onSwipeEnd?: () => void;\n    navigation: NavigationTabProp;\n    descriptors: SceneDescriptorMap;\n    screenProps?: unknown;\n  };\n\nclass MaterialTabView extends React.PureComponent<Props> {\n  private renderTabBar = (props: SceneRendererProps) => {\n    const { state } = this.props.navigation;\n    const route = state.routes[state.index];\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    const tabBarVisible =\n      options.tabBarVisible == null ? true : options.tabBarVisible;\n\n    const {\n      navigation,\n      getLabelText,\n      getAccessibilityLabel,\n      getTestID,\n      renderIcon,\n      onTabPress,\n      onTabLongPress,\n      tabBarComponent: TabBarComponent = MaterialTopTabBar,\n      tabBarPosition,\n      tabBarOptions,\n      screenProps,\n    } = this.props;\n\n    if (TabBarComponent === null || !tabBarVisible) {\n      return null;\n    }\n\n    return (\n      <TabBarComponent\n        {...tabBarOptions}\n        {...props}\n        tabBarPosition={tabBarPosition}\n        screenProps={screenProps}\n        navigation={navigation}\n        getLabelText={getLabelText}\n        getAccessibilityLabel={getAccessibilityLabel}\n        getTestID={getTestID}\n        renderIcon={renderIcon}\n        onTabPress={onTabPress}\n        onTabLongPress={onTabLongPress}\n      />\n    );\n  };\n\n  render() {\n    const {\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      getLabelText,\n      getAccessibilityLabel,\n      getTestID,\n      renderIcon,\n      onTabPress,\n      onTabLongPress,\n      screenProps,\n      tabBarComponent,\n      tabBarOptions,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      lazyPlaceholderComponent,\n      pagerComponent,\n      navigation,\n      descriptors,\n      ...rest\n    } = this.props;\n\n    const { state } = navigation;\n    const route = state.routes[state.index];\n\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    let swipeEnabled =\n      // @ts-ignore\n      options.swipeEnabled == null\n        ? this.props.swipeEnabled\n        : (options as any).swipeEnabled;\n\n    if (typeof swipeEnabled === 'function') {\n      swipeEnabled = swipeEnabled(state);\n    }\n\n    return (\n      <TabView\n        {...rest}\n        navigationState={navigation.state}\n        swipeEnabled={swipeEnabled}\n        renderTabBar={this.renderTabBar}\n        renderLazyPlaceholder={\n          lazyPlaceholderComponent !== undefined\n            ? (props) => React.createElement(lazyPlaceholderComponent, props)\n            : undefined\n        }\n        renderPager={\n          pagerComponent !== undefined\n            ? (props) => React.createElement(pagerComponent, props)\n            : undefined\n        }\n      />\n    );\n  }\n}\n\nexport default createTabNavigator<Config, NavigationMaterialTabOptions, Props>(\n  MaterialTabView\n);\n"]},"metadata":{},"sourceType":"module"}