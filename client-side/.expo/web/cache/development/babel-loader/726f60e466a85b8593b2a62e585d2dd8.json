{"ast":null,"code":"import AnimatedNode from \"./AnimatedNode\";\nimport { val } from \"../val\";\nimport ReanimatedModule from \"../ReanimatedModule\";\nimport invariant from 'fbjs/lib/invariant';\n\nfunction sanitizeValue(value) {\n  return value === null || value === undefined || typeof value === 'string' ? value : Number(value);\n}\n\nvar CONSTANT_VALUES = new Map();\n\nfunction initializeConstantValues() {\n  if (CONSTANT_VALUES.size !== 0) {\n    return;\n  }\n\n  [0, -1, 1, -2, 2].forEach(v => CONSTANT_VALUES.set(v, new InternalAnimatedValue(v, true)));\n}\n\nexport default class InternalAnimatedValue extends AnimatedNode {\n  static valueForConstant(number) {\n    initializeConstantValues();\n    return CONSTANT_VALUES.get(number) || new InternalAnimatedValue(number, true);\n  }\n\n  constructor(value) {\n    var constant = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    invariant(value !== null, 'Animated.Value cannot be set to the null');\n    super({\n      type: 'value',\n      value: sanitizeValue(value)\n    });\n    this._startingValue = this._value = value;\n    this._animation = null;\n    this._constant = constant;\n  }\n\n  __detach() {\n    if (!this._constant) {\n      if (ReanimatedModule.getValue) {\n        ReanimatedModule.getValue(this.__nodeID, val => this.__nodeConfig.value = val);\n      } else {\n        this.__nodeConfig.value = this.__getValue();\n      }\n    }\n\n    this.__detachAnimation(this._animation);\n\n    super.__detach();\n  }\n\n  __detachAnimation(animation) {\n    animation && animation.__detach();\n\n    if (this._animation === animation) {\n      this._animation = null;\n    }\n  }\n\n  __attachAnimation(animation) {\n    this.__detachAnimation(this._animation);\n\n    this._animation = animation;\n  }\n\n  __onEvaluate() {\n    if (this.__inputNodes && this.__inputNodes.length) {\n      this.__inputNodes.forEach(val);\n    }\n\n    return this._value;\n  }\n\n  setValue(value) {\n    this.__detachAnimation(this._animation);\n\n    this._updateValue(value);\n  }\n\n  _updateValue(value) {\n    this._value = value;\n\n    this.__forceUpdateCache(value);\n  }\n\n}","map":{"version":3,"sources":["InternalAnimatedValue.js"],"names":["value","Number","CONSTANT_VALUES","v","initializeConstantValues","constructor","constant","invariant","type","sanitizeValue","__detach","ReanimatedModule","val","__detachAnimation","animation","__attachAnimation","__onEvaluate","setValue","_updateValue"],"mappings":"AAAA,OAAA,YAAA;AACA,SAAA,GAAA;AACA,OAAA,gBAAA;AACA,OAAA,SAAA,MAAA,oBAAA;;AAEA,SAAA,aAAA,CAAA,KAAA,EAA8B;AAC5B,SAAOA,KAAK,KAALA,IAAAA,IAAkBA,KAAK,KAAvBA,SAAAA,IAAyC,OAAA,KAAA,KAAzCA,QAAAA,GAAAA,KAAAA,GAEHC,MAAM,CAFV,KAEU,CAFV;AAGD;;AAED,IAAMC,eAAe,GAAG,IAAxB,GAAwB,EAAxB;;AAEA,SAAA,wBAAA,GAAoC;AAClC,MAAIA,eAAe,CAAfA,IAAAA,KAAJ,CAAA,EAAgC;AAC9B;AACD;;AACD,GAAA,CAAA,EAAI,CAAJ,CAAA,EAAA,CAAA,EAAW,CAAX,CAAA,EAAA,CAAA,EAAA,OAAA,CAA0BC,CAAC,IACzBD,eAAe,CAAfA,GAAAA,CAAAA,CAAAA,EAAuB,IAAA,qBAAA,CAAA,CAAA,EADzB,IACyB,CAAvBA,CADF;AAGD;;AAMD,eAAe,MAAA,qBAAA,SAAA,YAAA,CAAiD;AAC9D,SAAA,gBAAA,CAAA,MAAA,EAAgC;AAC9BE,IAAAA,wBAAwB;AACxB,WACEF,eAAe,CAAfA,GAAAA,CAAAA,MAAAA,KAA+B,IAAA,qBAAA,CAAA,MAAA,EADjC,IACiC,CADjC;AAGD;;AAEDG,EAAAA,WAAW,CAAA,KAAA,EAA0B;AAAA,QAAlBC,QAAkB,uEAA1B,KAA0B;AACnCC,IAAAA,SAAS,CACPP,KAAK,KADE,IAAA,EAATO,0CAAS,CAATA;AAIA,UAAM;AAAEC,MAAAA,IAAI,EAAN,OAAA;AAAiBR,MAAAA,KAAK,EAAES,aAAa,CAAA,KAAA;AAArC,KAAN;AACA,SAAA,cAAA,GAAsB,KAAA,MAAA,GAAtB,KAAA;AACA,SAAA,UAAA,GAAA,IAAA;AACA,SAAA,SAAA,GAAA,QAAA;AACD;;AAEDC,EAAAA,QAAQ,GAAG;AACT,QAAI,CAAC,KAAL,SAAA,EAAqB;AACnB,UAAIC,gBAAgB,CAApB,QAAA,EAA+B;AAC7BA,QAAAA,gBAAgB,CAAhBA,QAAAA,CACE,KADFA,QAAAA,EAEEC,GAAG,IAAK,KAAA,YAAA,CAAA,KAAA,GAFVD,GAAAA;AADF,OAAA,MAKO;AACL,aAAA,YAAA,CAAA,KAAA,GAA0B,KAA1B,UAA0B,EAA1B;AACD;AACF;;AACD,SAAA,iBAAA,CAAuB,KAAvB,UAAA;;AACA,UAAA,QAAA;AACD;;AAEDE,EAAAA,iBAAiB,CAAA,SAAA,EAAY;AAC3BC,IAAAA,SAAS,IAAIA,SAAS,CAAtBA,QAAaA,EAAbA;;AACA,QAAI,KAAA,UAAA,KAAJ,SAAA,EAAmC;AACjC,WAAA,UAAA,GAAA,IAAA;AACD;AACF;;AAEDC,EAAAA,iBAAiB,CAAA,SAAA,EAAY;AAC3B,SAAA,iBAAA,CAAuB,KAAvB,UAAA;;AACA,SAAA,UAAA,GAAA,SAAA;AACD;;AAEDC,EAAAA,YAAY,GAAG;AACb,QAAI,KAAA,YAAA,IAAqB,KAAA,YAAA,CAAzB,MAAA,EAAmD;AACjD,WAAA,YAAA,CAAA,OAAA,CAAA,GAAA;AACD;;AACD,WAAO,KAAP,MAAA;AAlD4D;;AAsD9DC,EAAAA,QAAQ,CAAA,KAAA,EAAQ;AACd,SAAA,iBAAA,CAAuB,KAAvB,UAAA;;AACA,SAAA,YAAA,CAAA,KAAA;AACD;;AAEDC,EAAAA,YAAY,CAAA,KAAA,EAAQ;AAClB,SAAA,MAAA,GAAA,KAAA;;AACA,SAAA,kBAAA,CAAA,KAAA;AACD;;AA9D6D","sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport { val } from '../val';\nimport ReanimatedModule from '../ReanimatedModule';\nimport invariant from 'fbjs/lib/invariant';\n\nfunction sanitizeValue(value) {\n  return value === null || value === undefined || typeof value === 'string'\n    ? value\n    : Number(value);\n}\n\nconst CONSTANT_VALUES = new Map();\n\nfunction initializeConstantValues() {\n  if (CONSTANT_VALUES.size !== 0) {\n    return;\n  }\n  [0, -1, 1, -2, 2].forEach(v =>\n    CONSTANT_VALUES.set(v, new InternalAnimatedValue(v, true))\n  );\n}\n\n/**\n * This class has been made internal in order to omit dependencies' cycles which\n * were caused by imperative setValue and interpolate â€“ they are currently exposed with AnimatedValue.js\n */\nexport default class InternalAnimatedValue extends AnimatedNode {\n  static valueForConstant(number) {\n    initializeConstantValues();\n    return (\n      CONSTANT_VALUES.get(number) || new InternalAnimatedValue(number, true)\n    );\n  }\n\n  constructor(value, constant = false) {\n    invariant(\n      value !== null,\n      'Animated.Value cannot be set to the null'\n    );\n    super({ type: 'value', value: sanitizeValue(value) });\n    this._startingValue = this._value = value;\n    this._animation = null;\n    this._constant = constant;\n  }\n\n  __detach() {\n    if (!this._constant) {\n      if (ReanimatedModule.getValue) {\n        ReanimatedModule.getValue(\n          this.__nodeID,\n          val => (this.__nodeConfig.value = val)\n        );\n      } else {\n        this.__nodeConfig.value = this.__getValue();\n      }\n    }\n    this.__detachAnimation(this._animation);\n    super.__detach();\n  }\n\n  __detachAnimation(animation) {\n    animation && animation.__detach();\n    if (this._animation === animation) {\n      this._animation = null;\n    }\n  }\n\n  __attachAnimation(animation) {\n    this.__detachAnimation(this._animation);\n    this._animation = animation;\n  }\n\n  __onEvaluate() {\n    if (this.__inputNodes && this.__inputNodes.length) {\n      this.__inputNodes.forEach(val);\n    }\n    return this._value;\n  }\n\n  // AnimatedValue will override this method to modify the value of a native node.\n  setValue(value) {\n    this.__detachAnimation(this._animation);\n    this._updateValue(value);\n  }\n\n  _updateValue(value) {\n    this._value = value;\n    this.__forceUpdateCache(value);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}