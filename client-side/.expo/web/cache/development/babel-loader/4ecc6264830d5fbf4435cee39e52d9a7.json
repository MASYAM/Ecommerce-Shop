{"ast":null,"code":"import invariant from 'fbjs/lib/invariant';\nimport ReanimatedEventEmitter from \"../ReanimatedEventEmitter\";\nimport { val } from \"../val\";\nimport AnimatedNode from \"./AnimatedNode\";\nvar NODE_MAPPING = new Map();\n\nfunction listener(data) {\n  var node = NODE_MAPPING.get(data.id);\n  node && node._callback(data.args);\n}\n\nclass AnimatedCall extends AnimatedNode {\n  constructor(args, jsFunction) {\n    invariant(args.every(el => el instanceof AnimatedNode), \"Reanimated: Animated.call node args should be an array with elements of type AnimatedNode. One or more of them are not AnimatedNodes\");\n    super({\n      type: 'call',\n      input: args\n    }, args);\n    this._callback = jsFunction;\n    this._args = args;\n  }\n\n  toString() {\n    return \"AnimatedCall, id: \".concat(this.__nodeID);\n  }\n\n  __attach() {\n    super.__attach();\n\n    NODE_MAPPING.set(this.__nodeID, this);\n\n    if (NODE_MAPPING.size === 1) {\n      ReanimatedEventEmitter.addListener('onReanimatedCall', listener);\n    }\n  }\n\n  __detach() {\n    NODE_MAPPING.delete(this.__nodeID);\n\n    if (NODE_MAPPING.size === 0) {\n      ReanimatedEventEmitter.removeAllListeners('onReanimatedCall');\n    }\n\n    super.__detach();\n  }\n\n  __onEvaluate() {\n    this._callback(this._args.map(val));\n\n    return 0;\n  }\n\n}\n\nexport function createAnimatedCall(args, func) {\n  return new AnimatedCall(args, func);\n}","map":{"version":3,"sources":["/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/node_modules/react-native-reanimated/src/core/AnimatedCall.js"],"names":["invariant","ReanimatedEventEmitter","val","AnimatedNode","NODE_MAPPING","Map","listener","data","node","get","id","_callback","args","AnimatedCall","constructor","jsFunction","every","el","type","input","_args","toString","__nodeID","__attach","set","size","addListener","__detach","delete","removeAllListeners","__onEvaluate","map","createAnimatedCall","func"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,oBAAtB;AACA,OAAOC,sBAAP;AACA,SAASC,GAAT;AACA,OAAOC,YAAP;AAEA,IAAMC,YAAY,GAAG,IAAIC,GAAJ,EAArB;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,MAAMC,IAAI,GAAGJ,YAAY,CAACK,GAAb,CAAiBF,IAAI,CAACG,EAAtB,CAAb;AACAF,EAAAA,IAAI,IAAIA,IAAI,CAACG,SAAL,CAAeJ,IAAI,CAACK,IAApB,CAAR;AACD;;AAED,MAAMC,YAAN,SAA2BV,YAA3B,CAAwC;AAItCW,EAAAA,WAAW,CAACF,IAAD,EAAOG,UAAP,EAAmB;AAC5Bf,IAAAA,SAAS,CACPY,IAAI,CAACI,KAAL,CAAWC,EAAE,IAAIA,EAAE,YAAYd,YAA/B,CADO,yIAAT;AAIA,UAAM;AAAEe,MAAAA,IAAI,EAAE,MAAR;AAAgBC,MAAAA,KAAK,EAAEP;AAAvB,KAAN,EAAqCA,IAArC;AACA,SAAKD,SAAL,GAAiBI,UAAjB;AACA,SAAKK,KAAL,GAAaR,IAAb;AACD;;AAEDS,EAAAA,QAAQ,GAAG;AACT,uCAA4B,KAAKC,QAAjC;AACD;;AAEDC,EAAAA,QAAQ,GAAG;AACT,UAAMA,QAAN;;AACAnB,IAAAA,YAAY,CAACoB,GAAb,CAAiB,KAAKF,QAAtB,EAAgC,IAAhC;;AACA,QAAIlB,YAAY,CAACqB,IAAb,KAAsB,CAA1B,EAA6B;AAC3BxB,MAAAA,sBAAsB,CAACyB,WAAvB,CAAmC,kBAAnC,EAAuDpB,QAAvD;AACD;AACF;;AAEDqB,EAAAA,QAAQ,GAAG;AACTvB,IAAAA,YAAY,CAACwB,MAAb,CAAoB,KAAKN,QAAzB;;AACA,QAAIlB,YAAY,CAACqB,IAAb,KAAsB,CAA1B,EAA6B;AAC3BxB,MAAAA,sBAAsB,CAAC4B,kBAAvB,CAA0C,kBAA1C;AACD;;AACD,UAAMF,QAAN;AACD;;AAEDG,EAAAA,YAAY,GAAG;AACb,SAAKnB,SAAL,CAAe,KAAKS,KAAL,CAAWW,GAAX,CAAe7B,GAAf,CAAf;;AACA,WAAO,CAAP;AACD;;AArCqC;;AAwCxC,OAAO,SAAS8B,kBAAT,CAA4BpB,IAA5B,EAAkCqB,IAAlC,EAAwC;AAC7C,SAAO,IAAIpB,YAAJ,CAAiBD,IAAjB,EAAuBqB,IAAvB,CAAP;AACD","sourcesContent":["import invariant from 'fbjs/lib/invariant';\nimport ReanimatedEventEmitter from '../ReanimatedEventEmitter';\nimport { val } from '../val';\nimport AnimatedNode from './AnimatedNode';\n\nconst NODE_MAPPING = new Map();\n\nfunction listener(data) {\n  const node = NODE_MAPPING.get(data.id);\n  node && node._callback(data.args);\n}\n\nclass AnimatedCall extends AnimatedNode {\n  _callback;\n  _args;\n\n  constructor(args, jsFunction) {\n    invariant(\n      args.every(el => el instanceof AnimatedNode),\n      `Reanimated: Animated.call node args should be an array with elements of type AnimatedNode. One or more of them are not AnimatedNodes`\n    );\n    super({ type: 'call', input: args }, args);\n    this._callback = jsFunction;\n    this._args = args;\n  }\n\n  toString() {\n    return `AnimatedCall, id: ${this.__nodeID}`;\n  }\n\n  __attach() {\n    super.__attach();\n    NODE_MAPPING.set(this.__nodeID, this);\n    if (NODE_MAPPING.size === 1) {\n      ReanimatedEventEmitter.addListener('onReanimatedCall', listener);\n    }\n  }\n\n  __detach() {\n    NODE_MAPPING.delete(this.__nodeID);\n    if (NODE_MAPPING.size === 0) {\n      ReanimatedEventEmitter.removeAllListeners('onReanimatedCall');\n    }\n    super.__detach();\n  }\n\n  __onEvaluate() {\n    this._callback(this._args.map(val));\n    return 0;\n  }\n}\n\nexport function createAnimatedCall(args, func) {\n  return new AnimatedCall(args, func);\n}\n"]},"metadata":{},"sourceType":"module"}