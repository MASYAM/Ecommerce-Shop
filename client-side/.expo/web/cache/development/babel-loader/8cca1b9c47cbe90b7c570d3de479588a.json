{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport AnimatedNode, { getCallID, setCallID } from \"./AnimatedNode\";\nimport { adapt } from \"./AnimatedBlock\";\nimport { val } from \"../val\";\nimport invariant from 'fbjs/lib/invariant';\n\nclass AnimatedCallFunc extends AnimatedNode {\n  constructor(what, args, params) {\n    invariant(what instanceof AnimatedNode, \"Reanimated: AnimatedCallFunc 'what' argument should be of type AnimatedNode but got \".concat(what));\n    invariant(args.every(el => el instanceof AnimatedNode), \"Reanimated: every AnimatedCallFunc 'args' argument should be of type AnimatedNode but got \".concat(args));\n    invariant(params.every(el => el instanceof AnimatedNode), \"Reanimated: every AnimatedCallFunc 'params' argument should be of type AnimatedNode but got \".concat(params));\n    super({\n      type: 'callfunc',\n      what,\n      args,\n      params\n    }, [...args]);\n\n    _defineProperty(this, \"_previousCallID\", void 0);\n\n    _defineProperty(this, \"_what\", void 0);\n\n    _defineProperty(this, \"_args\", void 0);\n\n    _defineProperty(this, \"_params\", void 0);\n\n    this._what = what;\n    this._args = args;\n    this._params = params;\n  }\n\n  toString() {\n    return \"AnimatedCallFunc, id: \".concat(this.__nodeID);\n  }\n\n  beginContext() {\n    this._previousCallID = getCallID();\n    setCallID(getCallID() + '/' + this.__nodeID);\n\n    this._params.forEach((param, index) => {\n      param.beginContext(this._args[index], this._previousCallID);\n    });\n  }\n\n  endContext() {\n    this._params.forEach((param, index) => {\n      param.endContext();\n    });\n\n    setCallID(this._previousCallID);\n  }\n\n  __onEvaluate() {\n    this.beginContext();\n    var value = val(this._what);\n    this.endContext();\n    return value;\n  }\n\n}\n\nexport function createAnimatedCallFunc(proc, args, params) {\n  return new AnimatedCallFunc(proc, args.map(p => adapt(p)), params);\n}","map":{"version":3,"sources":["AnimatedCallFunc.js"],"names":["constructor","invariant","what","args","el","params","type","toString","beginContext","getCallID","setCallID","param","endContext","__onEvaluate","value","val","p","adapt"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAA,YAAA,IAAA,SAAA,EAAA,SAAA;AACA,SAAA,KAAA;AACA,SAAA,GAAA;AACA,OAAA,SAAA,MAAA,oBAAA;;AAEA,MAAA,gBAAA,SAAA,YAAA,CAA4C;AAK1CA,EAAAA,WAAW,CAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAqB;AAC9BC,IAAAA,SAAS,CACPC,IAAI,YADG,YAAA,EAAA,uFAAA,MAAA,CAATD,IAAS,CAAA,CAATA;AAIAA,IAAAA,SAAS,CACPE,IAAI,CAAJA,KAAAA,CAAWC,EAAE,IAAIA,EAAE,YADZ,YACPD,CADO,EAAA,6FAAA,MAAA,CAATF,IAAS,CAAA,CAATA;AAIAA,IAAAA,SAAS,CACPI,MAAM,CAANA,KAAAA,CAAaD,EAAE,IAAIA,EAAE,YADd,YACPC,CADO,EAAA,+FAAA,MAAA,CAATJ,MAAS,CAAA,CAATA;AAIA,UACE;AACEK,MAAAA,IAAI,EADN,UAAA;AAAA,MAAA,IAAA;AAAA,MAAA,IAAA;AAIED,MAAAA;AAJF,KADF,EAOE,CAAC,GAPH,IAOE,CAPF;;AAb8B,IAAA,eAAA,CAAA,IAAA,EAAA,iBAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA;;AAsB9B,SAAA,KAAA,GAAA,IAAA;AACA,SAAA,KAAA,GAAA,IAAA;AACA,SAAA,OAAA,GAAA,MAAA;AACD;;AAEDE,EAAAA,QAAQ,GAAG;AACT,WAAA,yBAAA,MAAA,CAAgC,KAAhC,QAAA,CAAA;AACD;;AAEDC,EAAAA,YAAY,GAAG;AACb,SAAA,eAAA,GAAuBC,SAAvB,EAAA;AACAC,IAAAA,SAAS,CAACD,SAAS,KAATA,GAAAA,GAAoB,KAA9BC,QAAS,CAATA;;AAEA,SAAA,OAAA,CAAA,OAAA,CAAqB,CAAA,KAAA,EAAA,KAAA,KAAkB;AACrCC,MAAAA,KAAK,CAALA,YAAAA,CAAmB,KAAA,KAAA,CAAnBA,KAAmB,CAAnBA,EAAsC,KAAtCA,eAAAA;AADF,KAAA;AAGD;;AAEDC,EAAAA,UAAU,GAAG;AACX,SAAA,OAAA,CAAA,OAAA,CAAqB,CAAA,KAAA,EAAA,KAAA,KAAkB;AACrCD,MAAAA,KAAK,CAALA,UAAAA;AADF,KAAA;;AAGAD,IAAAA,SAAS,CAAC,KAAVA,eAAS,CAATA;AACD;;AAEDG,EAAAA,YAAY,GAAG;AACb,SAAA,YAAA;AACA,QAAMC,KAAK,GAAGC,GAAG,CAAC,KAAlB,KAAiB,CAAjB;AACA,SAAA,UAAA;AACA,WAAA,KAAA;AACD;;AAzDyC;;AA4D5C,OAAO,SAAA,sBAAA,CAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAoD;AACzD,SAAO,IAAA,gBAAA,CAAA,IAAA,EAA2BZ,IAAI,CAAJA,GAAAA,CAASa,CAAC,IAAIC,KAAK,CAA9C,CAA8C,CAAnBd,CAA3B,EAAP,MAAO,CAAP;AACD","sourcesContent":["import AnimatedNode, { getCallID, setCallID } from './AnimatedNode';\nimport { adapt } from './AnimatedBlock';\nimport { val } from '../val';\nimport invariant from 'fbjs/lib/invariant';\n\nclass AnimatedCallFunc extends AnimatedNode {\n  _previousCallID;\n  _what;\n  _args;\n  _params;\n  constructor(what, args, params) {\n    invariant(\n      what instanceof AnimatedNode,\n      `Reanimated: AnimatedCallFunc 'what' argument should be of type AnimatedNode but got ${what}`\n    );\n    invariant(\n      args.every(el => el instanceof AnimatedNode),\n      `Reanimated: every AnimatedCallFunc 'args' argument should be of type AnimatedNode but got ${args}`\n    );\n    invariant(\n      params.every(el => el instanceof AnimatedNode),\n      `Reanimated: every AnimatedCallFunc 'params' argument should be of type AnimatedNode but got ${params}`\n    );\n    super(\n      {\n        type: 'callfunc',\n        what,\n        args,\n        params,\n      },\n      [...args]\n    );\n    this._what = what;\n    this._args = args;\n    this._params = params;\n  }\n\n  toString() {\n    return `AnimatedCallFunc, id: ${this.__nodeID}`;\n  }\n\n  beginContext() {\n    this._previousCallID = getCallID();\n    setCallID(getCallID() + '/' + this.__nodeID);\n\n    this._params.forEach((param, index) => {\n      param.beginContext(this._args[index], this._previousCallID);\n    });\n  }\n\n  endContext() {\n    this._params.forEach((param, index) => {\n      param.endContext();\n    });\n    setCallID(this._previousCallID);\n  }\n\n  __onEvaluate() {\n    this.beginContext();\n    const value = val(this._what);\n    this.endContext();\n    return value;\n  }\n}\n\nexport function createAnimatedCallFunc(proc, args, params) {\n  return new AnimatedCallFunc(proc, args.map(p => adapt(p)), params);\n}\n"]},"metadata":{},"sourceType":"module"}