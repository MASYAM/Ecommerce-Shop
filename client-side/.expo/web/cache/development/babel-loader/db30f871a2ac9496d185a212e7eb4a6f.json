{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport AnimatedNode from \"./AnimatedNode\";\nimport invariant from 'fbjs/lib/invariant';\nimport { val } from \"../val\";\nimport { adapt } from \"../core/AnimatedBlock\";\n\nclass AnimatedSet extends AnimatedNode {\n  constructor(what, value) {\n    invariant(what instanceof AnimatedNode, \"Reanimated: Animated.set first argument should be of type AnimatedNode but got \".concat(what));\n    invariant(value instanceof AnimatedNode, \"Reanimated: Animated.set second argument should be of type AnimatedNode, String or Number but got \".concat(value));\n    super({\n      type: 'set',\n      what,\n      value\n    }, [value]);\n\n    _defineProperty(this, \"_what\", void 0);\n\n    _defineProperty(this, \"_value\", void 0);\n\n    invariant(!what._constant, 'Value to be set cannot be constant');\n    this._what = what;\n    this._value = value;\n  }\n\n  toString() {\n    return \"AnimatedSet, id: \".concat(this.__nodeID);\n  }\n\n  __onEvaluate() {\n    var newValue = val(this._value);\n\n    this._what.setValue(newValue);\n\n    return newValue;\n  }\n\n}\n\nexport function createAnimatedSet(what, value) {\n  return new AnimatedSet(what, adapt(value));\n}","map":{"version":3,"sources":["AnimatedSet.js"],"names":["constructor","invariant","what","value","type","toString","__onEvaluate","newValue","val","adapt"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAA,YAAA;AACA,OAAA,SAAA,MAAA,oBAAA;AACA,SAAA,GAAA;AACA,SAAA,KAAA;;AAEA,MAAA,WAAA,SAAA,YAAA,CAAuC;AAIrCA,EAAAA,WAAW,CAAA,IAAA,EAAA,KAAA,EAAc;AACvBC,IAAAA,SAAS,CACPC,IAAI,YADG,YAAA,EAAA,kFAAA,MAAA,CAATD,IAAS,CAAA,CAATA;AAIAA,IAAAA,SAAS,CACPE,KAAK,YADE,YAAA,EAAA,qGAAA,MAAA,CAATF,KAAS,CAAA,CAATA;AAIA,UAAM;AAAEG,MAAAA,IAAI,EAAN,KAAA;AAAA,MAAA,IAAA;AAAqBD,MAAAA;AAArB,KAAN,EAAoC,CAApC,KAAoC,CAApC;;AATuB,IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EAAA,KAAA,CAAA,CAAA;;AAUvBF,IAAAA,SAAS,CAAC,CAACC,IAAI,CAAN,SAAA,EAATD,oCAAS,CAATA;AACA,SAAA,KAAA,GAAA,IAAA;AACA,SAAA,MAAA,GAAA,KAAA;AACD;;AAEDI,EAAAA,QAAQ,GAAG;AACT,WAAA,oBAAA,MAAA,CAA2B,KAA3B,QAAA,CAAA;AACD;;AAEDC,EAAAA,YAAY,GAAG;AACb,QAAMC,QAAQ,GAAGC,GAAG,CAAC,KAArB,MAAoB,CAApB;;AACA,SAAA,KAAA,CAAA,QAAA,CAAA,QAAA;;AACA,WAAA,QAAA;AACD;;AA3BoC;;AA8BvC,OAAO,SAAA,iBAAA,CAAA,IAAA,EAAA,KAAA,EAAwC;AAC7C,SAAO,IAAA,WAAA,CAAA,IAAA,EAAsBC,KAAK,CAAlC,KAAkC,CAA3B,CAAP;AACD","sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport invariant from 'fbjs/lib/invariant';\nimport { val } from '../val';\nimport { adapt } from '../core/AnimatedBlock';\n\nclass AnimatedSet extends AnimatedNode {\n  _what;\n  _value;\n\n  constructor(what, value) {\n    invariant(\n      what instanceof AnimatedNode,\n      `Reanimated: Animated.set first argument should be of type AnimatedNode but got ${what}`\n    );\n    invariant(\n      value instanceof AnimatedNode,\n      `Reanimated: Animated.set second argument should be of type AnimatedNode, String or Number but got ${value}`\n    );\n    super({ type: 'set', what, value }, [value]);\n    invariant(!what._constant, 'Value to be set cannot be constant');\n    this._what = what;\n    this._value = value;\n  }\n\n  toString() {\n    return `AnimatedSet, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    const newValue = val(this._value);\n    this._what.setValue(newValue);\n    return newValue;\n  }\n}\n\nexport function createAnimatedSet(what, value) {\n  return new AnimatedSet(what, adapt(value));\n}\n"]},"metadata":{},"sourceType":"module"}