{"ast":null,"code":"function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport ReanimatedModule from \"./ReanimatedModule\";\nvar TransitioningContext = React.createContext();\n\nfunction configFromProps(type, props) {\n  var config = {\n    type\n  };\n\n  if ('durationMs' in props) {\n    config.durationMs = props.durationMs;\n  }\n\n  if ('interpolation' in props) {\n    config.interpolation = props.interpolation;\n  }\n\n  if ('type' in props) {\n    config.animation = props.type;\n  }\n\n  if ('delayMs' in props) {\n    config.delayMs = props.delayMs;\n  }\n\n  if ('propagation' in props) {\n    config.propagation = props.propagation;\n  }\n\n  return config;\n}\n\nfunction wrapTransitioningContext(Comp) {\n  return props => {\n    return React.createElement(TransitioningContext.Consumer, null, context => React.createElement(Comp, _extends({\n      context: context\n    }, props)));\n  };\n}\n\nclass In extends React.Component {\n  componentDidMount() {\n    this.props.context.push(configFromProps('in', this.props));\n  }\n\n  render() {\n    return this.props.children || null;\n  }\n\n}\n\nclass Change extends React.Component {\n  componentDidMount() {\n    this.props.context.push(configFromProps('change', this.props));\n  }\n\n  render() {\n    return this.props.children || null;\n  }\n\n}\n\nclass Out extends React.Component {\n  componentDidMount() {\n    this.props.context.push(configFromProps('out', this.props));\n  }\n\n  render() {\n    return this.props.children || null;\n  }\n\n}\n\nclass Together extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"transitions\", []);\n  }\n\n  componentDidMount() {\n    var config = configFromProps('group', this.props);\n    config.transitions = this.transitions;\n    this.props.context.push(config);\n  }\n\n  render() {\n    return React.createElement(TransitioningContext.Provider, {\n      value: this.transitions\n    }, this.props.children);\n  }\n\n}\n\nclass Sequence extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"transitions\", []);\n  }\n\n  componentDidMount() {\n    var config = configFromProps('group', this.props);\n    config.sequence = true;\n    config.transitions = this.transitions;\n    this.props.context.push(config);\n  }\n\n  render() {\n    return React.createElement(TransitioningContext.Provider, {\n      value: this.transitions\n    }, this.props.children);\n  }\n\n}\n\nfunction createTransitioningComponent(Component) {\n  class Wrapped extends React.Component {\n    constructor() {\n      super(...arguments);\n\n      _defineProperty(this, \"propTypes\", Component.propTypes);\n\n      _defineProperty(this, \"transitions\", []);\n\n      _defineProperty(this, \"viewRef\", React.createRef());\n    }\n\n    componentDidMount() {\n      if (this.props.animateMount) {\n        this.animateNextTransition();\n      }\n    }\n\n    setNativeProps(props) {\n      this.viewRef.current.setNativeProps(props);\n    }\n\n    animateNextTransition() {\n      var viewTag = findNodeHandle(this.viewRef.current);\n      ReanimatedModule.animateNextTransition(viewTag, {\n        transitions: this.transitions\n      });\n    }\n\n    render() {\n      var _this$props = this.props,\n          {\n        transition\n      } = _this$props,\n          rest = _objectWithoutProperties(_this$props, [\"transition\"]);\n\n      return React.createElement(React.Fragment, null, React.createElement(TransitioningContext.Provider, {\n        value: this.transitions\n      }, transition), React.createElement(Component, _extends({}, rest, {\n        ref: this.viewRef,\n        collapsable: false\n      })));\n    }\n\n  }\n\n  return Wrapped;\n}\n\nvar Transitioning = {\n  View: createTransitioningComponent(View)\n};\nvar Transition = {\n  Sequence: wrapTransitioningContext(Sequence),\n  Together: wrapTransitioningContext(Together),\n  In: wrapTransitioningContext(In),\n  Out: wrapTransitioningContext(Out),\n  Change: wrapTransitioningContext(Change)\n};\nexport { Transitioning, Transition, createTransitioningComponent };","map":{"version":3,"sources":["Transitioning.js"],"names":["TransitioningContext","React","config","type","props","context","componentDidMount","configFromProps","render","transitions","Component","setNativeProps","animateNextTransition","viewTag","findNodeHandle","ReanimatedModule","transition","rest","Transitioning","View","createTransitioningComponent","Transition","Sequence","wrapTransitioningContext","Together","In","Out","Change"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View, findNodeHandle } from 'react-native';\nimport ReanimatedModule from './ReanimatedModule';\n\nconst TransitioningContext = React.createContext();\n\nfunction configFromProps(type, props) {\n  const config = { type };\n  if ('durationMs' in props) {\n    config.durationMs = props.durationMs;\n  }\n  if ('interpolation' in props) {\n    config.interpolation = props.interpolation;\n  }\n  if ('type' in props) {\n    config.animation = props.type;\n  }\n  if ('delayMs' in props) {\n    config.delayMs = props.delayMs;\n  }\n  if ('propagation' in props) {\n    config.propagation = props.propagation;\n  }\n  return config;\n}\n\n/**\n * The below wrapper is used to support legacy context API with Context.Consumer\n * render prop. We need it as we want to access `context` from within\n * `componentDidMount` callback. If we decided to drop support for older\n * react native we could rewrite it using hooks or `static contextType` API.\n */\nfunction wrapTransitioningContext(Comp) {\n  return props => {\n    return (\n      <TransitioningContext.Consumer>\n        {context => <Comp context={context} {...props} />}\n      </TransitioningContext.Consumer>\n    );\n  };\n}\n\nclass In extends React.Component {\n  componentDidMount() {\n    this.props.context.push(configFromProps('in', this.props));\n  }\n\n  render() {\n    return this.props.children || null;\n  }\n}\n\nclass Change extends React.Component {\n  componentDidMount() {\n    this.props.context.push(configFromProps('change', this.props));\n  }\n\n  render() {\n    return this.props.children || null;\n  }\n}\n\nclass Out extends React.Component {\n  componentDidMount() {\n    this.props.context.push(configFromProps('out', this.props));\n  }\n\n  render() {\n    return this.props.children || null;\n  }\n}\n\nclass Together extends React.Component {\n  transitions = [];\n  componentDidMount() {\n    const config = configFromProps('group', this.props);\n    config.transitions = this.transitions;\n    this.props.context.push(config);\n  }\n\n  render() {\n    return (\n      <TransitioningContext.Provider value={this.transitions}>\n        {this.props.children}\n      </TransitioningContext.Provider>\n    );\n  }\n}\n\nclass Sequence extends React.Component {\n  transitions = [];\n  componentDidMount() {\n    const config = configFromProps('group', this.props);\n    config.sequence = true;\n    config.transitions = this.transitions;\n    this.props.context.push(config);\n  }\n\n  render() {\n    return (\n      <TransitioningContext.Provider value={this.transitions}>\n        {this.props.children}\n      </TransitioningContext.Provider>\n    );\n  }\n}\n\nfunction createTransitioningComponent(Component) {\n  class Wrapped extends React.Component {\n    propTypes = Component.propTypes;\n    transitions = [];\n    viewRef = React.createRef();\n\n    componentDidMount() {\n      if (this.props.animateMount) {\n        this.animateNextTransition();\n      }\n    }\n\n    setNativeProps(props) {\n      this.viewRef.current.setNativeProps(props);\n    }\n\n    animateNextTransition() {\n      const viewTag = findNodeHandle(this.viewRef.current);\n      ReanimatedModule.animateNextTransition(viewTag, {\n        transitions: this.transitions,\n      });\n    }\n\n    render() {\n      const { transition, ...rest } = this.props;\n      return (\n        <React.Fragment>\n          <TransitioningContext.Provider value={this.transitions}>\n            {transition}\n          </TransitioningContext.Provider>\n          <Component {...rest} ref={this.viewRef} collapsable={false} />\n        </React.Fragment>\n      );\n    }\n  }\n  return Wrapped;\n}\n\nconst Transitioning = {\n  View: createTransitioningComponent(View),\n};\n\nconst Transition = {\n  Sequence: wrapTransitioningContext(Sequence),\n  Together: wrapTransitioningContext(Together),\n  In: wrapTransitioningContext(In),\n  Out: wrapTransitioningContext(Out),\n  Change: wrapTransitioningContext(Change),\n};\n\nexport { Transitioning, Transition, createTransitioningComponent };\n"]},"metadata":{},"sourceType":"module"}