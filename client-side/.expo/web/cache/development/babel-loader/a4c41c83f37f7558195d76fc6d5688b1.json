{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport AnimatedNode from \"./AnimatedNode\";\nimport invariant from 'fbjs/lib/invariant';\nimport { val } from \"../val\";\n\nclass AnimatedAlways extends AnimatedNode {\n  constructor(what) {\n    invariant(what instanceof AnimatedNode, \"Reanimated: Animated.always node argument should be of type AnimatedNode but got \".concat(what));\n    super({\n      type: 'always',\n      what\n    }, [what]);\n\n    _defineProperty(this, \"_what\", void 0);\n\n    this._what = what;\n  }\n\n  toString() {\n    return \"AnimatedAlways, id: \".concat(this.__nodeID);\n  }\n\n  update() {\n    this.__getValue();\n  }\n\n  __onEvaluate() {\n    val(this._what);\n    return 0;\n  }\n\n}\n\nexport function createAnimatedAlways(item) {\n  return new AnimatedAlways(item);\n}","map":{"version":3,"sources":["AnimatedAlways.js"],"names":["constructor","invariant","what","type","toString","update","__onEvaluate","val"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAA,YAAA;AACA,OAAA,SAAA,MAAA,oBAAA;AACA,SAAA,GAAA;;AAEA,MAAA,cAAA,SAAA,YAAA,CAA0C;AAGxCA,EAAAA,WAAW,CAAA,IAAA,EAAO;AAChBC,IAAAA,SAAS,CACPC,IAAI,YADG,YAAA,EAAA,oFAAA,MAAA,CAATD,IAAS,CAAA,CAATA;AAIA,UAAM;AAAEE,MAAAA,IAAI,EAAN,QAAA;AAAkBD,MAAAA;AAAlB,KAAN,EAAgC,CAAhC,IAAgC,CAAhC;;AALgB,IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EAAA,KAAA,CAAA,CAAA;;AAMhB,SAAA,KAAA,GAAA,IAAA;AACD;;AAEDE,EAAAA,QAAQ,GAAG;AACT,WAAA,uBAAA,MAAA,CAA8B,KAA9B,QAAA,CAAA;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,SAAA,UAAA;AACD;;AAEDC,EAAAA,YAAY,GAAG;AACbC,IAAAA,GAAG,CAAC,KAAJA,KAAG,CAAHA;AACA,WAAA,CAAA;AACD;;AAvBuC;;AA0B1C,OAAO,SAAA,oBAAA,CAAA,IAAA,EAAoC;AACzC,SAAO,IAAA,cAAA,CAAP,IAAO,CAAP;AACD","sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport invariant from 'fbjs/lib/invariant';\nimport { val } from '../val';\n\nclass AnimatedAlways extends AnimatedNode {\n  _what;\n\n  constructor(what) {\n    invariant(\n      what instanceof AnimatedNode,\n      `Reanimated: Animated.always node argument should be of type AnimatedNode but got ${what}`\n    );\n    super({ type: 'always', what }, [what]);\n    this._what = what;\n  }\n\n  toString() {\n    return `AnimatedAlways, id: ${this.__nodeID}`;\n  }\n\n  update() {\n    this.__getValue();\n  }\n\n  __onEvaluate() {\n    val(this._what);\n    return 0;\n  }\n}\n\nexport function createAnimatedAlways(item) {\n  return new AnimatedAlways(item);\n}\n"]},"metadata":{},"sourceType":"module"}