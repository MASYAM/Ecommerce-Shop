{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport AnimatedNode from \"./AnimatedNode\";\nimport { createAnimatedCallFunc } from \"./AnimatedCallFunc\";\nimport { createAnimatedParam } from \"./AnimatedParam\";\nimport { val } from \"../val\";\nimport invariant from 'fbjs/lib/invariant';\n\nclass AnimatedFunction extends AnimatedNode {\n  constructor(what) {\n    invariant(what instanceof AnimatedNode, \"Reanimated: AnimatedCallFunc 'what' argument should be of type AnimatedNode but got \".concat(what));\n\n    for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      params[_key - 1] = arguments[_key];\n    }\n\n    super({\n      type: 'func',\n      what\n    }, [what, ...params]);\n\n    _defineProperty(this, \"_what\", void 0);\n\n    this._what = what;\n\n    this.__attach();\n  }\n\n  __onEvaluate() {\n    return val(this._what);\n  }\n\n  toString() {\n    return \"AnimatedFunction, id: \".concat(this.__nodeID);\n  }\n\n}\n\nexport function createAnimatedFunction(cb) {\n  var params = new Array(cb.length);\n\n  for (var i = 0; i < params.length; i++) {\n    params[i] = createAnimatedParam();\n  }\n\n  var what = cb(...params);\n  var func = new AnimatedFunction(what, ...params);\n  return function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    if (args.length !== params.length) {\n      throw new Error('Parameter mismatch when calling reanimated function. Expected ' + params.length + ' parameters, got ' + args.length + '.');\n    }\n\n    return createAnimatedCallFunc(func, args, params);\n  };\n}","map":{"version":3,"sources":["AnimatedFunction.js"],"names":["constructor","invariant","what","type","__onEvaluate","val","toString","params","cb","i","createAnimatedParam","func","args","createAnimatedCallFunc"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAA,YAAA;AACA,SAAA,sBAAA;AACA,SAAA,mBAAA;AACA,SAAA,GAAA;AACA,OAAA,SAAA,MAAA,oBAAA;;AAEA,MAAA,gBAAA,SAAA,YAAA,CAA4C;AAG1CA,EAAAA,WAAW,CAAA,IAAA,EAAkB;AAC3BC,IAAAA,SAAS,CACPC,IAAI,YADG,YAAA,EAAA,uFAAA,MAAA,CAATD,IAAS,CAAA,CAATA;;AAD2B,sCAAlB,MAAkB;AAAlB,MAAA,MAAkB;AAAA;;AAK3B,UACE;AACEE,MAAAA,IAAI,EADN,MAAA;AAEED,MAAAA;AAFF,KADF,EAKE,CAAA,IAAA,EAAO,GALT,MAKE,CALF;;AAL2B,IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EAAA,KAAA,CAAA,CAAA;;AAY3B,SAAA,KAAA,GAAA,IAAA;;AACA,SAAA,QAAA;AACD;;AAEDE,EAAAA,YAAY,GAAG;AACb,WAAOC,GAAG,CAAC,KAAX,KAAU,CAAV;AACD;;AAEDC,EAAAA,QAAQ,GAAG;AACT,WAAA,yBAAA,MAAA,CAAgC,KAAhC,QAAA,CAAA;AACD;;AAzByC;;AA4B5C,OAAO,SAAA,sBAAA,CAAA,EAAA,EAAoC;AACzC,MAAMC,MAAM,GAAG,IAAA,KAAA,CAAUC,EAAE,CAA3B,MAAe,CAAf;;AACA,OAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGF,MAAM,CAA1B,MAAA,EAAmCE,CAAnC,EAAA,EAAwC;AACtCF,IAAAA,MAAM,CAANA,CAAM,CAANA,GAAYG,mBAAZH,EAAAA;AAHuC;;AAMzC,MAAML,IAAI,GAAGM,EAAE,CAAC,GAAhB,MAAe,CAAf;AACA,MAAMG,IAAI,GAAG,IAAA,gBAAA,CAAA,IAAA,EAA2B,GAAxC,MAAa,CAAb;AACA,SAAO,YAAa;AAAA,uCAAb,IAAa;AAAb,MAAA,IAAa;AAAA;;AAClB,QAAIC,IAAI,CAAJA,MAAAA,KAAgBL,MAAM,CAA1B,MAAA,EAAmC;AACjC,YAAM,IAAA,KAAA,CACJ,mEACEA,MAAM,CADR,MAAA,GAAA,mBAAA,GAGEK,IAAI,CAHN,MAAA,GADF,GAAM,CAAN;AAOD;;AACD,WAAOC,sBAAsB,CAAA,IAAA,EAAA,IAAA,EAA7B,MAA6B,CAA7B;AAVF,GAAA;AAYD","sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport { createAnimatedCallFunc } from './AnimatedCallFunc';\nimport { createAnimatedParam } from './AnimatedParam';\nimport { val } from '../val';\nimport invariant from 'fbjs/lib/invariant';\n\nclass AnimatedFunction extends AnimatedNode {\n  _what;\n\n  constructor(what, ...params) {\n    invariant(\n      what instanceof AnimatedNode,\n      `Reanimated: AnimatedCallFunc 'what' argument should be of type AnimatedNode but got ${what}`\n    );\n    super(\n      {\n        type: 'func',\n        what,\n      },\n      [what, ...params]\n    );\n    this._what = what;\n    this.__attach();\n  }\n\n  __onEvaluate() {\n    return val(this._what);\n  }\n\n  toString() {\n    return `AnimatedFunction, id: ${this.__nodeID}`;\n  }\n}\n\nexport function createAnimatedFunction(cb) {\n  const params = new Array(cb.length);\n  for (let i = 0; i < params.length; i++) {\n    params[i] = createAnimatedParam();\n  }\n  // eslint-disable-next-line standard/no-callback-literal\n  const what = cb(...params);\n  const func = new AnimatedFunction(what, ...params);\n  return (...args) => {\n    if (args.length !== params.length) {\n      throw new Error(\n        'Parameter mismatch when calling reanimated function. Expected ' +\n          params.length +\n          ' parameters, got ' +\n          args.length +\n          '.'\n      );\n    }\n    return createAnimatedCallFunc(func, args, params);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}