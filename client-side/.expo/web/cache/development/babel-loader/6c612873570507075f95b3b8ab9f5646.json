{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { TabRouter, StackActions, SceneView, createNavigator, SwitchActions } from 'react-navigation';\nexport default function createTabNavigator(TabView) {\n  class NavigationView extends React.Component {\n    constructor() {\n      super(...arguments);\n\n      _defineProperty(this, \"_renderScene\", (_ref) => {\n        var {\n          route\n        } = _ref;\n        var {\n          screenProps,\n          descriptors\n        } = this.props;\n        var descriptor = descriptors[route.key];\n        var TabComponent = descriptor.getComponent();\n        return React.createElement(SceneView, {\n          screenProps: screenProps,\n          navigation: descriptor.navigation,\n          component: TabComponent\n        });\n      });\n\n      _defineProperty(this, \"_renderIcon\", (_ref2) => {\n        var {\n          route,\n          focused,\n          tintColor,\n          horizontal = false\n        } = _ref2;\n        var {\n          descriptors\n        } = this.props;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n\n        if (options.tabBarIcon) {\n          return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({\n            focused,\n            tintColor,\n            horizontal\n          }) : options.tabBarIcon;\n        }\n\n        return null;\n      });\n\n      _defineProperty(this, \"_getLabelText\", (_ref3) => {\n        var {\n          route\n        } = _ref3;\n        var {\n          descriptors\n        } = this.props;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n\n        if (options.tabBarLabel) {\n          return options.tabBarLabel;\n        }\n\n        if (typeof options.title === 'string') {\n          return options.title;\n        }\n\n        return route.routeName;\n      });\n\n      _defineProperty(this, \"_getAccessibilityLabel\", (_ref4) => {\n        var {\n          route\n        } = _ref4;\n        var {\n          descriptors\n        } = this.props;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n\n        if (typeof options.tabBarAccessibilityLabel !== 'undefined') {\n          return options.tabBarAccessibilityLabel;\n        }\n\n        var label = this._getLabelText({\n          route\n        });\n\n        if (typeof label === 'string') {\n          var {\n            routes\n          } = this.props.navigation.state;\n          return \"\".concat(label, \", tab, \").concat(routes.indexOf(route) + 1, \" of \").concat(routes.length);\n        }\n\n        return undefined;\n      });\n\n      _defineProperty(this, \"_getTestID\", (_ref5) => {\n        var {\n          route\n        } = _ref5;\n        var {\n          descriptors\n        } = this.props;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n        return options.tabBarTestID;\n      });\n\n      _defineProperty(this, \"_makeDefaultHandler\", (_ref6) => {\n        var {\n          route,\n          navigation\n        } = _ref6;\n        return () => {\n          if (navigation.isFocused()) {\n            if (route.hasOwnProperty('index') && route.index > 0) {\n              navigation.dispatch(StackActions.popToTop({\n                key: route.key\n              }));\n            } else {\n              navigation.emit('refocus');\n            }\n          } else {\n            this._jumpTo(route.routeName);\n          }\n        };\n      });\n\n      _defineProperty(this, \"_handleTabPress\", (_ref7) => {\n        var {\n          route\n        } = _ref7;\n        this._isTabPress = true;\n        Promise.resolve().then(() => this._isTabPress = false);\n        var {\n          descriptors\n        } = this.props;\n        var descriptor = descriptors[route.key];\n        var {\n          navigation,\n          options\n        } = descriptor;\n\n        var defaultHandler = this._makeDefaultHandler({\n          route,\n          navigation\n        });\n\n        if (options.tabBarOnPress) {\n          options.tabBarOnPress({\n            navigation,\n            defaultHandler\n          });\n        } else {\n          defaultHandler();\n        }\n      });\n\n      _defineProperty(this, \"_handleTabLongPress\", (_ref8) => {\n        var {\n          route\n        } = _ref8;\n        var {\n          descriptors\n        } = this.props;\n        var descriptor = descriptors[route.key];\n        var {\n          navigation,\n          options\n        } = descriptor;\n\n        var defaultHandler = this._makeDefaultHandler({\n          route,\n          navigation\n        });\n\n        if (options.tabBarOnLongPress) {\n          options.tabBarOnLongPress({\n            navigation,\n            defaultHandler\n          });\n        } else {\n          defaultHandler();\n        }\n      });\n\n      _defineProperty(this, \"_handleIndexChange\", index => {\n        if (this._isTabPress) {\n          this._isTabPress = false;\n          return;\n        }\n\n        this._jumpTo(this.props.navigation.state.routes[index].routeName);\n      });\n\n      _defineProperty(this, \"_jumpTo\", routeName => {\n        var {\n          navigation\n        } = this.props;\n        navigation.dispatch(SwitchActions.jumpTo({\n          routeName,\n          key: navigation.state.key\n        }));\n      });\n\n      _defineProperty(this, \"_isTabPress\", false);\n    }\n\n    render() {\n      var {\n        descriptors,\n        navigation,\n        screenProps,\n        navigationConfig\n      } = this.props;\n      var {\n        state\n      } = navigation;\n      var route = state.routes[state.index];\n      var descriptor = descriptors[route.key];\n      return React.createElement(TabView, _extends({}, navigationConfig, descriptor.options, {\n        getLabelText: this._getLabelText,\n        getAccessibilityLabel: this._getAccessibilityLabel,\n        getTestID: this._getTestID,\n        renderIcon: this._renderIcon,\n        renderScene: this._renderScene,\n        onIndexChange: this._handleIndexChange,\n        onTabPress: this._handleTabPress,\n        onTabLongPress: this._handleTabLongPress,\n        navigation: navigation,\n        descriptors: descriptors,\n        screenProps: screenProps\n      }));\n    }\n\n  }\n\n  return function (routes) {\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var router = TabRouter(routes, config);\n    return createNavigator(NavigationView, router, config);\n  };\n}","map":{"version":3,"sources":["createTabNavigator.tsx"],"names":["React","route","descriptors","descriptor","TabComponent","horizontal","options","label","routes","navigation","key","Promise","defaultHandler","index","routeName","render","navigationConfig","state","screenProps","config","router","TabRouter","createNavigator"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  TabRouter,\n  StackActions,\n  SceneView,\n  createNavigator,\n  SwitchActions,\n  NavigationRoute,\n  NavigationRouteConfigMap,\n  CreateNavigatorConfig,\n  NavigationTabRouterConfig,\n} from 'react-navigation';\nimport {\n  NavigationTabProp,\n  NavigationCommonTabOptions,\n  SceneDescriptorMap,\n} from '../types';\n\ntype RouteConfig<Options> = NavigationRouteConfigMap<\n  Options,\n  NavigationTabProp<NavigationRoute, any>\n>;\n\ntype CommonProps = {\n  navigation: NavigationTabProp;\n  descriptors: SceneDescriptorMap;\n  screenProps?: unknown;\n};\n\ntype ExtraProps<Config extends {}> = {\n  navigationConfig: Config;\n};\n\nexport type RenderIconProps = {\n  route: NavigationRoute;\n  focused: boolean;\n  tintColor?: string;\n  horizontal?: boolean;\n};\n\nexport type NavigationViewProps = {\n  getLabelText: (props: { route: NavigationRoute }) => string | undefined;\n  getAccessibilityLabel: (props: {\n    route: NavigationRoute;\n  }) => string | undefined;\n  getTestID: (props: { route: NavigationRoute }) => string | undefined;\n  renderIcon: (props: RenderIconProps) => React.ReactNode;\n  renderScene: (props: { route: NavigationRoute }) => React.ReactNode;\n  onIndexChange: (index: number) => void;\n  onTabPress: (props: { route: NavigationRoute }) => void;\n  onTabLongPress: (props: { route: NavigationRoute }) => void;\n};\n\nexport default function createTabNavigator<\n  Config extends {},\n  Options extends NavigationCommonTabOptions,\n  Props extends NavigationViewProps & CommonProps\n>(TabView: React.ComponentType<Props & Config & Options>) {\n  class NavigationView extends React.Component<\n    Exclude<Props, NavigationViewProps> & ExtraProps<Config>\n  > {\n    _renderScene = ({ route }: { route: { key: string } }) => {\n      const { screenProps, descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const TabComponent = descriptor.getComponent();\n      return (\n        <SceneView\n          screenProps={screenProps}\n          navigation={descriptor.navigation}\n          component={TabComponent}\n        />\n      );\n    };\n\n    _renderIcon = ({\n      route,\n      focused,\n      tintColor,\n      horizontal = false,\n    }: RenderIconProps) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (options.tabBarIcon) {\n        return typeof options.tabBarIcon === 'function'\n          ? options.tabBarIcon({ focused, tintColor, horizontal })\n          : options.tabBarIcon;\n      }\n\n      return null;\n    };\n\n    _getLabelText = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (options.tabBarLabel) {\n        return options.tabBarLabel;\n      }\n\n      if (typeof options.title === 'string') {\n        return options.title;\n      }\n\n      return route.routeName;\n    };\n\n    _getAccessibilityLabel = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (typeof options.tabBarAccessibilityLabel !== 'undefined') {\n        return options.tabBarAccessibilityLabel;\n      }\n\n      const label = this._getLabelText({ route });\n\n      if (typeof label === 'string') {\n        const { routes } = this.props.navigation.state;\n        return `${label}, tab, ${routes.indexOf(route) + 1} of ${\n          routes.length\n        }`;\n      }\n\n      return undefined;\n    };\n\n    _getTestID = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      return options.tabBarTestID;\n    };\n\n    _makeDefaultHandler = ({\n      route,\n      navigation,\n    }: {\n      route: NavigationRoute;\n      navigation: NavigationTabProp;\n    }) => () => {\n      if (navigation.isFocused()) {\n        if (route.hasOwnProperty('index') && route.index > 0) {\n          // If current tab has a nested navigator, pop to top\n          navigation.dispatch(StackActions.popToTop({ key: route.key }));\n        } else {\n          navigation.emit('refocus');\n        }\n      } else {\n        this._jumpTo(route.routeName);\n      }\n    };\n\n    _handleTabPress = ({ route }: { route: NavigationRoute }) => {\n      this._isTabPress = true;\n\n      // After tab press, handleIndexChange will be called synchronously\n      // So we reset it in promise callback\n      Promise.resolve().then(() => (this._isTabPress = false));\n\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const { navigation, options } = descriptor;\n\n      const defaultHandler = this._makeDefaultHandler({ route, navigation });\n\n      if (options.tabBarOnPress) {\n        options.tabBarOnPress({ navigation, defaultHandler });\n      } else {\n        defaultHandler();\n      }\n    };\n\n    _handleTabLongPress = ({ route }: { route: NavigationRoute }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const { navigation, options } = descriptor;\n\n      const defaultHandler = this._makeDefaultHandler({ route, navigation });\n\n      if (options.tabBarOnLongPress) {\n        options.tabBarOnLongPress({ navigation, defaultHandler });\n      } else {\n        defaultHandler();\n      }\n    };\n\n    _handleIndexChange = (index: number) => {\n      if (this._isTabPress) {\n        this._isTabPress = false;\n        return;\n      }\n\n      this._jumpTo(this.props.navigation.state.routes[index].routeName);\n    };\n\n    _jumpTo = (routeName: string) => {\n      const { navigation } = this.props;\n\n      navigation.dispatch(\n        SwitchActions.jumpTo({\n          routeName,\n          key: navigation.state.key,\n        })\n      );\n    };\n\n    _isTabPress: boolean = false;\n\n    render() {\n      const {\n        descriptors,\n        navigation,\n        screenProps,\n        navigationConfig,\n      } = this.props;\n      const { state } = navigation;\n      const route = state.routes[state.index];\n      const descriptor = descriptors[route.key];\n\n      return (\n        // TODO: don't have time to fix it right now\n        // @ts-ignore\n        <TabView\n          {...navigationConfig}\n          {...descriptor.options}\n          getLabelText={this._getLabelText}\n          getAccessibilityLabel={this._getAccessibilityLabel}\n          getTestID={this._getTestID}\n          renderIcon={this._renderIcon}\n          renderScene={this._renderScene}\n          onIndexChange={this._handleIndexChange}\n          onTabPress={this._handleTabPress}\n          onTabLongPress={this._handleTabLongPress}\n          navigation={navigation}\n          descriptors={descriptors}\n          screenProps={screenProps}\n        />\n      );\n    }\n  }\n\n  return (\n    routes: RouteConfig<Options>,\n    config: CreateNavigatorConfig<\n      Partial<Config>,\n      NavigationTabRouterConfig,\n      Partial<Options>,\n      NavigationTabProp<NavigationRoute, any>\n    > = {}\n  ) => {\n    const router = TabRouter(routes, config as any);\n\n    return createNavigator(NavigationView as any, router, config as any);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}