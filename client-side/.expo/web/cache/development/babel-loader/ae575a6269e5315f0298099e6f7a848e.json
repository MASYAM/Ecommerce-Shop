{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { AppReducerStates } from \"../reducers/app\";\nimport { ViewActionStateInfo } from \"../../models/common/ViewActionStateInfo\";\nimport { ActionStatusTypeValues } from \"../../constants/actionStatusTypes\";\nexport var selectDatastore = (_ref) => {\n  var {\n    app\n  } = _ref;\n  return app;\n};\nexport var selectViewActionStatus = function selectViewActionStatus(state, viewId) {\n  var actionId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'default';\n  var map = selectViewActionMap(state, viewId);\n\n  if (map && map[actionId]) {\n    return map[actionId];\n  }\n\n  return {\n    viewId,\n    actionId,\n    lastRequest: 0,\n    status: ActionStatusTypeValues.UNKNOWN\n  };\n};\nexport var selectViewActionMap = (state, viewId) => {\n  var datastore = selectDatastore(state);\n\n  if (!viewId || !datastore || !datastore.viewBasedRequests) {\n    return {};\n  }\n\n  if (!datastore.viewBasedRequests || !datastore.viewBasedRequests[viewId]) {\n    return {};\n  }\n\n  return _objectSpread({}, datastore.viewBasedRequests[viewId]);\n};\nexport var getViewId = (_ref2) => {\n  var {\n    navigation\n  } = _ref2;\n  return navigation && navigation.state ? navigation.state.key : '';\n};","map":{"version":3,"sources":["/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/src/store/selectors/app.js"],"names":["AppReducerStates","ViewActionStateInfo","ActionStatusTypeValues","selectDatastore","app","selectViewActionStatus","state","viewId","actionId","map","selectViewActionMap","lastRequest","status","UNKNOWN","datastore","viewBasedRequests","getViewId","navigation","key"],"mappings":";;;;;;AAEA,SAASA,gBAAT;AACA,SAASC,mBAAT;AACA,SAASC,sBAAT;AAEA,OAAO,IAAMC,eAAe,GAAG;AAAA,MAAC;AAAEC,IAAAA;AAAF,GAAD;AAAA,SAA+BA,GAA/B;AAAA,CAAxB;AAEP,OAAO,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAClCC,KADkC,EAElCC,MAFkC,EAIZ;AAAA,MADtBC,QACsB,uEADH,SACG;AACtB,MAAMC,GAAG,GAAGC,mBAAmB,CAACJ,KAAD,EAAQC,MAAR,CAA/B;;AAEA,MAAIE,GAAG,IAAIA,GAAG,CAACD,QAAD,CAAd,EAA0B;AACtB,WAAOC,GAAG,CAACD,QAAD,CAAV;AACH;;AACD,SAAO;AACHD,IAAAA,MADG;AAEHC,IAAAA,QAFG;AAGHG,IAAAA,WAAW,EAAE,CAHV;AAIHC,IAAAA,MAAM,EAAEV,sBAAsB,CAACW;AAJ5B,GAAP;AAMH,CAhBM;AAkBP,OAAO,IAAMH,mBAAmB,GAAG,CAACJ,KAAD,EAAQC,MAAR,KAAgC;AAC/D,MAAMO,SAAS,GAAGX,eAAe,CAACG,KAAD,CAAjC;;AACA,MAAI,CAACC,MAAD,IAAW,CAACO,SAAZ,IAAyB,CAACA,SAAS,CAACC,iBAAxC,EAA2D;AACvD,WAAO,EAAP;AACH;;AAED,MAAI,CAACD,SAAS,CAACC,iBAAX,IAAgC,CAACD,SAAS,CAACC,iBAAV,CAA4BR,MAA5B,CAArC,EAA0E;AACtE,WAAO,EAAP;AACH;;AAED,2BAAYO,SAAS,CAACC,iBAAV,CAA4BR,MAA5B,CAAZ;AACH,CAXM;AAaP,OAAO,IAAMS,SAAS,GAAG,WAA4B;AAAA,MAA3B;AAAEC,IAAAA;AAAF,GAA2B;AACjD,SAAOA,UAAU,IAAIA,UAAU,CAACX,KAAzB,GAAiCW,UAAU,CAACX,KAAX,CAAiBY,GAAlD,GAAwD,EAA/D;AACH,CAFM","sourcesContent":["// @flow\n\nimport { AppReducerStates } from '../reducers/app';\nimport { ViewActionStateInfo } from '../../models/common/ViewActionStateInfo';\nimport { ActionStatusTypeValues } from '../../constants/actionStatusTypes';\n\nexport const selectDatastore = ({ app }): AppReducerStates => app;\n\nexport const selectViewActionStatus = (\n    state,\n    viewId: string,\n    actionId: string = 'default',\n): ViewActionStateInfo => {\n    const map = selectViewActionMap(state, viewId);\n\n    if (map && map[actionId]) {\n        return map[actionId];\n    }\n    return {\n        viewId,\n        actionId,\n        lastRequest: 0,\n        status: ActionStatusTypeValues.UNKNOWN,\n    };\n};\n\nexport const selectViewActionMap = (state, viewId: string): any => {\n    const datastore = selectDatastore(state);\n    if (!viewId || !datastore || !datastore.viewBasedRequests) {\n        return {};\n    }\n\n    if (!datastore.viewBasedRequests || !datastore.viewBasedRequests[viewId]) {\n        return {};\n    }\n\n    return { ...datastore.viewBasedRequests[viewId] };\n};\n\nexport const getViewId = ({ navigation }): string => {\n    return navigation && navigation.state ? navigation.state.key : '';\n};\n"]},"metadata":{},"sourceType":"module"}