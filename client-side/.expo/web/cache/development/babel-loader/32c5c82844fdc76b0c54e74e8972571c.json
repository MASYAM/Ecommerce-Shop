{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableItem from \"./TouchableItem\";\nimport Animated from 'react-native-reanimated';\nimport memoize from \"./memoize\";\nvar AnimatedInterpolate = Animated.interpolateNode || Animated.interpolate;\nvar DEFAULT_ACTIVE_COLOR = 'rgba(255, 255, 255, 1)';\nvar DEFAULT_INACTIVE_COLOR = 'rgba(255, 255, 255, 0.7)';\nexport default class TabBarItem extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"getActiveOpacity\", memoize((position, routes, tabIndex) => {\n      if (routes.length > 1) {\n        var inputRange = routes.map((_, i) => i);\n        return AnimatedInterpolate(position, {\n          inputRange,\n          outputRange: inputRange.map(i => i === tabIndex ? 1 : 0)\n        });\n      } else {\n        return 1;\n      }\n    }));\n\n    _defineProperty(this, \"getInactiveOpacity\", memoize((position, routes, tabIndex) => {\n      if (routes.length > 1) {\n        var inputRange = routes.map((_, i) => i);\n        return AnimatedInterpolate(position, {\n          inputRange,\n          outputRange: inputRange.map(i => i === tabIndex ? 0 : 1)\n        });\n      } else {\n        return 0;\n      }\n    }));\n  }\n\n  render() {\n    var {\n      route,\n      position,\n      navigationState,\n      renderLabel: renderLabelPassed,\n      renderIcon,\n      renderBadge,\n      getLabelText,\n      getTestID,\n      getAccessibilityLabel,\n      getAccessible,\n      activeColor = DEFAULT_ACTIVE_COLOR,\n      inactiveColor = DEFAULT_INACTIVE_COLOR,\n      pressColor,\n      pressOpacity,\n      labelStyle,\n      style,\n      onLayout,\n      onPress,\n      onLongPress\n    } = this.props;\n    var tabIndex = navigationState.routes.indexOf(route);\n    var isFocused = navigationState.index === tabIndex;\n    var activeOpacity = this.getActiveOpacity(position, navigationState.routes, tabIndex);\n    var inactiveOpacity = this.getInactiveOpacity(position, navigationState.routes, tabIndex);\n    var icon = null;\n    var label = null;\n\n    if (renderIcon) {\n      var activeIcon = renderIcon({\n        route,\n        focused: true,\n        color: activeColor\n      });\n      var inactiveIcon = renderIcon({\n        route,\n        focused: false,\n        color: inactiveColor\n      });\n\n      if (inactiveIcon != null && activeIcon != null) {\n        icon = React.createElement(View, {\n          style: styles.icon\n        }, React.createElement(Animated.View, {\n          style: {\n            opacity: inactiveOpacity\n          }\n        }, inactiveIcon), React.createElement(Animated.View, {\n          style: [StyleSheet.absoluteFill, {\n            opacity: activeOpacity\n          }]\n        }, activeIcon));\n      }\n    }\n\n    var renderLabel = renderLabelPassed !== undefined ? renderLabelPassed : (_ref) => {\n      var {\n        route,\n        color\n      } = _ref;\n      var labelText = getLabelText({\n        route\n      });\n\n      if (typeof labelText === 'string') {\n        return React.createElement(Animated.Text, {\n          style: [styles.label, icon ? {\n            marginTop: 0\n          } : null, {\n            color\n          }, labelStyle]\n        }, labelText);\n      }\n\n      return labelText;\n    };\n\n    if (renderLabel) {\n      var activeLabel = renderLabel({\n        route,\n        focused: true,\n        color: activeColor\n      });\n      var inactiveLabel = renderLabel({\n        route,\n        focused: false,\n        color: inactiveColor\n      });\n      label = React.createElement(View, null, React.createElement(Animated.View, {\n        style: {\n          opacity: inactiveOpacity\n        }\n      }, inactiveLabel), React.createElement(Animated.View, {\n        style: [StyleSheet.absoluteFill, {\n          opacity: activeOpacity\n        }]\n      }, activeLabel));\n    }\n\n    var tabStyle = StyleSheet.flatten(style);\n    var isWidthSet = (tabStyle === null || tabStyle === void 0 ? void 0 : tabStyle.width) !== undefined;\n    var tabContainerStyle = isWidthSet ? null : {\n      flex: 1\n    };\n    var scene = {\n      route\n    };\n    var accessibilityLabel = getAccessibilityLabel(scene);\n    accessibilityLabel = typeof accessibilityLabel !== 'undefined' ? accessibilityLabel : getLabelText(scene);\n    var badge = renderBadge ? renderBadge(scene) : null;\n    return React.createElement(TouchableItem, {\n      borderless: true,\n      testID: getTestID(scene),\n      accessible: getAccessible(scene),\n      accessibilityLabel: accessibilityLabel,\n      accessibilityTraits: isFocused ? ['button', 'selected'] : 'button',\n      accessibilityComponentType: \"button\",\n      accessibilityRole: \"tab\",\n      accessibilityState: {\n        selected: isFocused\n      },\n      accessibilityStates: isFocused ? ['selected'] : [],\n      pressColor: pressColor,\n      pressOpacity: pressOpacity,\n      delayPressIn: 0,\n      onLayout: onLayout,\n      onPress: onPress,\n      onLongPress: onLongPress,\n      style: tabContainerStyle\n    }, React.createElement(View, {\n      pointerEvents: \"none\",\n      style: [styles.item, tabStyle]\n    }, icon, label, badge != null ? React.createElement(View, {\n      style: styles.badge\n    }, badge) : null));\n  }\n\n}\nvar styles = StyleSheet.create({\n  label: {\n    margin: 4,\n    backgroundColor: 'transparent'\n  },\n  icon: {\n    margin: 2\n  },\n  item: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 10,\n    minHeight: 48\n  },\n  badge: {\n    position: 'absolute',\n    top: 0,\n    right: 0\n  }\n});","map":{"version":3,"sources":["TabBarItem.tsx"],"names":["AnimatedInterpolate","Animated","DEFAULT_ACTIVE_COLOR","DEFAULT_INACTIVE_COLOR","React","memoize","routes","inputRange","outputRange","i","render","renderLabel","activeColor","inactiveColor","onLongPress","tabIndex","navigationState","isFocused","activeOpacity","inactiveOpacity","icon","label","activeIcon","renderIcon","focused","color","inactiveIcon","styles","opacity","StyleSheet","renderLabelPassed","labelText","getLabelText","route","marginTop","activeLabel","inactiveLabel","tabStyle","isWidthSet","tabContainerStyle","flex","scene","accessibilityLabel","getAccessibilityLabel","badge","renderBadge","getTestID","getAccessible","selected","margin","backgroundColor","item","alignItems","justifyContent","padding","minHeight","position","top","right"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;AASA,OAAA,aAAA;AAEA,OAAA,QAAA,MAAA,yBAAA;AACA,OAAA,OAAA;AAGA,IAAMA,mBAAmB,GAAGC,QAAQ,CAARA,eAAAA,IAA4BA,QAAQ,CAAhE,WAAA;AAgCA,IAAMC,oBAAoB,GAA1B,wBAAA;AACA,IAAMC,sBAAsB,GAA5B,0BAAA;AAEA,eAAe,MAAA,UAAA,SAA0CC,KAAK,CAA/C,SAAA,CAEb;AAAA,EAAA,WAAA,GAAA;AAAA,UAAA,YAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,kBAAA,EAC2BC,OAAO,CAChC,CAAA,QAAA,EAAA,MAAA,EAAA,QAAA,KAAwE;AACtE,UAAIC,MAAM,CAANA,MAAAA,GAAJ,CAAA,EAAuB;AACrB,YAAMC,UAAU,GAAGD,MAAM,CAANA,GAAAA,CAAW,CAAA,CAAA,EAAA,CAAA,KAA9B,CAAmBA,CAAnB;AAEA,eAAON,mBAAmB,CAAA,QAAA,EAAW;AAAA,UAAA,UAAA;AAEnCQ,UAAAA,WAAW,EAAED,UAAU,CAAVA,GAAAA,CAAgBE,CAAD,IAAQA,CAAC,KAADA,QAAAA,GAAAA,CAAAA,GAAvBF,CAAAA;AAFsB,SAAX,CAA1B;AAHF,OAAA,MAOO;AACL,eAAA,CAAA;AACD;AAZL,KACkC,CADlC,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,oBAAA,EAgB6BF,OAAO,CAAC,CAAA,QAAA,EAAA,MAAA,EAAA,QAAA,KAAgC;AACnE,UAAIC,MAAM,CAANA,MAAAA,GAAJ,CAAA,EAAuB;AACrB,YAAMC,UAAU,GAAGD,MAAM,CAANA,GAAAA,CAAW,CAAA,CAAA,EAAA,CAAA,KAA9B,CAAmBA,CAAnB;AAEA,eAAON,mBAAmB,CAAA,QAAA,EAAW;AAAA,UAAA,UAAA;AAEnCQ,UAAAA,WAAW,EAAED,UAAU,CAAVA,GAAAA,CAAgBE,CAAD,IAAgBA,CAAC,KAADA,QAAAA,GAAAA,CAAAA,GAA/BF,CAAAA;AAFsB,SAAX,CAA1B;AAHF,OAAA,MAOO;AACL,eAAA,CAAA;AACD;AA1BH,KAgBoC,CAhBpC,CAAA;AAAA;;AA6BAG,EAAAA,MAAM,GAAG;AACP,QAAM;AAAA,MAAA,KAAA;AAAA,MAAA,QAAA;AAAA,MAAA,eAAA;AAIJC,MAAAA,WAAW,EAJP,iBAAA;AAAA,MAAA,UAAA;AAAA,MAAA,WAAA;AAAA,MAAA,YAAA;AAAA,MAAA,SAAA;AAAA,MAAA,qBAAA;AAAA,MAAA,aAAA;AAWJC,MAAAA,WAAW,GAXP,oBAAA;AAYJC,MAAAA,aAAa,GAZT,sBAAA;AAAA,MAAA,UAAA;AAAA,MAAA,YAAA;AAAA,MAAA,UAAA;AAAA,MAAA,KAAA;AAAA,MAAA,QAAA;AAAA,MAAA,OAAA;AAmBJC,MAAAA;AAnBI,QAoBF,KApBJ,KAAA;AAsBA,QAAMC,QAAQ,GAAGC,eAAe,CAAfA,MAAAA,CAAAA,OAAAA,CAAjB,KAAiBA,CAAjB;AACA,QAAMC,SAAS,GAAGD,eAAe,CAAfA,KAAAA,KAAlB,QAAA;AAEA,QAAME,aAAa,GAAG,KAAA,gBAAA,CAAA,QAAA,EAEpBF,eAAe,CAFK,MAAA,EAAtB,QAAsB,CAAtB;AAKA,QAAMG,eAAe,GAAG,KAAA,kBAAA,CAAA,QAAA,EAEtBH,eAAe,CAFO,MAAA,EAAxB,QAAwB,CAAxB;AAMA,QAAII,IAA4B,GAAhC,IAAA;AACA,QAAIC,KAA6B,GAAjC,IAAA;;AAEA,QAAA,UAAA,EAAgB;AACd,UAAMC,UAAU,GAAGC,UAAU,CAAC;AAAA,QAAA,KAAA;AAE5BC,QAAAA,OAAO,EAFqB,IAAA;AAG5BC,QAAAA,KAAK,EAAEb;AAHqB,OAAD,CAA7B;AAKA,UAAMc,YAAY,GAAGH,UAAU,CAAC;AAAA,QAAA,KAAA;AAE9BC,QAAAA,OAAO,EAFuB,KAAA;AAG9BC,QAAAA,KAAK,EAAEZ;AAHuB,OAAD,CAA/B;;AAMA,UAAIa,YAAY,IAAZA,IAAAA,IAAwBJ,UAAU,IAAtC,IAAA,EAAgD;AAC9CF,QAAAA,IAAI,GACF,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,UAAA,KAAK,EAAEO,MAAM,CAACP;AAApB,SAAA,EACE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA;AAAe,UAAA,KAAK,EAAE;AAAEQ,YAAAA,OAAO,EAAET;AAAX;AAAtB,SAAA,EADF,YACE,CADF,EAIE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA;AACE,UAAA,KAAK,EAAE,CAACU,UAAU,CAAX,YAAA,EAA0B;AAAED,YAAAA,OAAO,EAAEV;AAAX,WAA1B;AADT,SAAA,EALJE,UAKI,CAJF,CADFA;AAYD;AACF;;AAED,QAAMT,WAAW,GACfmB,iBAAiB,KAAjBA,SAAAA,GAAAA,iBAAAA,GAEI,UAAmD;AAAA,UAAlD;AAAA,QAAA,KAAA;AAASL,QAAAA;AAAT,OAAkD;AACjD,UAAMM,SAAS,GAAGC,YAAY,CAAC;AAAEC,QAAAA;AAAF,OAAD,CAA9B;;AAEA,UAAI,OAAA,SAAA,KAAJ,QAAA,EAAmC;AACjC,eACE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA;AACE,UAAA,KAAK,EAAE,CACLN,MAAM,CADD,KAAA,EAELP,IAAI,GAAG;AAAEc,YAAAA,SAAS,EAAE;AAAb,WAAH,GAFC,IAAA,EAGL;AAAET,YAAAA;AAAF,WAHK,EAAA,UAAA;AADT,SAAA,EADF,SACE,CADF;AAYD;;AAED,aAAA,SAAA;AArBR,KAAA;;AAwBA,QAAA,WAAA,EAAiB;AACf,UAAMU,WAAW,GAAGxB,WAAW,CAAC;AAAA,QAAA,KAAA;AAE9Ba,QAAAA,OAAO,EAFuB,IAAA;AAG9BC,QAAAA,KAAK,EAAEb;AAHuB,OAAD,CAA/B;AAKA,UAAMwB,aAAa,GAAGzB,WAAW,CAAC;AAAA,QAAA,KAAA;AAEhCa,QAAAA,OAAO,EAFyB,KAAA;AAGhCC,QAAAA,KAAK,EAAEZ;AAHyB,OAAD,CAAjC;AAMAQ,MAAAA,KAAK,GACH,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA;AAAe,QAAA,KAAK,EAAE;AAAEO,UAAAA,OAAO,EAAET;AAAX;AAAtB,OAAA,EADF,aACE,CADF,EAIE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA;AACE,QAAA,KAAK,EAAE,CAACU,UAAU,CAAX,YAAA,EAA0B;AAAED,UAAAA,OAAO,EAAEV;AAAX,SAA1B;AADT,OAAA,EALJG,WAKI,CAJF,CADFA;AAYD;;AAED,QAAMgB,QAAQ,GAAGR,UAAU,CAAVA,OAAAA,CAAjB,KAAiBA,CAAjB;AACA,QAAMS,UAAU,GAAG,CAAA,QAAQ,KAAR,IAAA,IAAA,QAAQ,KAAA,KAAR,CAAA,GAAA,KAAA,CAAA,GAAA,QAAQ,CAAR,KAAA,MAAnB,SAAA;AACA,QAAMC,iBAAmC,GAAGD,UAAU,GAAA,IAAA,GAAU;AAAEE,MAAAA,IAAI,EAAE;AAAR,KAAhE;AAEA,QAAMC,KAAK,GAAG;AAAER,MAAAA;AAAF,KAAd;AAEA,QAAIS,kBAAkB,GAAGC,qBAAqB,CAA9C,KAA8C,CAA9C;AAEAD,IAAAA,kBAAkB,GAChB,OAAA,kBAAA,KAAA,WAAA,GAAA,kBAAA,GAEIV,YAAY,CAHlBU,KAGkB,CAHlBA;AAKA,QAAME,KAAK,GAAGC,WAAW,GAAGA,WAAW,CAAd,KAAc,CAAd,GAAzB,IAAA;AAEA,WACE,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA;AACE,MAAA,UAAU,EADZ,IAAA;AAEE,MAAA,MAAM,EAAEC,SAAS,CAFnB,KAEmB,CAFnB;AAGE,MAAA,UAAU,EAAEC,aAAa,CAH3B,KAG2B,CAH3B;AAIE,MAAA,kBAAkB,EAJpB,kBAAA;AAKE,MAAA,mBAAmB,EAAE9B,SAAS,GAAG,CAAA,QAAA,EAAH,UAAG,CAAH,GALhC,QAAA;AAME,MAAA,0BAA0B,EAN5B,QAAA;AAOE,MAAA,iBAAiB,EAPnB,KAAA;AAQE,MAAA,kBAAkB,EAAE;AAAE+B,QAAAA,QAAQ,EAAE/B;AAAZ,OARtB;AAUE,MAAA,mBAAmB,EAAEA,SAAS,GAAG,CAAH,UAAG,CAAH,GAVhC,EAAA;AAWE,MAAA,UAAU,EAXZ,UAAA;AAYE,MAAA,YAAY,EAZd,YAAA;AAaE,MAAA,YAAY,EAbd,CAAA;AAcE,MAAA,QAAQ,EAdV,QAAA;AAeE,MAAA,OAAO,EAfT,OAAA;AAgBE,MAAA,WAAW,EAhBb,WAAA;AAiBE,MAAA,KAAK,EAAEsB;AAjBT,KAAA,EAmBE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,MAAA,aAAa,EAAnB,MAAA;AAA2B,MAAA,KAAK,EAAE,CAACZ,MAAM,CAAP,IAAA,EAAA,QAAA;AAAlC,KAAA,EAAA,IAAA,EAAA,KAAA,EAGG,KAAK,IAAL,IAAA,GAAgB,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,MAAA,KAAK,EAAEA,MAAM,CAACiB;AAApB,KAAA,EAAhB,KAAgB,CAAhB,GAvBP,IAoBI,CAnBF,CADF;AA2BD;;AA7LD;AAgMF,IAAMjB,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BN,EAAAA,KAAK,EAAE;AACL4B,IAAAA,MAAM,EADD,CAAA;AAELC,IAAAA,eAAe,EAAE;AAFZ,GADwB;AAK/B9B,EAAAA,IAAI,EAAE;AACJ6B,IAAAA,MAAM,EAAE;AADJ,GALyB;AAQ/BE,EAAAA,IAAI,EAAE;AACJX,IAAAA,IAAI,EADA,CAAA;AAEJY,IAAAA,UAAU,EAFN,QAAA;AAGJC,IAAAA,cAAc,EAHV,QAAA;AAIJC,IAAAA,OAAO,EAJH,EAAA;AAKJC,IAAAA,SAAS,EAAE;AALP,GARyB;AAe/BX,EAAAA,KAAK,EAAE;AACLY,IAAAA,QAAQ,EADH,UAAA;AAELC,IAAAA,GAAG,EAFE,CAAA;AAGLC,IAAAA,KAAK,EAAE;AAHF;AAfwB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  View,\n  StyleProp,\n  LayoutChangeEvent,\n  TextStyle,\n  ViewStyle,\n} from 'react-native';\nimport TouchableItem from './TouchableItem';\nimport { Scene, Route, NavigationState } from './types';\nimport Animated from 'react-native-reanimated';\nimport memoize from './memoize';\n\n// @ts-ignore\nconst AnimatedInterpolate = Animated.interpolateNode || Animated.interpolate;\n\nexport type Props<T extends Route> = {\n  position: Animated.Node<number>;\n  route: T;\n  navigationState: NavigationState<T>;\n  activeColor?: string;\n  inactiveColor?: string;\n  pressColor?: string;\n  pressOpacity?: number;\n  getLabelText: (scene: Scene<T>) => string | undefined;\n  getAccessible: (scene: Scene<T>) => boolean | undefined;\n  getAccessibilityLabel: (scene: Scene<T>) => string | undefined;\n  getTestID: (scene: Scene<T>) => string | undefined;\n  renderLabel?: (scene: {\n    route: T;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  renderIcon?: (scene: {\n    route: T;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  renderBadge?: (scene: Scene<T>) => React.ReactNode;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  onPress: () => void;\n  onLongPress: () => void;\n  labelStyle?: StyleProp<TextStyle>;\n  style: StyleProp<ViewStyle>;\n};\n\nconst DEFAULT_ACTIVE_COLOR = 'rgba(255, 255, 255, 1)';\nconst DEFAULT_INACTIVE_COLOR = 'rgba(255, 255, 255, 0.7)';\n\nexport default class TabBarItem<T extends Route> extends React.Component<\n  Props<T>\n> {\n  private getActiveOpacity = memoize(\n    (position: Animated.Node<number>, routes: Route[], tabIndex: number) => {\n      if (routes.length > 1) {\n        const inputRange = routes.map((_, i) => i);\n\n        return AnimatedInterpolate(position, {\n          inputRange,\n          outputRange: inputRange.map((i) => (i === tabIndex ? 1 : 0)),\n        });\n      } else {\n        return 1;\n      }\n    }\n  );\n\n  private getInactiveOpacity = memoize((position, routes, tabIndex) => {\n    if (routes.length > 1) {\n      const inputRange = routes.map((_: Route, i: number) => i);\n\n      return AnimatedInterpolate(position, {\n        inputRange,\n        outputRange: inputRange.map((i: number) => (i === tabIndex ? 0 : 1)),\n      });\n    } else {\n      return 0;\n    }\n  });\n\n  render() {\n    const {\n      route,\n      position,\n      navigationState,\n      renderLabel: renderLabelPassed,\n      renderIcon,\n      renderBadge,\n      getLabelText,\n      getTestID,\n      getAccessibilityLabel,\n      getAccessible,\n      activeColor = DEFAULT_ACTIVE_COLOR,\n      inactiveColor = DEFAULT_INACTIVE_COLOR,\n      pressColor,\n      pressOpacity,\n      labelStyle,\n      style,\n      onLayout,\n      onPress,\n      onLongPress,\n    } = this.props;\n\n    const tabIndex = navigationState.routes.indexOf(route);\n    const isFocused = navigationState.index === tabIndex;\n\n    const activeOpacity = this.getActiveOpacity(\n      position,\n      navigationState.routes,\n      tabIndex\n    );\n    const inactiveOpacity = this.getInactiveOpacity(\n      position,\n      navigationState.routes,\n      tabIndex\n    );\n\n    let icon: React.ReactNode | null = null;\n    let label: React.ReactNode | null = null;\n\n    if (renderIcon) {\n      const activeIcon = renderIcon({\n        route,\n        focused: true,\n        color: activeColor,\n      });\n      const inactiveIcon = renderIcon({\n        route,\n        focused: false,\n        color: inactiveColor,\n      });\n\n      if (inactiveIcon != null && activeIcon != null) {\n        icon = (\n          <View style={styles.icon}>\n            <Animated.View style={{ opacity: inactiveOpacity }}>\n              {inactiveIcon}\n            </Animated.View>\n            <Animated.View\n              style={[StyleSheet.absoluteFill, { opacity: activeOpacity }]}\n            >\n              {activeIcon}\n            </Animated.View>\n          </View>\n        );\n      }\n    }\n\n    const renderLabel =\n      renderLabelPassed !== undefined\n        ? renderLabelPassed\n        : ({ route, color }: { route: T; color: string }) => {\n            const labelText = getLabelText({ route });\n\n            if (typeof labelText === 'string') {\n              return (\n                <Animated.Text\n                  style={[\n                    styles.label,\n                    icon ? { marginTop: 0 } : null,\n                    { color },\n                    labelStyle,\n                  ]}\n                >\n                  {labelText}\n                </Animated.Text>\n              );\n            }\n\n            return labelText;\n          };\n\n    if (renderLabel) {\n      const activeLabel = renderLabel({\n        route,\n        focused: true,\n        color: activeColor,\n      });\n      const inactiveLabel = renderLabel({\n        route,\n        focused: false,\n        color: inactiveColor,\n      });\n\n      label = (\n        <View>\n          <Animated.View style={{ opacity: inactiveOpacity }}>\n            {inactiveLabel}\n          </Animated.View>\n          <Animated.View\n            style={[StyleSheet.absoluteFill, { opacity: activeOpacity }]}\n          >\n            {activeLabel}\n          </Animated.View>\n        </View>\n      );\n    }\n\n    const tabStyle = StyleSheet.flatten(style);\n    const isWidthSet = tabStyle?.width !== undefined;\n    const tabContainerStyle: ViewStyle | null = isWidthSet ? null : { flex: 1 };\n\n    const scene = { route };\n\n    let accessibilityLabel = getAccessibilityLabel(scene);\n\n    accessibilityLabel =\n      typeof accessibilityLabel !== 'undefined'\n        ? accessibilityLabel\n        : getLabelText(scene);\n\n    const badge = renderBadge ? renderBadge(scene) : null;\n\n    return (\n      <TouchableItem\n        borderless\n        testID={getTestID(scene)}\n        accessible={getAccessible(scene)}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityTraits={isFocused ? ['button', 'selected'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"tab\"\n        accessibilityState={{ selected: isFocused }}\n        // @ts-ignore: this is to support older React Native versions\n        accessibilityStates={isFocused ? ['selected'] : []}\n        pressColor={pressColor}\n        pressOpacity={pressOpacity}\n        delayPressIn={0}\n        onLayout={onLayout}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        style={tabContainerStyle}\n      >\n        <View pointerEvents=\"none\" style={[styles.item, tabStyle]}>\n          {icon}\n          {label}\n          {badge != null ? <View style={styles.badge}>{badge}</View> : null}\n        </View>\n      </TouchableItem>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  label: {\n    margin: 4,\n    backgroundColor: 'transparent',\n  },\n  icon: {\n    margin: 2,\n  },\n  item: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 10,\n    minHeight: 48,\n  },\n  badge: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}