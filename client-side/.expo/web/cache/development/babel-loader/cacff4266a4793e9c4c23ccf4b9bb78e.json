{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { SafeAreaView, ThemeContext } from 'react-navigation';\nimport TouchableItem from \"./TouchableItem\";\nexport default class DrawerNavigatorItems extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"context\", void 0);\n  }\n\n  getActiveTintColor() {\n    var {\n      activeTintColor\n    } = this.props;\n\n    if (!activeTintColor) {\n      return;\n    } else if (typeof activeTintColor === 'string') {\n      return activeTintColor;\n    }\n\n    return activeTintColor[this.context];\n  }\n\n  getInactiveTintColor() {\n    var {\n      inactiveTintColor\n    } = this.props;\n\n    if (!inactiveTintColor) {\n      return;\n    } else if (typeof inactiveTintColor === 'string') {\n      return inactiveTintColor;\n    }\n\n    return inactiveTintColor[this.context];\n  }\n\n  getActiveBackgroundColor() {\n    var {\n      activeBackgroundColor\n    } = this.props;\n\n    if (!activeBackgroundColor) {\n      return;\n    } else if (typeof activeBackgroundColor === 'string') {\n      return activeBackgroundColor;\n    }\n\n    return activeBackgroundColor[this.context];\n  }\n\n  getInactiveBackgroundColor() {\n    var {\n      inactiveBackgroundColor\n    } = this.props;\n\n    if (!inactiveBackgroundColor) {\n      return;\n    } else if (typeof inactiveBackgroundColor === 'string') {\n      return inactiveBackgroundColor;\n    }\n\n    return inactiveBackgroundColor[this.context];\n  }\n\n  render() {\n    var {\n      items,\n      activeItemKey,\n      getLabel,\n      renderIcon,\n      onItemPress,\n      itemsContainerStyle,\n      itemStyle,\n      labelStyle,\n      activeLabelStyle,\n      inactiveLabelStyle,\n      iconContainerStyle,\n      drawerPosition\n    } = this.props;\n    var activeTintColor = this.getActiveTintColor();\n    var activeBackgroundColor = this.getActiveBackgroundColor();\n    var inactiveTintColor = this.getInactiveTintColor();\n    var inactiveBackgroundColor = this.getInactiveBackgroundColor();\n    return React.createElement(View, {\n      style: [styles.container, itemsContainerStyle]\n    }, items.map((route, index) => {\n      var focused = activeItemKey === route.key;\n      var color = focused ? activeTintColor : inactiveTintColor;\n      var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n      var scene = {\n        route,\n        index,\n        focused,\n        tintColor: color\n      };\n      var icon = renderIcon(scene);\n      var label = getLabel(scene);\n      var accessibilityLabel = typeof label === 'string' ? label : undefined;\n      var extraLabelStyle = focused ? activeLabelStyle : inactiveLabelStyle;\n      return React.createElement(TouchableItem, {\n        key: route.key,\n        accessible: true,\n        accessibilityLabel: accessibilityLabel,\n        onPress: () => {\n          onItemPress({\n            route,\n            focused\n          });\n        },\n        delayPressIn: 0\n      }, React.createElement(SafeAreaView, {\n        style: [{\n          backgroundColor\n        }, styles.item, itemStyle],\n        forceInset: {\n          [drawerPosition]: 'always',\n          [drawerPosition === 'left' ? 'right' : 'left']: 'never',\n          vertical: 'never'\n        }\n      }, icon ? React.createElement(View, {\n        style: [styles.icon, focused ? null : styles.inactiveIcon, iconContainerStyle]\n      }, icon) : null, typeof label === 'string' ? React.createElement(Text, {\n        style: [styles.label, {\n          color\n        }, labelStyle, extraLabelStyle]\n      }, label) : label));\n    }));\n  }\n\n}\n\n_defineProperty(DrawerNavigatorItems, \"defaultProps\", {\n  activeTintColor: {\n    light: '#2196f3',\n    dark: '#fff'\n  },\n  activeBackgroundColor: {\n    light: 'rgba(0, 0, 0, .04)',\n    dark: 'rgba(255, 255, 255, .04)'\n  },\n  inactiveTintColor: {\n    light: 'rgba(0, 0, 0, .87)',\n    dark: 'rgba(255, 255, 255, .87)'\n  },\n  inactiveBackgroundColor: {\n    light: 'transparent',\n    dark: 'transparent'\n  }\n});\n\n_defineProperty(DrawerNavigatorItems, \"contextType\", ThemeContext);\n\nvar styles = StyleSheet.create({\n  container: {\n    paddingVertical: 4\n  },\n  item: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  icon: {\n    marginHorizontal: 16,\n    width: 24,\n    alignItems: 'center'\n  },\n  inactiveIcon: {\n    opacity: 0.62\n  },\n  label: {\n    margin: 16,\n    fontWeight: 'bold'\n  }\n});","map":{"version":3,"sources":["DrawerNavigatorItems.tsx"],"names":["DrawerNavigatorItems","React","activeTintColor","light","dark","activeBackgroundColor","inactiveTintColor","inactiveBackgroundColor","ThemeContext","getActiveTintColor","getInactiveTintColor","getActiveBackgroundColor","getInactiveBackgroundColor","render","drawerPosition","styles","focused","activeItemKey","route","color","backgroundColor","scene","tintColor","icon","renderIcon","label","getLabel","accessibilityLabel","extraLabelStyle","onItemPress","vertical","container","paddingVertical","item","flexDirection","alignItems","marginHorizontal","width","inactiveIcon","opacity","margin","fontWeight"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { SafeAreaView, ThemeContext } from 'react-navigation';\nimport TouchableItem from './TouchableItem';\nimport { DrawerNavigatorItemsProps } from '../types';\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nexport default class DrawerNavigatorItems extends React.Component<\n  DrawerNavigatorItemsProps\n> {\n  /* Material design specs - https://material.io/guidelines/patterns/navigation-drawer.html#navigation-drawer-specs */\n  static defaultProps = {\n    activeTintColor: {\n      light: '#2196f3',\n      dark: '#fff',\n    },\n    activeBackgroundColor: {\n      light: 'rgba(0, 0, 0, .04)',\n      dark: 'rgba(255, 255, 255, .04)',\n    },\n    inactiveTintColor: {\n      light: 'rgba(0, 0, 0, .87)',\n      dark: 'rgba(255, 255, 255, .87)',\n    },\n    inactiveBackgroundColor: {\n      light: 'transparent',\n      dark: 'transparent',\n    },\n  };\n\n  static contextType = ThemeContext;\n  context!: React.ContextType<typeof ThemeContext>;\n\n  private getActiveTintColor() {\n    let { activeTintColor } = this.props;\n    if (!activeTintColor) {\n      return;\n    } else if (typeof activeTintColor === 'string') {\n      return activeTintColor;\n    }\n\n    return activeTintColor[this.context];\n  }\n\n  private getInactiveTintColor() {\n    let { inactiveTintColor } = this.props;\n    if (!inactiveTintColor) {\n      return;\n    } else if (typeof inactiveTintColor === 'string') {\n      return inactiveTintColor;\n    }\n\n    return inactiveTintColor[this.context];\n  }\n\n  private getActiveBackgroundColor() {\n    let { activeBackgroundColor } = this.props;\n    if (!activeBackgroundColor) {\n      return;\n    } else if (typeof activeBackgroundColor === 'string') {\n      return activeBackgroundColor;\n    }\n\n    return activeBackgroundColor[this.context];\n  }\n\n  private getInactiveBackgroundColor() {\n    let { inactiveBackgroundColor } = this.props;\n    if (!inactiveBackgroundColor) {\n      return;\n    } else if (typeof inactiveBackgroundColor === 'string') {\n      return inactiveBackgroundColor;\n    }\n\n    return inactiveBackgroundColor[this.context];\n  }\n\n  render() {\n    const {\n      items,\n      activeItemKey,\n      getLabel,\n      renderIcon,\n      onItemPress,\n      itemsContainerStyle,\n      itemStyle,\n      labelStyle,\n      activeLabelStyle,\n      inactiveLabelStyle,\n      iconContainerStyle,\n      drawerPosition,\n    } = this.props;\n\n    const activeTintColor = this.getActiveTintColor();\n    const activeBackgroundColor = this.getActiveBackgroundColor();\n    const inactiveTintColor = this.getInactiveTintColor();\n    const inactiveBackgroundColor = this.getInactiveBackgroundColor();\n\n    return (\n      <View style={[styles.container, itemsContainerStyle]}>\n        {items.map((route, index: number) => {\n          const focused = activeItemKey === route.key;\n          const color = focused ? activeTintColor : inactiveTintColor;\n          const backgroundColor = focused\n            ? activeBackgroundColor\n            : inactiveBackgroundColor;\n          const scene = { route, index, focused, tintColor: color };\n          const icon = renderIcon(scene);\n          const label = getLabel(scene);\n          const accessibilityLabel =\n            typeof label === 'string' ? label : undefined;\n          const extraLabelStyle = focused\n            ? activeLabelStyle\n            : inactiveLabelStyle;\n          return (\n            <TouchableItem\n              key={route.key}\n              accessible\n              accessibilityLabel={accessibilityLabel}\n              onPress={() => {\n                onItemPress({ route, focused });\n              }}\n              delayPressIn={0}\n            >\n              <SafeAreaView\n                style={[{ backgroundColor }, styles.item, itemStyle]}\n                forceInset={{\n                  [drawerPosition]: 'always',\n                  [drawerPosition === 'left' ? 'right' : 'left']: 'never',\n                  vertical: 'never',\n                }}\n              >\n                {icon ? (\n                  <View\n                    style={[\n                      styles.icon,\n                      focused ? null : styles.inactiveIcon,\n                      iconContainerStyle,\n                    ]}\n                  >\n                    {icon}\n                  </View>\n                ) : null}\n                {typeof label === 'string' ? (\n                  <Text\n                    style={[\n                      styles.label,\n                      { color },\n                      labelStyle,\n                      extraLabelStyle,\n                    ]}\n                  >\n                    {label}\n                  </Text>\n                ) : (\n                  label\n                )}\n              </SafeAreaView>\n            </TouchableItem>\n          );\n        })}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingVertical: 4,\n  },\n  item: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  icon: {\n    marginHorizontal: 16,\n    width: 24,\n    alignItems: 'center',\n  },\n  inactiveIcon: {\n    /*\n     * Icons have 0.54 opacity according to guidelines\n     * 100/87 * 54 ~= 62\n     */\n    opacity: 0.62,\n  },\n  label: {\n    margin: 16,\n    fontWeight: 'bold',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}