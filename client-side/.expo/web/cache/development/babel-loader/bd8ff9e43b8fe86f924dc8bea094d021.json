{"ast":null,"code":"var _jsxFileName = \"/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/node_modules/react-native-maps/lib/components/MapView.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport EdgeInsetsPropType from \"react-native-web/dist/exports/EdgeInsetsPropType\";\nimport PointPropType from \"react-native-web/dist/exports/PointPropType\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport RNAnimated from \"react-native-web/dist/exports/Animated\";\nimport { requireNativeComponent } from \"react-native-web/dist/index\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport ColorPropType from \"react-native-web/dist/exports/ColorPropType\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport ViewPropTypes from \"react-native-web/dist/exports/ViewPropTypes\";\nimport View from \"react-native-web/dist/exports/View\";\nimport MapMarker from \"./MapMarker\";\nimport MapPolyline from \"./MapPolyline\";\nimport MapPolygon from \"./MapPolygon\";\nimport MapCircle from \"./MapCircle\";\nimport MapCallout from \"./MapCallout\";\nimport MapCalloutSubview from \"./MapCalloutSubview\";\nimport MapOverlay from \"./MapOverlay\";\nimport MapUrlTile from \"./MapUrlTile\";\nimport MapWMSTile from \"./MapWMSTile\";\nimport MapLocalTile from \"./MapLocalTile\";\nimport MapHeatMap from \"./MapHeatmap\";\nimport AnimatedRegion from \"./AnimatedRegion\";\nimport { contextTypes as childContextTypes, getAirMapName, googleMapIsInstalled, createNotSupportedComponent } from \"./decorateMapComponent\";\nimport * as ProviderConstants from \"./ProviderConstants\";\nexport var MAP_TYPES = {\n  STANDARD: 'standard',\n  SATELLITE: 'satellite',\n  HYBRID: 'hybrid',\n  TERRAIN: 'terrain',\n  NONE: 'none',\n  MUTEDSTANDARD: 'mutedStandard'\n};\nvar GOOGLE_MAPS_ONLY_TYPES = [MAP_TYPES.TERRAIN, MAP_TYPES.NONE];\nvar viewConfig = {\n  uiViewClassName: 'AIR<provider>Map',\n  validAttributes: {\n    region: true\n  }\n};\nvar CameraShape = PropTypes.shape({\n  center: PropTypes.shape({\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired\n  }),\n  pitch: PropTypes.number.isRequired,\n  heading: PropTypes.number.isRequired,\n  altitude: PropTypes.number.isRequired,\n  zoom: PropTypes.number.isRequired\n});\nvar viewPropTypes = ViewPropTypes || View.propTypes;\n\nvar propTypes = _objectSpread(_objectSpread({}, viewPropTypes), {}, {\n  provider: PropTypes.oneOf(['google']),\n  style: viewPropTypes.style,\n  customMapStyle: PropTypes.array,\n  customMapStyleString: PropTypes.string,\n  showsUserLocation: PropTypes.bool,\n  userLocationAnnotationTitle: PropTypes.string,\n  showsMyLocationButton: PropTypes.bool,\n  followsUserLocation: PropTypes.bool,\n  showsPointsOfInterest: PropTypes.bool,\n  showsCompass: PropTypes.bool,\n  zoomEnabled: PropTypes.bool,\n  zoomTapEnabled: PropTypes.bool,\n  zoomControlEnabled: PropTypes.bool,\n  rotateEnabled: PropTypes.bool,\n  cacheEnabled: PropTypes.bool,\n  loadingEnabled: PropTypes.bool,\n  loadingBackgroundColor: ColorPropType,\n  loadingIndicatorColor: ColorPropType,\n  scrollEnabled: PropTypes.bool,\n  pitchEnabled: PropTypes.bool,\n  toolbarEnabled: PropTypes.bool,\n  moveOnMarkerPress: PropTypes.bool,\n  showsScale: PropTypes.bool,\n  showsBuildings: PropTypes.bool,\n  showsTraffic: PropTypes.bool,\n  showsIndoors: PropTypes.bool,\n  showsIndoorLevelPicker: PropTypes.bool,\n  mapType: PropTypes.oneOf(Object.values(MAP_TYPES)),\n  region: PropTypes.shape({\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired,\n    latitudeDelta: PropTypes.number.isRequired,\n    longitudeDelta: PropTypes.number.isRequired\n  }),\n  initialRegion: PropTypes.shape({\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired,\n    latitudeDelta: PropTypes.number.isRequired,\n    longitudeDelta: PropTypes.number.isRequired\n  }),\n  camera: CameraShape,\n  initialCamera: CameraShape,\n  liteMode: PropTypes.bool,\n  mapPadding: EdgeInsetsPropType,\n  paddingAdjustmentBehavior: PropTypes.oneOf(['always', 'automatic', 'never']),\n  maxDelta: PropTypes.number,\n  minDelta: PropTypes.number,\n  legalLabelInsets: EdgeInsetsPropType,\n  onMapReady: PropTypes.func,\n  onMapLoaded: PropTypes.func,\n  onKmlReady: PropTypes.func,\n  onRegionChange: PropTypes.func,\n  onRegionChangeComplete: PropTypes.func,\n  onPress: PropTypes.func,\n  onDoublePress: PropTypes.func,\n  onLongPress: PropTypes.func,\n  onUserLocationChange: PropTypes.func,\n  onPanDrag: PropTypes.func,\n  onPoiClick: PropTypes.func,\n  onMarkerPress: PropTypes.func,\n  onMarkerSelect: PropTypes.func,\n  onMarkerDeselect: PropTypes.func,\n  onCalloutPress: PropTypes.func,\n  onMarkerDragStart: PropTypes.func,\n  onMarkerDrag: PropTypes.func,\n  onMarkerDragEnd: PropTypes.func,\n  minZoomLevel: PropTypes.number,\n  maxZoomLevel: PropTypes.number,\n  kmlSrc: PropTypes.string,\n  compassOffset: PointPropType,\n  onIndoorLevelActivated: PropTypes.func,\n  onIndoorBuildingFocused: PropTypes.func\n});\n\nclass MapView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isReady: Platform.OS === 'ios'\n    };\n    this._onMapReady = this._onMapReady.bind(this);\n    this._onMarkerPress = this._onMarkerPress.bind(this);\n    this._onChange = this._onChange.bind(this);\n    this._onLayout = this._onLayout.bind(this);\n  }\n\n  getChildContext() {\n    return {\n      provider: this.props.provider\n    };\n  }\n\n  getSnapshotBeforeUpdate(prevProps) {\n    if (this.state.isReady && this.props.customMapStyle !== prevProps.customMapStyle) {\n      this._updateStyle(this.props);\n    }\n\n    return this.props.region || null;\n  }\n\n  componentDidUpdate(prevProps, prevState, region) {\n    var a = this.__lastRegion;\n    var b = region;\n\n    if (!a || !b) {\n      return;\n    }\n\n    if (a.latitude !== b.latitude || a.longitude !== b.longitude || a.latitudeDelta !== b.latitudeDelta || a.longitudeDelta !== b.longitudeDelta) {\n      this.map.setNativeProps({\n        region: b\n      });\n    }\n  }\n\n  componentDidMount() {\n    var {\n      isReady\n    } = this.state;\n\n    if (isReady) {\n      this._updateStyle(this.props);\n    }\n  }\n\n  _updateStyle(props) {\n    var {\n      customMapStyle\n    } = props;\n    this.map.setNativeProps({\n      customMapStyleString: JSON.stringify(customMapStyle)\n    });\n  }\n\n  _onMapReady() {\n    var {\n      region,\n      initialRegion,\n      onMapReady\n    } = this.props;\n\n    if (region) {\n      this.map.setNativeProps({\n        region\n      });\n    } else if (initialRegion) {\n      this.map.setNativeProps({\n        initialRegion\n      });\n    }\n\n    this._updateStyle(this.props);\n\n    this.setState({\n      isReady: true\n    }, () => {\n      if (onMapReady) {\n        onMapReady();\n      }\n    });\n  }\n\n  _onLayout(e) {\n    var {\n      layout\n    } = e.nativeEvent;\n\n    if (!layout.width || !layout.height) {\n      return;\n    }\n\n    if (this.state.isReady && !this.__layoutCalled) {\n      var {\n        region,\n        initialRegion\n      } = this.props;\n\n      if (region) {\n        this.__layoutCalled = true;\n        this.map.setNativeProps({\n          region\n        });\n      } else if (initialRegion) {\n        this.__layoutCalled = true;\n        this.map.setNativeProps({\n          initialRegion\n        });\n      }\n    }\n\n    if (this.props.onLayout) {\n      this.props.onLayout(e);\n    }\n  }\n\n  _onMarkerPress(event) {\n    if (this.props.onMarkerPress) {\n      this.props.onMarkerPress(event.nativeEvent);\n    }\n  }\n\n  _onChange(event) {\n    this.__lastRegion = event.nativeEvent.region;\n\n    if (event.nativeEvent.continuous) {\n      if (this.props.onRegionChange) {\n        this.props.onRegionChange(event.nativeEvent.region);\n      }\n    } else if (this.props.onRegionChangeComplete) {\n      this.props.onRegionChangeComplete(event.nativeEvent.region);\n    }\n  }\n\n  getCamera() {\n    if (Platform.OS === 'android') {\n      return NativeModules.AirMapModule.getCamera(this._getHandle());\n    } else if (Platform.OS === 'ios') {\n      return this._runCommand('getCamera', []);\n    }\n\n    return Promise.reject('getCamera not supported on this platform');\n  }\n\n  setCamera(camera) {\n    this._runCommand('setCamera', [camera]);\n  }\n\n  animateCamera(camera, opts) {\n    this._runCommand('animateCamera', [camera, opts && opts.duration || 500]);\n  }\n\n  animateToNavigation(location, bearing, angle, duration) {\n    console.warn('animateToNavigation() is deprecated, use animateCamera() instead');\n\n    this._runCommand('animateToNavigation', [location, bearing, angle, duration || 500]);\n  }\n\n  animateToRegion(region, duration) {\n    this._runCommand('animateToRegion', [region, duration || 500]);\n  }\n\n  animateToCoordinate(latLng, duration) {\n    console.warn('animateToCoordinate() is deprecated, use animateCamera() instead');\n\n    this._runCommand('animateToCoordinate', [latLng, duration || 500]);\n  }\n\n  animateToBearing(bearing, duration) {\n    console.warn('animateToBearing() is deprecated, use animateCamera() instead');\n\n    this._runCommand('animateToBearing', [bearing, duration || 500]);\n  }\n\n  animateToViewingAngle(angle, duration) {\n    console.warn('animateToViewingAngle() is deprecated, use animateCamera() instead');\n\n    this._runCommand('animateToViewingAngle', [angle, duration || 500]);\n  }\n\n  fitToElements(animated) {\n    this._runCommand('fitToElements', [animated]);\n  }\n\n  fitToSuppliedMarkers(markers) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      edgePadding = {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n      },\n      animated = true\n    } = options;\n\n    this._runCommand('fitToSuppliedMarkers', [markers, edgePadding, animated]);\n  }\n\n  fitToCoordinates() {\n    var coordinates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      edgePadding = {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n      },\n      animated = true\n    } = options;\n\n    this._runCommand('fitToCoordinates', [coordinates, edgePadding, animated]);\n  }\n\n  getMapBoundaries() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (Platform.OS === 'android') {\n        return yield NativeModules.AirMapModule.getMapBoundaries(_this._getHandle());\n      } else if (Platform.OS === 'ios') {\n        return yield _this._runCommand('getMapBoundaries', []);\n      }\n\n      return Promise.reject('getMapBoundaries not supported on this platform');\n    })();\n  }\n\n  setMapBoundaries(northEast, southWest) {\n    this._runCommand('setMapBoundaries', [northEast, southWest]);\n  }\n\n  setIndoorActiveLevelIndex(activeLevelIndex) {\n    this._runCommand('setIndoorActiveLevelIndex', [activeLevelIndex]);\n  }\n\n  takeSnapshot(args) {\n    if (Platform.OS === 'ios' && arguments.length === 4) {\n      console.warn('Old takeSnapshot API has been deprecated; will be removed in the near future');\n      var width = arguments[0];\n      var height = arguments[1];\n      var region = arguments[2];\n      var callback = arguments[3];\n\n      this._runCommand('takeSnapshot', [width || 0, height || 0, region || {}, 'png', 1, 'legacy', callback]);\n\n      return undefined;\n    }\n\n    var config = {\n      width: args.width || 0,\n      height: args.height || 0,\n      region: args.region || {},\n      format: args.format || 'png',\n      quality: args.quality || 1.0,\n      result: args.result || 'file'\n    };\n\n    if (config.format !== 'png' && config.format !== 'jpg') {\n      throw new Error('Invalid format specified');\n    }\n\n    if (config.result !== 'file' && config.result !== 'base64') {\n      throw new Error('Invalid result specified');\n    }\n\n    if (Platform.OS === 'android') {\n      return NativeModules.AirMapModule.takeSnapshot(this._getHandle(), config);\n    } else if (Platform.OS === 'ios') {\n      return new Promise((resolve, reject) => {\n        this._runCommand('takeSnapshot', [config.width, config.height, config.region, config.format, config.quality, config.result, (err, snapshot) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(snapshot);\n          }\n        }]);\n      });\n    }\n\n    return Promise.reject('takeSnapshot not supported on this platform');\n  }\n\n  pointForCoordinate(coordinate) {\n    if (Platform.OS === 'android') {\n      return NativeModules.AirMapModule.pointForCoordinate(this._getHandle(), coordinate);\n    } else if (Platform.OS === 'ios') {\n      return this._runCommand('pointForCoordinate', [coordinate]);\n    }\n\n    return Promise.reject('pointForCoordinate not supported on this platform');\n  }\n\n  coordinateForPoint(point) {\n    if (Platform.OS === 'android') {\n      return NativeModules.AirMapModule.coordinateForPoint(this._getHandle(), point);\n    } else if (Platform.OS === 'ios') {\n      return this._runCommand('coordinateForPoint', [point]);\n    }\n\n    return Promise.reject('coordinateForPoint not supported on this platform');\n  }\n\n  getMarkersFrames() {\n    var onlyVisible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    if (Platform.OS === 'ios') {\n      return this._runCommand('getMarkersFrames', [onlyVisible]);\n    }\n\n    return Promise.reject('getMarkersFrames not supported on this platform');\n  }\n\n  boundingBoxForRegion(region) {\n    return {\n      northEast: {\n        latitude: region.latitude + region.latitudeDelta / 2,\n        longitude: region.longitude + region.longitudeDelta / 2\n      },\n      southWest: {\n        latitude: region.latitude - region.latitudeDelta / 2,\n        longitude: region.longitude - region.longitudeDelta / 2\n      }\n    };\n  }\n\n  _uiManagerCommand(name) {\n    var UIManager = NativeModules.UIManager;\n    var componentName = getAirMapName(this.props.provider);\n\n    if (!UIManager.getViewManagerConfig) {\n      return UIManager[componentName].Commands[name];\n    }\n\n    return UIManager.getViewManagerConfig(componentName).Commands[name];\n  }\n\n  _mapManagerCommand(name) {\n    var managerName = getAirMapName(this.props.provider);\n\n    if (managerName === 'UI') {\n      var UIManager = NativeModules.UIManager;\n\n      if (!UIManager.getViewManagerConfig) {\n        return UIManager[name];\n      }\n\n      return UIManager.getViewManagerConfig(name);\n    }\n\n    return NativeModules[\"\".concat(getAirMapName(this.props.provider), \"Manager\")][name];\n  }\n\n  _getHandle() {\n    return findNodeHandle(this.map);\n  }\n\n  _runCommand(name, args) {\n    switch (Platform.OS) {\n      case 'android':\n        return NativeModules.UIManager.dispatchViewManagerCommand(this._getHandle(), this._uiManagerCommand(name), args);\n\n      case 'ios':\n        return this._mapManagerCommand(name)(this._getHandle(), ...args);\n\n      default:\n        return Promise.reject(\"Invalid platform was passed: \".concat(Platform.OS));\n    }\n  }\n\n  render() {\n    var props;\n\n    if (this.state.isReady) {\n      props = _objectSpread({\n        region: null,\n        initialRegion: null,\n        onMarkerPress: this._onMarkerPress,\n        onChange: this._onChange,\n        onMapReady: this._onMapReady,\n        onLayout: this._onLayout\n      }, this.props);\n\n      if (Platform.OS === 'ios' && props.provider === ProviderConstants.PROVIDER_DEFAULT && GOOGLE_MAPS_ONLY_TYPES.includes(props.mapType)) {\n        props.mapType = MAP_TYPES.standard;\n      }\n\n      props.handlePanDrag = !!props.onPanDrag;\n    } else {\n      props = {\n        style: this.props.style,\n        region: null,\n        initialRegion: null,\n        onMarkerPress: this._onMarkerPress,\n        onChange: this._onChange,\n        onMapReady: this._onMapReady,\n        onLayout: this._onLayout\n      };\n    }\n\n    if (Platform.OS === 'android' && this.props.liteMode) {\n      return React.createElement(AIRMapLite, _extends({\n        ref: _ref => {\n          this.map = _ref;\n        }\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 981,\n          columnNumber: 9\n        }\n      }));\n    }\n\n    var AIRMap = getAirMapComponent(this.props.provider);\n    return React.createElement(AIRMap, _extends({\n      ref: _ref2 => {\n        this.map = _ref2;\n      }\n    }, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 993,\n        columnNumber: 7\n      }\n    }));\n  }\n\n}\n\nMapView.propTypes = propTypes;\nMapView.viewConfig = viewConfig;\nMapView.childContextTypes = childContextTypes;\nMapView.MAP_TYPES = MAP_TYPES;\n\nvar nativeComponent = Component => requireNativeComponent(Component, MapView, {\n  nativeOnly: {\n    onChange: true,\n    onMapReady: true,\n    onKmlReady: true,\n    handlePanDrag: true\n  }\n});\n\nvar airMaps = {\n  default: nativeComponent('AIRMap')\n};\n\nif (Platform.OS === 'android') {\n  airMaps.google = airMaps.default;\n} else {\n  airMaps.google = googleMapIsInstalled ? nativeComponent('AIRGoogleMap') : createNotSupportedComponent('react-native-maps: AirGoogleMaps dir must be added to your xCode project to support GoogleMaps on iOS.');\n}\n\nvar getAirMapComponent = provider => airMaps[provider || 'default'];\n\nvar AIRMapLite;\n\nif (!NativeModules.UIManager.getViewManagerConfig) {\n  AIRMapLite = NativeModules.UIManager.AIRMapLite && requireNativeComponent('AIRMapLite', MapView, {\n    nativeOnly: {\n      onChange: true,\n      onMapReady: true,\n      handlePanDrag: true\n    }\n  });\n} else {\n  AIRMapLite = NativeModules.UIManager.getViewManagerConfig('AIRMapLite') && requireNativeComponent('AIRMapLite', MapView, {\n    nativeOnly: {\n      onChange: true,\n      onMapReady: true,\n      handlePanDrag: true\n    }\n  });\n}\n\nexport var Animated = RNAnimated.createAnimatedComponent(MapView);\nexport var ProviderPropType = PropTypes.oneOf(Object.values(ProviderConstants));\nMapView.Marker = MapMarker;\nMapView.Polyline = MapPolyline;\nMapView.Polygon = MapPolygon;\nMapView.Circle = MapCircle;\nMapView.UrlTile = MapUrlTile;\nMapView.MapWMSTile = MapWMSTile;\nMapView.LocalTile = MapLocalTile;\nMapView.Heatmap = MapHeatMap;\nMapView.Overlay = MapOverlay;\nMapView.Callout = MapCallout;\nMapView.CalloutSubview = MapCalloutSubview;\n\n_extends(MapView, ProviderConstants);\n\nMapView.ProviderPropType = ProviderPropType;\nMapView.Animated = Animated;\nMapView.AnimatedRegion = AnimatedRegion;\nexport default MapView;","map":{"version":3,"sources":["/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/node_modules/react-native-maps/lib/components/MapView.js"],"names":["PropTypes","React","requireNativeComponent","MapMarker","MapPolyline","MapPolygon","MapCircle","MapCallout","MapCalloutSubview","MapOverlay","MapUrlTile","MapWMSTile","MapLocalTile","MapHeatMap","AnimatedRegion","contextTypes","childContextTypes","getAirMapName","googleMapIsInstalled","createNotSupportedComponent","ProviderConstants","MAP_TYPES","STANDARD","SATELLITE","HYBRID","TERRAIN","NONE","MUTEDSTANDARD","GOOGLE_MAPS_ONLY_TYPES","viewConfig","uiViewClassName","validAttributes","region","CameraShape","shape","center","latitude","number","isRequired","longitude","pitch","heading","altitude","zoom","viewPropTypes","ViewPropTypes","View","propTypes","provider","oneOf","style","customMapStyle","array","customMapStyleString","string","showsUserLocation","bool","userLocationAnnotationTitle","showsMyLocationButton","followsUserLocation","showsPointsOfInterest","showsCompass","zoomEnabled","zoomTapEnabled","zoomControlEnabled","rotateEnabled","cacheEnabled","loadingEnabled","loadingBackgroundColor","ColorPropType","loadingIndicatorColor","scrollEnabled","pitchEnabled","toolbarEnabled","moveOnMarkerPress","showsScale","showsBuildings","showsTraffic","showsIndoors","showsIndoorLevelPicker","mapType","Object","values","latitudeDelta","longitudeDelta","initialRegion","camera","initialCamera","liteMode","mapPadding","EdgeInsetsPropType","paddingAdjustmentBehavior","maxDelta","minDelta","legalLabelInsets","onMapReady","func","onMapLoaded","onKmlReady","onRegionChange","onRegionChangeComplete","onPress","onDoublePress","onLongPress","onUserLocationChange","onPanDrag","onPoiClick","onMarkerPress","onMarkerSelect","onMarkerDeselect","onCalloutPress","onMarkerDragStart","onMarkerDrag","onMarkerDragEnd","minZoomLevel","maxZoomLevel","kmlSrc","compassOffset","PointPropType","onIndoorLevelActivated","onIndoorBuildingFocused","MapView","Component","constructor","props","state","isReady","Platform","OS","_onMapReady","bind","_onMarkerPress","_onChange","_onLayout","getChildContext","getSnapshotBeforeUpdate","prevProps","_updateStyle","componentDidUpdate","prevState","a","__lastRegion","b","map","setNativeProps","componentDidMount","JSON","stringify","setState","e","layout","nativeEvent","width","height","__layoutCalled","onLayout","event","continuous","getCamera","NativeModules","AirMapModule","_getHandle","_runCommand","Promise","reject","setCamera","animateCamera","opts","duration","animateToNavigation","location","bearing","angle","console","warn","animateToRegion","animateToCoordinate","latLng","animateToBearing","animateToViewingAngle","fitToElements","animated","fitToSuppliedMarkers","markers","options","edgePadding","top","right","bottom","left","fitToCoordinates","coordinates","getMapBoundaries","setMapBoundaries","northEast","southWest","setIndoorActiveLevelIndex","activeLevelIndex","takeSnapshot","args","arguments","length","callback","undefined","config","format","quality","result","Error","resolve","err","snapshot","pointForCoordinate","coordinate","coordinateForPoint","point","getMarkersFrames","onlyVisible","boundingBoxForRegion","_uiManagerCommand","name","UIManager","componentName","getViewManagerConfig","Commands","_mapManagerCommand","managerName","findNodeHandle","dispatchViewManagerCommand","render","onChange","PROVIDER_DEFAULT","includes","standard","handlePanDrag","ref","AIRMap","getAirMapComponent","nativeComponent","nativeOnly","airMaps","default","google","AIRMapLite","Animated","RNAnimated","createAnimatedComponent","ProviderPropType","Marker","Polyline","Polygon","Circle","UrlTile","LocalTile","Heatmap","Overlay","Callout","CalloutSubview"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n  EdgeInsetsPropType,\n  PointPropType,\n  Platform,\n  Animated as RNAnimated,\n  requireNativeComponent,\n  NativeModules,\n  ColorPropType,\n  findNodeHandle,\n  ViewPropTypes,\n  View,\n} from 'react-native';\nimport MapMarker from './MapMarker';\nimport MapPolyline from './MapPolyline';\nimport MapPolygon from './MapPolygon';\nimport MapCircle from './MapCircle';\nimport MapCallout from './MapCallout';\nimport MapCalloutSubview from './MapCalloutSubview';\nimport MapOverlay from './MapOverlay';\nimport MapUrlTile from './MapUrlTile';\nimport MapWMSTile from './MapWMSTile';\nimport MapLocalTile from './MapLocalTile';\nimport MapHeatMap from './MapHeatmap';\nimport AnimatedRegion from './AnimatedRegion';\nimport {\n  contextTypes as childContextTypes,\n  getAirMapName,\n  googleMapIsInstalled,\n  createNotSupportedComponent,\n} from './decorateMapComponent';\nimport * as ProviderConstants from './ProviderConstants';\n\nexport const MAP_TYPES = {\n  STANDARD: 'standard',\n  SATELLITE: 'satellite',\n  HYBRID: 'hybrid',\n  TERRAIN: 'terrain',\n  NONE: 'none',\n  MUTEDSTANDARD: 'mutedStandard',\n};\n\nconst GOOGLE_MAPS_ONLY_TYPES = [MAP_TYPES.TERRAIN, MAP_TYPES.NONE];\n\nconst viewConfig = {\n  uiViewClassName: 'AIR<provider>Map',\n  validAttributes: {\n    region: true,\n  },\n};\n\n/**\n * Defines the map camera.\n */\nconst CameraShape = PropTypes.shape({\n  center: PropTypes.shape({\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired,\n  }),\n  pitch: PropTypes.number.isRequired,\n  heading: PropTypes.number.isRequired,\n  altitude: PropTypes.number.isRequired,\n  zoom: PropTypes.number.isRequired,\n});\n\n// if ViewPropTypes is not defined fall back to View.propType (to support RN < 0.44)\nconst viewPropTypes = ViewPropTypes || View.propTypes;\n\nconst propTypes = {\n  ...viewPropTypes,\n  /**\n   * When provider is \"google\", we will use GoogleMaps.\n   * Any value other than \"google\" will default to using\n   * MapKit in iOS or GoogleMaps in android as the map provider.\n   */\n  provider: PropTypes.oneOf(['google']),\n\n  /**\n   * Used to style and layout the `MapView`.  See `StyleSheet.js` and\n   * `ViewStylePropTypes.js` for more info.\n   */\n  style: viewPropTypes.style,\n\n  /**\n   * A json object that describes the style of the map. This is transformed to a string\n   * and saved in mayStyleString to be sent to android and ios\n   * https://developers.google.com/maps/documentation/ios-sdk/styling#use_a_string_resource\n   * https://developers.google.com/maps/documentation/android-api/styling\n   */\n  customMapStyle: PropTypes.array,\n\n  /**\n   * A json string that describes the style of the map\n   * https://developers.google.com/maps/documentation/ios-sdk/styling#use_a_string_resource\n   * https://developers.google.com/maps/documentation/android-api/styling\n   */\n  customMapStyleString: PropTypes.string,\n\n  /**\n   * If `true` the app will ask for the user's location.\n   * Default value is `false`.\n   *\n   * **NOTE**: You need to add NSLocationWhenInUseUsageDescription key in\n   * Info.plist to enable geolocation, otherwise it is going\n   * to *fail silently*! You will also need to add an explanation for why\n   * you need the users location against `NSLocationWhenInUseUsageDescription` in Info.plist.\n   * Otherwise Apple may reject your app submission.\n   */\n  showsUserLocation: PropTypes.bool,\n\n  /**\n   * The title of the annotation for current user location. This only works if\n   * `showsUserLocation` is true.\n   * There is a default value `My Location` set by MapView.\n   *\n   * @platform ios\n   */\n  userLocationAnnotationTitle: PropTypes.string,\n\n  /**\n   * If `false` hide the button to move map to the current user's location.\n   * Default value is `true`.\n   *\n   * @platform android\n   */\n  showsMyLocationButton: PropTypes.bool,\n\n  /**\n   * If `true` the map will focus on the user's location. This only works if\n   * `showsUserLocation` is true and the user has shared their location.\n   * Default value is `false`.\n   *\n   * @platform ios\n   */\n  followsUserLocation: PropTypes.bool,\n\n  /**\n   * If `false` points of interest won't be displayed on the map.\n   * Default value is `true`.\n   *\n   */\n  showsPointsOfInterest: PropTypes.bool,\n\n  /**\n   * If `false` compass won't be displayed on the map.\n   * Default value is `true`.\n   *\n   * @platform ios\n   */\n  showsCompass: PropTypes.bool,\n\n  /**\n   * If `false` the user won't be able to pinch/zoom the map.\n   * Default value is `true`.\n   *\n   */\n  zoomEnabled: PropTypes.bool,\n\n  /**\n   * If `false` the user won't be able to double tap to zoom the map.\n   * However it will greatly decrease delay of tap gesture recognition.\n   * Default value is `true`.\n   *\n   */\n  zoomTapEnabled: PropTypes.bool,\n\n  /**\n   *If `false` the user won't be able to zoom the map\n   * Default value is `true`.\n   *\n   *@platform android\n   */\n  zoomControlEnabled: PropTypes.bool,\n\n  /**\n   * If `false` the user won't be able to pinch/rotate the map.\n   * Default value is `true`.\n   *\n   */\n  rotateEnabled: PropTypes.bool,\n\n  /**\n   * If `true` the map will be cached to an Image for performance\n   * Default value is `false`.\n   *\n   */\n  cacheEnabled: PropTypes.bool,\n\n  /**\n   * If `true` the map will be showing a loading indicator\n   * Default value is `false`.\n   *\n   */\n  loadingEnabled: PropTypes.bool,\n\n  /**\n   * Loading background color while generating map cache image or loading the map\n   * Default color is light gray.\n   *\n   */\n  loadingBackgroundColor: ColorPropType,\n\n  /**\n   * Loading indicator color while generating map cache image or loading the map\n   * Default color is gray color for iOS, theme color for Android.\n   *\n   */\n  loadingIndicatorColor: ColorPropType,\n\n  /**\n   * If `false` the user won't be able to change the map region being displayed.\n   * Default value is `true`.\n   *\n   */\n  scrollEnabled: PropTypes.bool,\n\n  /**\n   * If `false` the user won't be able to adjust the camera’s pitch angle.\n   * Default value is `true`.\n   *\n   */\n  pitchEnabled: PropTypes.bool,\n\n  /**\n   * If `false` will hide 'Navigate' and 'Open in Maps' buttons on marker press\n   * Default value is `true`.\n   *\n   * @platform android\n   */\n  toolbarEnabled: PropTypes.bool,\n\n  /**\n   * A Boolean indicating whether on marker press the map will move to the pressed marker\n   * Default value is `true`\n   *\n   * @platform android\n   */\n  moveOnMarkerPress: PropTypes.bool,\n\n  /**\n   * A Boolean indicating whether the map shows scale information.\n   * Default value is `false`\n   *\n   * @platform ios\n   */\n  showsScale: PropTypes.bool,\n\n  /**\n   * A Boolean indicating whether the map displays extruded building information.\n   * Default value is `true`.\n   */\n  showsBuildings: PropTypes.bool,\n\n  /**\n   * A Boolean value indicating whether the map displays traffic information.\n   * Default value is `false`.\n   */\n  showsTraffic: PropTypes.bool,\n\n  /**\n   * A Boolean indicating whether indoor maps should be enabled.\n   * Default value is `false`\n   *\n   * @platform android\n   */\n  showsIndoors: PropTypes.bool,\n\n  /**\n   * A Boolean indicating whether indoor level picker should be enabled.\n   * Default value is `false`\n   *\n   * @platform android\n   */\n  showsIndoorLevelPicker: PropTypes.bool,\n\n  /**\n   * The map type to be displayed.\n   *\n   * - standard: standard road map (default)\n   * - satellite: satellite view\n   * - hybrid: satellite view with roads and points of interest overlayed\n   * - terrain: topographic view\n   * - none: no base map\n   */\n  mapType: PropTypes.oneOf(Object.values(MAP_TYPES)),\n\n  /**\n   * The region to be displayed by the map.\n   *\n   * The region is defined by the center coordinates and the span of\n   * coordinates to display.\n   */\n  region: PropTypes.shape({\n    /**\n     * Coordinates for the center of the map.\n     */\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired,\n\n    /**\n     * Difference between the minimun and the maximum latitude/longitude\n     * to be displayed.\n     */\n    latitudeDelta: PropTypes.number.isRequired,\n    longitudeDelta: PropTypes.number.isRequired,\n  }),\n\n  /**\n   * The initial region to be displayed by the map.  Use this prop instead of `region`\n   * only if you don't want to control the viewport of the map besides the initial region.\n   *\n   * Changing this prop after the component has mounted will not result in a region change.\n   *\n   * This is similar to the `initialValue` prop of a text input.\n   */\n  initialRegion: PropTypes.shape({\n    /**\n     * Coordinates for the center of the map.\n     */\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired,\n\n    /**\n     * Difference between the minimun and the maximum latitude/longitude\n     * to be displayed.\n     */\n    latitudeDelta: PropTypes.number.isRequired,\n    longitudeDelta: PropTypes.number.isRequired,\n  }),\n\n  /**\n   * The camera view the map should use.\n   *\n   * Use the camera system, instead of the region system, if you need control over\n   * the pitch or heading.\n   */\n  camera: CameraShape,\n\n  /**\n   * The initial camera view the map should use.  Use this prop instead of `camera`\n   * only if you don't want to control the camera of the map besides the initial view.\n   *\n   * Use the camera system, instead of the region system, if you need control over\n   * the pitch or heading.\n   *\n   * Changing this prop after the component has mounted will not result in a camera change.\n   *\n   * This is similar to the `initialValue` prop of a text input.\n   */\n  initialCamera: CameraShape,\n\n  /**\n   * A Boolean indicating whether to use liteMode for android\n   * Default value is `false`\n   *\n   * @platform android\n   */\n  liteMode: PropTypes.bool,\n\n  /**\n   * (Google Maps only)\n   *\n   * Padding that is used by the Google Map View to position\n   * the camera, legal labels and buttons\n   *\n   */\n  mapPadding: EdgeInsetsPropType,\n\n  /**\n   * (Google Maps only, iOS)\n   *\n   * Whether the safe area padding is added to the Google Map View padding.\n   * This affects where markers, compass, Google logo etc. are placed on the view.\n   *\n   */\n  paddingAdjustmentBehavior: PropTypes.oneOf(['always', 'automatic', 'never']),\n\n  /**\n   * Maximum size of area that can be displayed.\n   *\n   * @platform ios\n   */\n  maxDelta: PropTypes.number,\n\n  /**\n   * Minimum size of area that can be displayed.\n   *\n   * @platform ios\n   */\n  minDelta: PropTypes.number,\n\n  /**\n   * Insets for the map's legal label, originally at bottom left of the map.\n   * See `EdgeInsetsPropType.js` for more information.\n   */\n  legalLabelInsets: EdgeInsetsPropType,\n\n  /**\n   * Callback that is called once the map is fully loaded.\n   */\n  onMapReady: PropTypes.func,\n\n  /**\n   * Callback that is called once all tiles have been loaded\n   * (or failed permanently) and labels have been rendered.\n   */\n  onMapLoaded: PropTypes.func,\n\n  /**\n   * Callback that is called once the kml is fully loaded.\n   */\n  onKmlReady: PropTypes.func,\n\n  /**\n   * Callback that is called continuously when the user is dragging the map.\n   */\n  onRegionChange: PropTypes.func,\n\n  /**\n   * Callback that is called once, when the user is done moving the map.\n   */\n  onRegionChangeComplete: PropTypes.func,\n\n  /**\n   * Callback that is called when user taps on the map.\n   */\n  onPress: PropTypes.func,\n\n  /**\n   * Callback that is called when user double taps on the map.\n   */\n  onDoublePress: PropTypes.func,\n\n  /**\n   * Callback that is called when user makes a \"long press\" somewhere on the map.\n   */\n  onLongPress: PropTypes.func,\n\n  /**\n   * Callback that is called when the underlying map figures our users current location.\n   */\n  onUserLocationChange: PropTypes.func,\n\n  /**\n   * Callback that is called when user makes a \"drag\" somewhere on the map\n   */\n  onPanDrag: PropTypes.func,\n\n  /**\n   * Callback that is called when user click on a POI\n   */\n  onPoiClick: PropTypes.func,\n\n  /**\n   * Callback that is called when a marker on the map is tapped by the user.\n   */\n  onMarkerPress: PropTypes.func,\n\n  /**\n   * Callback that is called when a marker on the map becomes selected. This will be called when\n   * the callout for that marker is about to be shown.\n   *\n   * @platform ios\n   */\n  onMarkerSelect: PropTypes.func,\n\n  /**\n   * Callback that is called when a marker on the map becomes deselected. This will be called when\n   * the callout for that marker is about to be hidden.\n   *\n   * @platform ios\n   */\n  onMarkerDeselect: PropTypes.func,\n\n  /**\n   * Callback that is called when a callout is tapped by the user.\n   */\n  onCalloutPress: PropTypes.func,\n\n  /**\n   * Callback that is called when the user initiates a drag on a marker (if it is draggable)\n   */\n  onMarkerDragStart: PropTypes.func,\n\n  /**\n   * Callback called continuously as a marker is dragged\n   */\n  onMarkerDrag: PropTypes.func,\n\n  /**\n   * Callback that is called when a drag on a marker finishes. This is usually the point you\n   * will want to setState on the marker's coordinate again\n   */\n  onMarkerDragEnd: PropTypes.func,\n\n  /**\n   * Minimum zoom value for the map, must be between 0 and 20\n   */\n  minZoomLevel: PropTypes.number,\n\n  /**\n   * Maximum zoom value for the map, must be between 0 and 20\n   */\n  maxZoomLevel: PropTypes.number,\n\n  /**\n   * Url KML Source\n   */\n  kmlSrc: PropTypes.string,\n\n  /**\n   * Offset Point x y for compass location.\n   *\n   * @platform ios\n   */\n  compassOffset: PointPropType,\n\n  /**\n   * Callback that is called when a level is activated on a indoor building.\n   */\n  onIndoorLevelActivated: PropTypes.func,\n\n  /**\n   * Callback that is called when a Building is focused.\n   */\n  onIndoorBuildingFocused: PropTypes.func,\n};\n\nclass MapView extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isReady: Platform.OS === 'ios',\n    };\n\n    this._onMapReady = this._onMapReady.bind(this);\n    this._onMarkerPress = this._onMarkerPress.bind(this);\n    this._onChange = this._onChange.bind(this);\n    this._onLayout = this._onLayout.bind(this);\n  }\n\n  getChildContext() {\n    return { provider: this.props.provider };\n  }\n\n  getSnapshotBeforeUpdate(prevProps) {\n    if (\n      this.state.isReady &&\n      this.props.customMapStyle !== prevProps.customMapStyle\n    ) {\n      this._updateStyle(this.props);\n    }\n    return this.props.region || null;\n  }\n\n  componentDidUpdate(prevProps, prevState, region) {\n    const a = this.__lastRegion;\n    const b = region;\n    if (!a || !b) {\n      return;\n    }\n    if (\n      a.latitude !== b.latitude ||\n      a.longitude !== b.longitude ||\n      a.latitudeDelta !== b.latitudeDelta ||\n      a.longitudeDelta !== b.longitudeDelta\n    ) {\n      this.map.setNativeProps({ region: b });\n    }\n  }\n\n  componentDidMount() {\n    const { isReady } = this.state;\n    if (isReady) {\n      this._updateStyle(this.props);\n    }\n  }\n\n  _updateStyle(props) {\n    const { customMapStyle } = props;\n    this.map.setNativeProps({\n      customMapStyleString: JSON.stringify(customMapStyle),\n    });\n  }\n\n  _onMapReady() {\n    const { region, initialRegion, onMapReady } = this.props;\n    if (region) {\n      this.map.setNativeProps({ region });\n    } else if (initialRegion) {\n      this.map.setNativeProps({ initialRegion });\n    }\n    this._updateStyle(this.props);\n    this.setState({ isReady: true }, () => {\n      if (onMapReady) {\n        onMapReady();\n      }\n    });\n  }\n\n  _onLayout(e) {\n    const { layout } = e.nativeEvent;\n    if (!layout.width || !layout.height) {\n      return;\n    }\n    if (this.state.isReady && !this.__layoutCalled) {\n      const { region, initialRegion } = this.props;\n      if (region) {\n        this.__layoutCalled = true;\n        this.map.setNativeProps({ region });\n      } else if (initialRegion) {\n        this.__layoutCalled = true;\n        this.map.setNativeProps({ initialRegion });\n      }\n    }\n    if (this.props.onLayout) {\n      this.props.onLayout(e);\n    }\n  }\n\n  _onMarkerPress(event) {\n    if (this.props.onMarkerPress) {\n      this.props.onMarkerPress(event.nativeEvent);\n    }\n  }\n\n  _onChange(event) {\n    this.__lastRegion = event.nativeEvent.region;\n    if (event.nativeEvent.continuous) {\n      if (this.props.onRegionChange) {\n        this.props.onRegionChange(event.nativeEvent.region);\n      }\n    } else if (this.props.onRegionChangeComplete) {\n      this.props.onRegionChangeComplete(event.nativeEvent.region);\n    }\n  }\n\n  getCamera() {\n    if (Platform.OS === 'android') {\n      return NativeModules.AirMapModule.getCamera(this._getHandle());\n    } else if (Platform.OS === 'ios') {\n      return this._runCommand('getCamera', []);\n    }\n    return Promise.reject('getCamera not supported on this platform');\n  }\n\n  setCamera(camera) {\n    this._runCommand('setCamera', [camera]);\n  }\n\n  animateCamera(camera, opts) {\n    this._runCommand('animateCamera', [camera, (opts && opts.duration) || 500]);\n  }\n\n  animateToNavigation(location, bearing, angle, duration) {\n    console.warn(\n      'animateToNavigation() is deprecated, use animateCamera() instead'\n    );\n    this._runCommand('animateToNavigation', [\n      location,\n      bearing,\n      angle,\n      duration || 500,\n    ]);\n  }\n\n  animateToRegion(region, duration) {\n    this._runCommand('animateToRegion', [region, duration || 500]);\n  }\n\n  animateToCoordinate(latLng, duration) {\n    console.warn(\n      'animateToCoordinate() is deprecated, use animateCamera() instead'\n    );\n    this._runCommand('animateToCoordinate', [latLng, duration || 500]);\n  }\n\n  animateToBearing(bearing, duration) {\n    console.warn(\n      'animateToBearing() is deprecated, use animateCamera() instead'\n    );\n    this._runCommand('animateToBearing', [bearing, duration || 500]);\n  }\n\n  animateToViewingAngle(angle, duration) {\n    console.warn(\n      'animateToViewingAngle() is deprecated, use animateCamera() instead'\n    );\n    this._runCommand('animateToViewingAngle', [angle, duration || 500]);\n  }\n\n  fitToElements(animated) {\n    this._runCommand('fitToElements', [animated]);\n  }\n\n  fitToSuppliedMarkers(markers, options = {}) {\n    const {\n      edgePadding = { top: 0, right: 0, bottom: 0, left: 0 },\n      animated = true,\n    } = options;\n\n    this._runCommand('fitToSuppliedMarkers', [markers, edgePadding, animated]);\n  }\n\n  fitToCoordinates(coordinates = [], options = {}) {\n    const {\n      edgePadding = { top: 0, right: 0, bottom: 0, left: 0 },\n      animated = true,\n    } = options;\n\n    this._runCommand('fitToCoordinates', [coordinates, edgePadding, animated]);\n  }\n\n  /**\n   * Get visible boudaries\n   *\n   * @return Promise Promise with the bounding box ({ northEast: <LatLng>, southWest: <LatLng> })\n   */\n  async getMapBoundaries() {\n    if (Platform.OS === 'android') {\n      return await NativeModules.AirMapModule.getMapBoundaries(\n        this._getHandle()\n      );\n    } else if (Platform.OS === 'ios') {\n      return await this._runCommand('getMapBoundaries', []);\n    }\n    return Promise.reject('getMapBoundaries not supported on this platform');\n  }\n\n  setMapBoundaries(northEast, southWest) {\n    this._runCommand('setMapBoundaries', [northEast, southWest]);\n  }\n\n  setIndoorActiveLevelIndex(activeLevelIndex) {\n    this._runCommand('setIndoorActiveLevelIndex', [activeLevelIndex]);\n  }\n\n  /**\n   * Takes a snapshot of the map and saves it to a picture\n   * file or returns the image as a base64 encoded string.\n   *\n   * @param config Configuration options\n   * @param [config.width] Width of the rendered map-view (when omitted actual view width is used).\n   * @param [config.height] Height of the rendered map-view (when omitted actual height is used).\n   * @param [config.region] Region to render (Only supported on iOS).\n   * @param [config.format] Encoding format ('png', 'jpg') (default: 'png').\n   * @param [config.quality] Compression quality (only used for jpg) (default: 1.0).\n   * @param [config.result] Result format ('file', 'base64') (default: 'file').\n   *\n   * @return Promise Promise with either the file-uri or base64 encoded string\n   */\n  takeSnapshot(args) {\n    // For the time being we support the legacy API on iOS.\n    // This will be removed in a future release and only the\n    // new Promise style API shall be supported.\n    if (Platform.OS === 'ios' && arguments.length === 4) {\n      console.warn(\n        'Old takeSnapshot API has been deprecated; will be removed in the near future'\n      );\n      const width = arguments[0];\n      const height = arguments[1];\n      const region = arguments[2];\n      const callback = arguments[3];\n      this._runCommand('takeSnapshot', [\n        width || 0,\n        height || 0,\n        region || {},\n        'png',\n        1,\n        'legacy',\n        callback,\n      ]);\n      return undefined;\n    }\n\n    // Sanitize inputs\n    const config = {\n      width: args.width || 0,\n      height: args.height || 0,\n      region: args.region || {},\n      format: args.format || 'png',\n      quality: args.quality || 1.0,\n      result: args.result || 'file',\n    };\n    if (config.format !== 'png' && config.format !== 'jpg') {\n      throw new Error('Invalid format specified');\n    }\n    if (config.result !== 'file' && config.result !== 'base64') {\n      throw new Error('Invalid result specified');\n    }\n\n    // Call native function\n    if (Platform.OS === 'android') {\n      return NativeModules.AirMapModule.takeSnapshot(this._getHandle(), config);\n    } else if (Platform.OS === 'ios') {\n      return new Promise((resolve, reject) => {\n        this._runCommand('takeSnapshot', [\n          config.width,\n          config.height,\n          config.region,\n          config.format,\n          config.quality,\n          config.result,\n          (err, snapshot) => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(snapshot);\n            }\n          },\n        ]);\n      });\n    }\n    return Promise.reject('takeSnapshot not supported on this platform');\n  }\n\n  /**\n   * Convert a map coordinate to user-space point\n   *\n   * @param coordinate Coordinate\n   * @param [coordinate.latitude] Latitude\n   * @param [coordinate.longitude] Longitude\n   *\n   * @return Promise Promise with the point ({ x: Number, y: Number })\n   */\n  pointForCoordinate(coordinate) {\n    if (Platform.OS === 'android') {\n      return NativeModules.AirMapModule.pointForCoordinate(\n        this._getHandle(),\n        coordinate\n      );\n    } else if (Platform.OS === 'ios') {\n      return this._runCommand('pointForCoordinate', [coordinate]);\n    }\n    return Promise.reject('pointForCoordinate not supported on this platform');\n  }\n\n  /**\n   * Convert a user-space point to a map coordinate\n   *\n   * @param point Point\n   * @param [point.x] X\n   * @param [point.x] Y\n   *\n   * @return Promise Promise with the coordinate ({ latitude: Number, longitude: Number })\n   */\n  coordinateForPoint(point) {\n    if (Platform.OS === 'android') {\n      return NativeModules.AirMapModule.coordinateForPoint(\n        this._getHandle(),\n        point\n      );\n    } else if (Platform.OS === 'ios') {\n      return this._runCommand('coordinateForPoint', [point]);\n    }\n    return Promise.reject('coordinateForPoint not supported on this platform');\n  }\n\n  /**\n   * Get markers' centers and frames in user-space coordinates\n   *\n   * @param onlyVisible boolean true to include only visible markers, false to include all\n   *\n   * @return Promise Promise with { <identifier>: { point: Point, frame: Frame } }\n   */\n  getMarkersFrames(onlyVisible = false) {\n    if (Platform.OS === 'ios') {\n      return this._runCommand('getMarkersFrames', [onlyVisible]);\n    }\n    return Promise.reject('getMarkersFrames not supported on this platform');\n  }\n\n  /**\n   * Get bounding box from region\n   *\n   * @param region Region\n   *\n   * @return Object Object bounding box ({ northEast: <LatLng>, southWest: <LatLng> })\n   */\n  boundingBoxForRegion(region) {\n    return {\n      northEast: {\n        latitude: region.latitude + region.latitudeDelta / 2,\n        longitude: region.longitude + region.longitudeDelta / 2,\n      },\n      southWest: {\n        latitude: region.latitude - region.latitudeDelta / 2,\n        longitude: region.longitude - region.longitudeDelta / 2,\n      },\n    };\n  }\n\n  _uiManagerCommand(name) {\n    const UIManager = NativeModules.UIManager;\n    const componentName = getAirMapName(this.props.provider);\n\n    if (!UIManager.getViewManagerConfig) {\n      // RN < 0.58\n      return UIManager[componentName].Commands[name];\n    }\n\n    // RN >= 0.58\n    return UIManager.getViewManagerConfig(componentName).Commands[name];\n  }\n\n  _mapManagerCommand(name) {\n    const managerName = getAirMapName(this.props.provider);\n\n    if (managerName === 'UI') {\n      const UIManager = NativeModules.UIManager;\n      if (!UIManager.getViewManagerConfig) {\n        // RN < 0.58\n        return UIManager[name];\n      }\n\n      // RN >= 0.58\n      return UIManager.getViewManagerConfig(name);\n    }\n\n    return NativeModules[`${getAirMapName(this.props.provider)}Manager`][name];\n  }\n\n  _getHandle() {\n    return findNodeHandle(this.map);\n  }\n\n  _runCommand(name, args) {\n    switch (Platform.OS) {\n      case 'android':\n        return NativeModules.UIManager.dispatchViewManagerCommand(\n          this._getHandle(),\n          this._uiManagerCommand(name),\n          args\n        );\n\n      case 'ios':\n        return this._mapManagerCommand(name)(this._getHandle(), ...args);\n\n      default:\n        return Promise.reject(`Invalid platform was passed: ${Platform.OS}`);\n    }\n  }\n\n  render() {\n    let props;\n\n    if (this.state.isReady) {\n      props = {\n        region: null,\n        initialRegion: null,\n        onMarkerPress: this._onMarkerPress,\n        onChange: this._onChange,\n        onMapReady: this._onMapReady,\n        onLayout: this._onLayout,\n        ...this.props,\n      };\n      if (\n        Platform.OS === 'ios' &&\n        props.provider === ProviderConstants.PROVIDER_DEFAULT &&\n        GOOGLE_MAPS_ONLY_TYPES.includes(props.mapType)\n      ) {\n        props.mapType = MAP_TYPES.standard;\n      }\n      props.handlePanDrag = !!props.onPanDrag;\n    } else {\n      props = {\n        style: this.props.style,\n        region: null,\n        initialRegion: null,\n        onMarkerPress: this._onMarkerPress,\n        onChange: this._onChange,\n        onMapReady: this._onMapReady,\n        onLayout: this._onLayout,\n      };\n    }\n\n    if (Platform.OS === 'android' && this.props.liteMode) {\n      return (\n        <AIRMapLite\n          ref={ref => {\n            this.map = ref;\n          }}\n          {...props}\n        />\n      );\n    }\n\n    const AIRMap = getAirMapComponent(this.props.provider);\n\n    return (\n      <AIRMap\n        ref={ref => {\n          this.map = ref;\n        }}\n        {...props}\n      />\n    );\n  }\n}\n\nMapView.propTypes = propTypes;\nMapView.viewConfig = viewConfig;\nMapView.childContextTypes = childContextTypes;\n\nMapView.MAP_TYPES = MAP_TYPES;\n\nconst nativeComponent = Component =>\n  requireNativeComponent(Component, MapView, {\n    nativeOnly: {\n      onChange: true,\n      onMapReady: true,\n      onKmlReady: true,\n      handlePanDrag: true,\n    },\n  });\nconst airMaps = {\n  default: nativeComponent('AIRMap'),\n};\nif (Platform.OS === 'android') {\n  airMaps.google = airMaps.default;\n} else {\n  airMaps.google = googleMapIsInstalled\n    ? nativeComponent('AIRGoogleMap')\n    : createNotSupportedComponent(\n        'react-native-maps: AirGoogleMaps dir must be added to your xCode project to support GoogleMaps on iOS.'\n      );\n}\nconst getAirMapComponent = provider => airMaps[provider || 'default'];\n\nlet AIRMapLite;\nif (!NativeModules.UIManager.getViewManagerConfig) {\n  // RN < 0.58\n  AIRMapLite =\n    NativeModules.UIManager.AIRMapLite &&\n    requireNativeComponent('AIRMapLite', MapView, {\n      nativeOnly: {\n        onChange: true,\n        onMapReady: true,\n        handlePanDrag: true,\n      },\n    });\n} else {\n  // RN >= 0.58\n  AIRMapLite =\n    NativeModules.UIManager.getViewManagerConfig('AIRMapLite') &&\n    requireNativeComponent('AIRMapLite', MapView, {\n      nativeOnly: {\n        onChange: true,\n        onMapReady: true,\n        handlePanDrag: true,\n      },\n    });\n}\n\nexport const Animated = RNAnimated.createAnimatedComponent(MapView);\n\nexport const ProviderPropType = PropTypes.oneOf(\n  Object.values(ProviderConstants)\n);\n\n/**\n * TODO:\n * All of these properties on MapView are unecessary since they can be imported\n * individually with the es6 exports in index.js. Removing them is a breaking change,\n * but potentially allows for better dead code elimination since references are not\n * kept to components which are never used.\n */\n\nMapView.Marker = MapMarker;\nMapView.Polyline = MapPolyline;\nMapView.Polygon = MapPolygon;\nMapView.Circle = MapCircle;\nMapView.UrlTile = MapUrlTile;\nMapView.MapWMSTile = MapWMSTile;\nMapView.LocalTile = MapLocalTile;\nMapView.Heatmap = MapHeatMap;\nMapView.Overlay = MapOverlay;\nMapView.Callout = MapCallout;\nMapView.CalloutSubview = MapCalloutSubview;\nObject.assign(MapView, ProviderConstants);\nMapView.ProviderPropType = ProviderPropType;\n\nMapView.Animated = Animated;\nMapView.AnimatedRegion = AnimatedRegion;\n\nexport default MapView;\n"]},"metadata":{},"sourceType":"module"}