{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport invariant from 'fbjs/lib/invariant';\nimport ReanimatedEventEmitter from \"../ReanimatedEventEmitter\";\nimport { val } from \"../val\";\nimport AnimatedNode from \"./AnimatedNode\";\nvar NODE_MAPPING = new Map();\n\nfunction listener(data) {\n  var node = NODE_MAPPING.get(data.id);\n  node && node._callback(data.args);\n}\n\nclass AnimatedCall extends AnimatedNode {\n  constructor(args, jsFunction) {\n    invariant(args.every(el => el instanceof AnimatedNode), \"Reanimated: Animated.call node args should be an array with elements of type AnimatedNode. One or more of them are not AnimatedNodes\");\n    super({\n      type: 'call',\n      input: args\n    }, args);\n\n    _defineProperty(this, \"_callback\", void 0);\n\n    _defineProperty(this, \"_args\", void 0);\n\n    this._callback = jsFunction;\n    this._args = args;\n  }\n\n  toString() {\n    return \"AnimatedCall, id: \".concat(this.__nodeID);\n  }\n\n  __attach() {\n    super.__attach();\n\n    NODE_MAPPING.set(this.__nodeID, this);\n\n    if (NODE_MAPPING.size === 1) {\n      ReanimatedEventEmitter.addListener('onReanimatedCall', listener);\n    }\n  }\n\n  __detach() {\n    NODE_MAPPING.delete(this.__nodeID);\n\n    if (NODE_MAPPING.size === 0) {\n      ReanimatedEventEmitter.removeAllListeners('onReanimatedCall');\n    }\n\n    super.__detach();\n  }\n\n  __onEvaluate() {\n    this._callback(this._args.map(val));\n\n    return 0;\n  }\n\n}\n\nexport function createAnimatedCall(args, func) {\n  return new AnimatedCall(args, func);\n}","map":{"version":3,"sources":["AnimatedCall.js"],"names":["NODE_MAPPING","node","data","constructor","invariant","args","el","type","input","toString","__attach","ReanimatedEventEmitter","__detach","__onEvaluate"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAA,SAAA,MAAA,oBAAA;AACA,OAAA,sBAAA;AACA,SAAA,GAAA;AACA,OAAA,YAAA;AAEA,IAAMA,YAAY,GAAG,IAArB,GAAqB,EAArB;;AAEA,SAAA,QAAA,CAAA,IAAA,EAAwB;AACtB,MAAMC,IAAI,GAAGD,YAAY,CAAZA,GAAAA,CAAiBE,IAAI,CAAlC,EAAaF,CAAb;AACAC,EAAAA,IAAI,IAAIA,IAAI,CAAJA,SAAAA,CAAeC,IAAI,CAA3BD,IAAQA,CAARA;AACD;;AAED,MAAA,YAAA,SAAA,YAAA,CAAwC;AAItCE,EAAAA,WAAW,CAAA,IAAA,EAAA,UAAA,EAAmB;AAC5BC,IAAAA,SAAS,CACPC,IAAI,CAAJA,KAAAA,CAAWC,EAAE,IAAIA,EAAE,YADZ,YACPD,CADO,EAATD,sIAAS,CAATA;AAIA,UAAM;AAAEG,MAAAA,IAAI,EAAN,MAAA;AAAgBC,MAAAA,KAAK,EAAEH;AAAvB,KAAN,EAAA,IAAA;;AAL4B,IAAA,eAAA,CAAA,IAAA,EAAA,WAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EAAA,KAAA,CAAA,CAAA;;AAM5B,SAAA,SAAA,GAAA,UAAA;AACA,SAAA,KAAA,GAAA,IAAA;AACD;;AAEDI,EAAAA,QAAQ,GAAG;AACT,WAAA,qBAAA,MAAA,CAA4B,KAA5B,QAAA,CAAA;AACD;;AAEDC,EAAAA,QAAQ,GAAG;AACT,UAAA,QAAA;;AACAV,IAAAA,YAAY,CAAZA,GAAAA,CAAiB,KAAjBA,QAAAA,EAAAA,IAAAA;;AACA,QAAIA,YAAY,CAAZA,IAAAA,KAAJ,CAAA,EAA6B;AAC3BW,MAAAA,sBAAsB,CAAtBA,WAAAA,CAAAA,kBAAAA,EAAAA,QAAAA;AACD;AACF;;AAEDC,EAAAA,QAAQ,GAAG;AACTZ,IAAAA,YAAY,CAAZA,MAAAA,CAAoB,KAApBA,QAAAA;;AACA,QAAIA,YAAY,CAAZA,IAAAA,KAAJ,CAAA,EAA6B;AAC3BW,MAAAA,sBAAsB,CAAtBA,kBAAAA,CAAAA,kBAAAA;AACD;;AACD,UAAA,QAAA;AACD;;AAEDE,EAAAA,YAAY,GAAG;AACb,SAAA,SAAA,CAAe,KAAA,KAAA,CAAA,GAAA,CAAf,GAAe,CAAf;;AACA,WAAA,CAAA;AACD;;AArCqC;;AAwCxC,OAAO,SAAA,kBAAA,CAAA,IAAA,EAAA,IAAA,EAAwC;AAC7C,SAAO,IAAA,YAAA,CAAA,IAAA,EAAP,IAAO,CAAP;AACD","sourcesContent":["import invariant from 'fbjs/lib/invariant';\nimport ReanimatedEventEmitter from '../ReanimatedEventEmitter';\nimport { val } from '../val';\nimport AnimatedNode from './AnimatedNode';\n\nconst NODE_MAPPING = new Map();\n\nfunction listener(data) {\n  const node = NODE_MAPPING.get(data.id);\n  node && node._callback(data.args);\n}\n\nclass AnimatedCall extends AnimatedNode {\n  _callback;\n  _args;\n\n  constructor(args, jsFunction) {\n    invariant(\n      args.every(el => el instanceof AnimatedNode),\n      `Reanimated: Animated.call node args should be an array with elements of type AnimatedNode. One or more of them are not AnimatedNodes`\n    );\n    super({ type: 'call', input: args }, args);\n    this._callback = jsFunction;\n    this._args = args;\n  }\n\n  toString() {\n    return `AnimatedCall, id: ${this.__nodeID}`;\n  }\n\n  __attach() {\n    super.__attach();\n    NODE_MAPPING.set(this.__nodeID, this);\n    if (NODE_MAPPING.size === 1) {\n      ReanimatedEventEmitter.addListener('onReanimatedCall', listener);\n    }\n  }\n\n  __detach() {\n    NODE_MAPPING.delete(this.__nodeID);\n    if (NODE_MAPPING.size === 0) {\n      ReanimatedEventEmitter.removeAllListeners('onReanimatedCall');\n    }\n    super.__detach();\n  }\n\n  __onEvaluate() {\n    this._callback(this._args.map(val));\n    return 0;\n  }\n}\n\nexport function createAnimatedCall(args, func) {\n  return new AnimatedCall(args, func);\n}\n"]},"metadata":{},"sourceType":"module"}