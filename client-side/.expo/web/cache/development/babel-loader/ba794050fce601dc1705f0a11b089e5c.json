{"ast":null,"code":"import AnimatedNode from \"./AnimatedNode\";\nimport invariant from 'fbjs/lib/invariant';\nimport { val } from \"../val\";\n\nclass AnimatedAlways extends AnimatedNode {\n  constructor(what) {\n    invariant(what instanceof AnimatedNode, \"Reanimated: Animated.always node argument should be of type AnimatedNode but got \".concat(what));\n    super({\n      type: 'always',\n      what\n    }, [what]);\n    this._what = what;\n  }\n\n  toString() {\n    return \"AnimatedAlways, id: \".concat(this.__nodeID);\n  }\n\n  update() {\n    this.__getValue();\n  }\n\n  __onEvaluate() {\n    val(this._what);\n    return 0;\n  }\n\n}\n\nexport function createAnimatedAlways(item) {\n  return new AnimatedAlways(item);\n}","map":{"version":3,"sources":["/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/node_modules/react-native-reanimated/src/core/AnimatedAlways.js"],"names":["AnimatedNode","invariant","val","AnimatedAlways","constructor","what","type","_what","toString","__nodeID","update","__getValue","__onEvaluate","createAnimatedAlways","item"],"mappings":"AAAA,OAAOA,YAAP;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,SAASC,GAAT;;AAEA,MAAMC,cAAN,SAA6BH,YAA7B,CAA0C;AAGxCI,EAAAA,WAAW,CAACC,IAAD,EAAO;AAChBJ,IAAAA,SAAS,CACPI,IAAI,YAAYL,YADT,6FAE6EK,IAF7E,EAAT;AAIA,UAAM;AAAEC,MAAAA,IAAI,EAAE,QAAR;AAAkBD,MAAAA;AAAlB,KAAN,EAAgC,CAACA,IAAD,CAAhC;AACA,SAAKE,KAAL,GAAaF,IAAb;AACD;;AAEDG,EAAAA,QAAQ,GAAG;AACT,yCAA8B,KAAKC,QAAnC;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,SAAKC,UAAL;AACD;;AAEDC,EAAAA,YAAY,GAAG;AACbV,IAAAA,GAAG,CAAC,KAAKK,KAAN,CAAH;AACA,WAAO,CAAP;AACD;;AAvBuC;;AA0B1C,OAAO,SAASM,oBAAT,CAA8BC,IAA9B,EAAoC;AACzC,SAAO,IAAIX,cAAJ,CAAmBW,IAAnB,CAAP;AACD","sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport invariant from 'fbjs/lib/invariant';\nimport { val } from '../val';\n\nclass AnimatedAlways extends AnimatedNode {\n  _what;\n\n  constructor(what) {\n    invariant(\n      what instanceof AnimatedNode,\n      `Reanimated: Animated.always node argument should be of type AnimatedNode but got ${what}`\n    );\n    super({ type: 'always', what }, [what]);\n    this._what = what;\n  }\n\n  toString() {\n    return `AnimatedAlways, id: ${this.__nodeID}`;\n  }\n\n  update() {\n    this.__getValue();\n  }\n\n  __onEvaluate() {\n    val(this._what);\n    return 0;\n  }\n}\n\nexport function createAnimatedAlways(item) {\n  return new AnimatedAlways(item);\n}\n"]},"metadata":{},"sourceType":"module"}