{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\nimport TabBar from \"./TabBar\";\nimport SceneView from \"./SceneView\";\nimport Pager from \"./Pager\";\nvar GestureHandlerWrapper = GestureHandlerRootView !== null && GestureHandlerRootView !== void 0 ? GestureHandlerRootView : View;\nexport default class TabView extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"state\", {\n      layout: _objectSpread({\n        width: 0,\n        height: 0\n      }, this.props.initialLayout)\n    });\n\n    _defineProperty(this, \"jumpToIndex\", index => {\n      if (index !== this.props.navigationState.index) {\n        this.props.onIndexChange(index);\n      }\n    });\n\n    _defineProperty(this, \"handleLayout\", e => {\n      var {\n        height,\n        width\n      } = e.nativeEvent.layout;\n\n      if (this.state.layout.width === width && this.state.layout.height === height) {\n        return;\n      }\n\n      this.setState({\n        layout: {\n          height,\n          width\n        }\n      });\n    });\n  }\n\n  render() {\n    var {\n      position: positionListener,\n      onSwipeStart,\n      onSwipeEnd,\n      navigationState,\n      lazy,\n      lazyPreloadDistance,\n      removeClippedSubviews,\n      keyboardDismissMode,\n      swipeEnabled,\n      swipeVelocityImpact,\n      timingConfig,\n      springConfig,\n      tabBarPosition,\n      renderTabBar,\n      renderScene,\n      renderLazyPlaceholder,\n      sceneContainerStyle,\n      style,\n      gestureHandlerProps,\n      springVelocityScale,\n      renderPager\n    } = this.props;\n    var {\n      layout\n    } = this.state;\n    return React.createElement(GestureHandlerWrapper, {\n      onLayout: this.handleLayout,\n      style: [styles.pager, style]\n    }, renderPager({\n      navigationState,\n      layout,\n      keyboardDismissMode,\n      swipeEnabled,\n      swipeVelocityImpact,\n      timingConfig,\n      springConfig,\n      onSwipeStart,\n      onSwipeEnd,\n      onIndexChange: this.jumpToIndex,\n      springVelocityScale,\n      removeClippedSubviews,\n      gestureHandlerProps,\n      children: (_ref) => {\n        var {\n          position,\n          render,\n          addListener,\n          removeListener,\n          jumpTo\n        } = _ref;\n        var sceneRendererProps = {\n          position,\n          layout,\n          jumpTo\n        };\n        return React.createElement(React.Fragment, null, positionListener ? React.createElement(Animated.Code, {\n          exec: Animated.set(positionListener, position)\n        }) : null, tabBarPosition === 'top' && renderTabBar(_objectSpread(_objectSpread({}, sceneRendererProps), {}, {\n          navigationState\n        })), render(navigationState.routes.map((route, i) => {\n          return React.createElement(SceneView, _extends({}, sceneRendererProps, {\n            addListener: addListener,\n            removeListener: removeListener,\n            key: route.key,\n            index: i,\n            lazy: lazy,\n            lazyPreloadDistance: lazyPreloadDistance,\n            navigationState: navigationState,\n            style: sceneContainerStyle\n          }), (_ref2) => {\n            var {\n              loading\n            } = _ref2;\n            return loading ? renderLazyPlaceholder({\n              route\n            }) : renderScene(_objectSpread(_objectSpread({}, sceneRendererProps), {}, {\n              route\n            }));\n          });\n        })), tabBarPosition === 'bottom' && renderTabBar(_objectSpread(_objectSpread({}, sceneRendererProps), {}, {\n          navigationState\n        })));\n      }\n    }));\n  }\n\n}\n\n_defineProperty(TabView, \"defaultProps\", {\n  tabBarPosition: 'top',\n  renderTabBar: props => React.createElement(TabBar, props),\n  renderLazyPlaceholder: () => null,\n  keyboardDismissMode: 'auto',\n  swipeEnabled: true,\n  lazy: false,\n  lazyPreloadDistance: 0,\n  removeClippedSubviews: false,\n  springConfig: {},\n  timingConfig: {},\n  gestureHandlerProps: {},\n  renderPager: props => React.createElement(Pager, props)\n});\n\nvar styles = StyleSheet.create({\n  pager: {\n    flex: 1,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"sources":["TabView.tsx"],"names":["GestureHandlerWrapper","GestureHandlerRootView","TabView","React","tabBarPosition","renderTabBar","props","renderLazyPlaceholder","keyboardDismissMode","swipeEnabled","lazy","lazyPreloadDistance","removeClippedSubviews","springConfig","timingConfig","gestureHandlerProps","renderPager","layout","width","height","index","e","render","position","styles","onIndexChange","children","jumpTo","sceneRendererProps","positionListener","Animated","navigationState","route","sceneContainerStyle","loading","renderScene","pager","flex","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  View,\n  StyleProp,\n  ViewStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport {\n  PanGestureHandler,\n  GestureHandlerRootView,\n} from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\nimport TabBar, { Props as TabBarProps } from './TabBar';\nimport SceneView from './SceneView';\nimport {\n  Layout,\n  NavigationState,\n  Route,\n  SceneRendererProps,\n  PagerCommonProps,\n} from './types';\nimport Pager, { Props as ChildProps } from './Pager';\n\nexport type Props<T extends Route> = PagerCommonProps & {\n  position?: Animated.Value<number>;\n  onIndexChange: (index: number) => void;\n  navigationState: NavigationState<T>;\n  renderScene: (\n    props: SceneRendererProps & {\n      route: T;\n    }\n  ) => React.ReactNode;\n  renderLazyPlaceholder: (props: { route: T }) => React.ReactNode;\n  renderTabBar: (\n    props: SceneRendererProps & {\n      navigationState: NavigationState<T>;\n    }\n  ) => React.ReactNode;\n  tabBarPosition: 'top' | 'bottom';\n  initialLayout?: { width?: number; height?: number };\n  lazy: boolean;\n  lazyPreloadDistance: number;\n  removeClippedSubviews?: boolean;\n  sceneContainerStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  gestureHandlerProps: React.ComponentProps<typeof PanGestureHandler>;\n  renderPager: (props: ChildProps<T>) => React.ReactNode;\n};\n\ntype State = {\n  layout: Layout;\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\nexport default class TabView<T extends Route> extends React.Component<\n  Props<T>,\n  State\n> {\n  static defaultProps = {\n    tabBarPosition: 'top',\n    renderTabBar: <P extends Route>(props: TabBarProps<P>) => (\n      <TabBar {...props} />\n    ),\n    renderLazyPlaceholder: () => null,\n    keyboardDismissMode: 'auto',\n    swipeEnabled: true,\n    lazy: false,\n    lazyPreloadDistance: 0,\n    removeClippedSubviews: false,\n    springConfig: {},\n    timingConfig: {},\n    gestureHandlerProps: {},\n    renderPager: (props: ChildProps<any>) => <Pager {...props} />,\n  };\n\n  state = {\n    layout: { width: 0, height: 0, ...this.props.initialLayout },\n  };\n\n  private jumpToIndex = (index: number) => {\n    if (index !== this.props.navigationState.index) {\n      this.props.onIndexChange(index);\n    }\n  };\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    if (\n      this.state.layout.width === width &&\n      this.state.layout.height === height\n    ) {\n      return;\n    }\n\n    this.setState({\n      layout: {\n        height,\n        width,\n      },\n    });\n  };\n\n  render() {\n    const {\n      position: positionListener,\n      onSwipeStart,\n      onSwipeEnd,\n      navigationState,\n      lazy,\n      lazyPreloadDistance,\n      removeClippedSubviews,\n      keyboardDismissMode,\n      swipeEnabled,\n      swipeVelocityImpact,\n      timingConfig,\n      springConfig,\n      tabBarPosition,\n      renderTabBar,\n      renderScene,\n      renderLazyPlaceholder,\n      sceneContainerStyle,\n      style,\n      gestureHandlerProps,\n      springVelocityScale,\n      renderPager,\n    } = this.props;\n    const { layout } = this.state;\n\n    return (\n      <GestureHandlerWrapper\n        onLayout={this.handleLayout}\n        style={[styles.pager, style]}\n      >\n        {renderPager({\n          navigationState,\n          layout,\n          keyboardDismissMode,\n          swipeEnabled,\n          swipeVelocityImpact,\n          timingConfig,\n          springConfig,\n          onSwipeStart,\n          onSwipeEnd,\n          onIndexChange: this.jumpToIndex,\n          springVelocityScale,\n          removeClippedSubviews,\n          gestureHandlerProps,\n          children: ({\n            position,\n            render,\n            addListener,\n            removeListener,\n            jumpTo,\n          }) => {\n            // All of the props here must not change between re-renders\n            // This is crucial to optimizing the routes with PureComponent\n            const sceneRendererProps = {\n              position,\n              layout,\n              jumpTo,\n            };\n\n            return (\n              <React.Fragment>\n                {positionListener ? (\n                  <Animated.Code\n                    exec={Animated.set(positionListener, position)}\n                  />\n                ) : null}\n                {tabBarPosition === 'top' &&\n                  renderTabBar({\n                    ...sceneRendererProps,\n                    navigationState,\n                  })}\n                {render(\n                  navigationState.routes.map((route, i) => {\n                    return (\n                      <SceneView\n                        {...sceneRendererProps}\n                        addListener={addListener}\n                        removeListener={removeListener}\n                        key={route.key}\n                        index={i}\n                        lazy={lazy}\n                        lazyPreloadDistance={lazyPreloadDistance}\n                        navigationState={navigationState}\n                        style={sceneContainerStyle}\n                      >\n                        {({ loading }) =>\n                          loading\n                            ? renderLazyPlaceholder({ route })\n                            : renderScene({\n                                ...sceneRendererProps,\n                                route,\n                              })\n                        }\n                      </SceneView>\n                    );\n                  })\n                )}\n                {tabBarPosition === 'bottom' &&\n                  renderTabBar({\n                    ...sceneRendererProps,\n                    navigationState,\n                  })}\n              </React.Fragment>\n            );\n          },\n        })}\n      </GestureHandlerWrapper>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  pager: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}