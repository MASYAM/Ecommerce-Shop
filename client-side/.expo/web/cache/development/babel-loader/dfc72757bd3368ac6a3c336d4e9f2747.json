{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Animated, { Easing as OldEasing, EasingNode } from 'react-native-reanimated';\nimport memoize from \"./memoize\";\nvar Easing = EasingNode || OldEasing;\nvar {\n  multiply,\n  Extrapolate\n} = Animated;\nvar interpolate = Animated.interpolateNode || Animated.interpolate;\nexport default class TabBarIndicator extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"fadeInIndicator\", () => {\n      var {\n        navigationState,\n        layout,\n        width,\n        getTabWidth\n      } = this.props;\n\n      if (!this.isIndicatorShown && width === 'auto' && layout.width && navigationState.routes.every((_, i) => getTabWidth(i))) {\n        this.isIndicatorShown = true;\n        Animated.timing(this.opacity, {\n          duration: 150,\n          toValue: 1,\n          easing: Easing.in(Easing.linear)\n        }).start();\n      }\n    });\n\n    _defineProperty(this, \"isIndicatorShown\", false);\n\n    _defineProperty(this, \"opacity\", new Animated.Value(this.props.width === 'auto' ? 0 : 1));\n\n    _defineProperty(this, \"getTranslateX\", memoize((position, routes, getTabWidth) => {\n      var inputRange = routes.map((_, i) => i);\n      var outputRange = routes.reduce((acc, _, i) => {\n        if (i === 0) return [0];\n        return [...acc, acc[i - 1] + getTabWidth(i - 1)];\n      }, []);\n      var translateX = interpolate(position, {\n        inputRange,\n        outputRange,\n        extrapolate: Extrapolate.CLAMP\n      });\n      return multiply(translateX, I18nManager.isRTL ? -1 : 1);\n    }));\n\n    _defineProperty(this, \"getWidth\", memoize((position, routes, getTabWidth) => {\n      var inputRange = routes.map((_, i) => i);\n      var outputRange = inputRange.map(getTabWidth);\n      return interpolate(position, {\n        inputRange,\n        outputRange,\n        extrapolate: Extrapolate.CLAMP\n      });\n    }));\n  }\n\n  componentDidMount() {\n    this.fadeInIndicator();\n  }\n\n  componentDidUpdate() {\n    this.fadeInIndicator();\n  }\n\n  render() {\n    var {\n      position,\n      navigationState,\n      getTabWidth,\n      width,\n      style,\n      layout\n    } = this.props;\n    var {\n      routes\n    } = navigationState;\n    var translateX = routes.length > 1 ? this.getTranslateX(position, routes, getTabWidth) : 0;\n    var indicatorWidth = width === 'auto' ? routes.length > 1 ? this.getWidth(position, routes, getTabWidth) : getTabWidth(0) : width;\n    return React.createElement(Animated.View, {\n      style: [styles.indicator, {\n        width: indicatorWidth\n      }, layout.width ? {\n        transform: [{\n          translateX\n        }]\n      } : {\n        left: \"\".concat(100 / routes.length * navigationState.index, \"%\")\n      }, width === 'auto' ? {\n        opacity: this.opacity\n      } : null, style]\n    });\n  }\n\n}\nvar styles = StyleSheet.create({\n  indicator: {\n    backgroundColor: '#ffeb3b',\n    position: 'absolute',\n    left: 0,\n    bottom: 0,\n    right: 0,\n    height: 2\n  }\n});","map":{"version":3,"sources":["TabBarIndicator.tsx"],"names":["Easing","EasingNode","Extrapolate","interpolate","Animated","React","componentDidMount","componentDidUpdate","getTabWidth","width","layout","navigationState","duration","toValue","easing","memoize","inputRange","routes","outputRange","i","acc","translateX","extrapolate","CLAMP","multiply","I18nManager","render","indicatorWidth","styles","transform","left","opacity","indicator","backgroundColor","position","bottom","right","height"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, I18nManager, StyleProp, ViewStyle } from 'react-native';\nimport Animated, {\n  Easing as OldEasing,\n  // @ts-ignore\n  EasingNode,\n} from 'react-native-reanimated';\n\nimport memoize from './memoize';\nimport { Route, SceneRendererProps, NavigationState } from './types';\n\nconst Easing = EasingNode || OldEasing;\n\nexport type GetTabWidth = (index: number) => number;\n\nexport type Props<T extends Route> = SceneRendererProps & {\n  navigationState: NavigationState<T>;\n  width: string;\n  style?: StyleProp<ViewStyle>;\n  getTabWidth: GetTabWidth;\n};\n\nconst { multiply, Extrapolate } = Animated;\n\n// @ts-ignore\nconst interpolate = Animated.interpolateNode || Animated.interpolate;\n\nexport default class TabBarIndicator<T extends Route> extends React.Component<\n  Props<T>\n> {\n  componentDidMount() {\n    this.fadeInIndicator();\n  }\n\n  componentDidUpdate() {\n    this.fadeInIndicator();\n  }\n\n  private fadeInIndicator = () => {\n    const { navigationState, layout, width, getTabWidth } = this.props;\n\n    if (\n      !this.isIndicatorShown &&\n      width === 'auto' &&\n      layout.width &&\n      // We should fade-in the indicator when we have widths for all the tab items\n      navigationState.routes.every((_, i) => getTabWidth(i))\n    ) {\n      this.isIndicatorShown = true;\n\n      Animated.timing(this.opacity, {\n        duration: 150,\n        toValue: 1,\n        easing: Easing.in(Easing.linear),\n      }).start();\n    }\n  };\n\n  private isIndicatorShown = false;\n\n  private opacity = new Animated.Value(this.props.width === 'auto' ? 0 : 1);\n\n  private getTranslateX = memoize(\n    (\n      position: Animated.Node<number>,\n      routes: Route[],\n      getTabWidth: GetTabWidth\n    ) => {\n      const inputRange = routes.map((_, i) => i);\n\n      // every index contains widths at all previous indices\n      const outputRange = routes.reduce<number[]>((acc, _, i) => {\n        if (i === 0) return [0];\n        return [...acc, acc[i - 1] + getTabWidth(i - 1)];\n      }, []);\n\n      const translateX = interpolate(position, {\n        inputRange,\n        outputRange,\n        extrapolate: Extrapolate.CLAMP,\n      });\n\n      return multiply(translateX, I18nManager.isRTL ? -1 : 1);\n    }\n  );\n\n  private getWidth = memoize(\n    (\n      position: Animated.Node<number>,\n      routes: Route[],\n      getTabWidth: GetTabWidth\n    ) => {\n      const inputRange = routes.map((_, i) => i);\n      const outputRange = inputRange.map(getTabWidth);\n\n      return interpolate(position, {\n        inputRange,\n        outputRange,\n        extrapolate: Extrapolate.CLAMP,\n      });\n    }\n  );\n\n  render() {\n    const {\n      position,\n      navigationState,\n      getTabWidth,\n      width,\n      style,\n      layout,\n    } = this.props;\n    const { routes } = navigationState;\n\n    const translateX =\n      routes.length > 1 ? this.getTranslateX(position, routes, getTabWidth) : 0;\n\n    const indicatorWidth =\n      width === 'auto'\n        ? routes.length > 1\n          ? this.getWidth(position, routes, getTabWidth)\n          : getTabWidth(0)\n        : width;\n\n    return (\n      <Animated.View\n        style={[\n          styles.indicator,\n          // If layout is not available, use `left` property for positioning the indicator\n          // This avoids rendering delay until we are able to calculate translateX\n          { width: indicatorWidth },\n          layout.width\n            ? { transform: [{ translateX }] as any }\n            : { left: `${(100 / routes.length) * navigationState.index}%` },\n          width === 'auto' ? { opacity: this.opacity } : null,\n          style,\n        ]}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  indicator: {\n    backgroundColor: '#ffeb3b',\n    position: 'absolute',\n    left: 0,\n    bottom: 0,\n    right: 0,\n    height: 2,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}