{"ast":null,"code":"var _jsxFileName = \"/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/node_modules/react-native-map-clustering/lib/ClusteredMapView.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { memo, useState, useEffect, useMemo, createRef } from \"react\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport LayoutAnimation from \"react-native-web/dist/exports/LayoutAnimation\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport MapView, { Marker, Polyline } from \"react-native-maps\";\nimport SuperCluster from \"supercluster\";\nimport ClusterMarker from \"./ClusteredMarker\";\nimport { isMarker, markerToGeoJSONFeature, calculateBBox, returnMapZoom, generateSpiral } from \"./helpers\";\n\nvar ClusteredMapView = (_ref) => {\n  var {\n    radius,\n    maxZoom,\n    minZoom,\n    extent,\n    nodeSize,\n    children,\n    onClusterPress,\n    onRegionChangeComplete,\n    preserveClusterPressBehavior,\n    clusteringEnabled,\n    clusterColor,\n    clusterTextColor,\n    spiderLineColor,\n    layoutAnimationConf,\n    animationEnabled,\n    renderCluster\n  } = _ref,\n      restProps = _objectWithoutProperties(_ref, [\"radius\", \"maxZoom\", \"minZoom\", \"extent\", \"nodeSize\", \"children\", \"onClusterPress\", \"onRegionChangeComplete\", \"preserveClusterPressBehavior\", \"clusteringEnabled\", \"clusterColor\", \"clusterTextColor\", \"spiderLineColor\", \"layoutAnimationConf\", \"animationEnabled\", \"renderCluster\"]);\n\n  var [markers, updateMarkers] = useState([]);\n  var [spiderMarkers, updateSpiderMarker] = useState([]);\n  var [otherChildren, updateChildren] = useState([]);\n  var [superCluster, setSuperCluster] = useState(null);\n  var [currentRegion, updateRegion] = useState(restProps.region || restProps.initialRegion);\n  var [isSpiderfier, updateSpiderfier] = useState(false);\n  var [spiderfierMarker, updateSpiderfierMarker] = useState(null);\n  var [clusterChildren, updateClusterChildren] = useState(null);\n  var mapRef = createRef();\n  var propsChildren = useMemo(() => React.Children.toArray(children), [children]);\n  useEffect(() => {\n    var rawData = [];\n    var otherChildren = [];\n\n    if (!clusteringEnabled) {\n      updateChildren(propsChildren);\n      return;\n    }\n\n    React.Children.forEach(children, (child, i) => {\n      if (isMarker(child)) {\n        rawData.push(markerToGeoJSONFeature(child, i));\n      } else {\n        otherChildren.push(child);\n      }\n    });\n    var superCluster = new SuperCluster({\n      radius,\n      maxZoom,\n      minZoom,\n      extent,\n      nodeSize\n    });\n    superCluster.load(rawData);\n    var bBox = calculateBBox(currentRegion);\n    var zoom = returnMapZoom(currentRegion, bBox, minZoom);\n    var markers = superCluster.getClusters(bBox, zoom);\n    updateMarkers(markers);\n    updateChildren(otherChildren);\n    setSuperCluster(superCluster);\n  }, [children, restProps.region, restProps.initialRegion]);\n  useEffect(() => {\n    if (isSpiderfier && markers.length > 0) {\n      var positions = generateSpiral(markers[0].properties.point_count, markers[0].geometry.coordinates, clusterChildren);\n      updateSpiderMarker(positions);\n      updateSpiderfierMarker({\n        latitude: markers[0].geometry.coordinates[1],\n        longitude: markers[0].geometry.coordinates[0]\n      });\n    } else {\n      updateSpiderMarker([]);\n    }\n  }, [isSpiderfier]);\n\n  var _onRegionChangeComplete = region => {\n    if (superCluster) {\n      var bBox = calculateBBox(region);\n      var zoom = returnMapZoom(region, bBox, minZoom);\n\n      var _markers = superCluster.getClusters(bBox, zoom);\n\n      if (animationEnabled && Platform.OS === \"ios\") {\n        LayoutAnimation.configureNext(layoutAnimationConf);\n      }\n\n      if (zoom >= 17 && _markers.length === 1 && clusterChildren) {\n        updateSpiderfier(true);\n      } else {\n        updateSpiderfier(false);\n      }\n\n      updateMarkers(_markers);\n      onRegionChangeComplete(region, _markers);\n      updateRegion(region);\n    }\n  };\n\n  var _onClusterPress = cluster => () => {\n    var children = superCluster.getLeaves(cluster.id, limit = Infinity);\n    updateClusterChildren(children);\n\n    if (preserveClusterPressBehavior) {\n      onClusterPress(cluster, children);\n      return;\n    }\n\n    var coordinates = children.map((_ref2) => {\n      var {\n        geometry\n      } = _ref2;\n      return {\n        latitude: geometry.coordinates[1],\n        longitude: geometry.coordinates[0]\n      };\n    });\n    mapRef.current.fitToCoordinates(coordinates, {\n      edgePadding: restProps.edgePadding\n    });\n    onClusterPress(cluster, children);\n  };\n\n  return React.createElement(MapView, _extends({}, restProps, {\n    ref: map => {\n      restProps.mapRef(map);\n      mapRef.current = map;\n    },\n    onRegionChangeComplete: _onRegionChangeComplete,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 5\n    }\n  }), markers.map(marker => marker.properties.point_count === 0 ? propsChildren[marker.properties.index] : !isSpiderfier ? renderCluster ? renderCluster(_objectSpread({\n    onPress: _onClusterPress(marker),\n    clusterColor,\n    clusterTextColor\n  }, marker)) : React.createElement(ClusterMarker, _extends({\n    key: \"cluster-\".concat(marker.id)\n  }, marker, {\n    onPress: _onClusterPress(marker),\n    clusterColor: clusterColor,\n    clusterTextColor: clusterTextColor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  })) : null), otherChildren, spiderMarkers.map(marker => React.createElement(Marker, {\n    key: marker.latitude,\n    coordinate: marker,\n    image: marker.image,\n    onPress: marker.onPress,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }\n  })), spiderMarkers.map((marker, index) => {\n    {\n      return spiderfierMarker && React.createElement(Polyline, {\n        key: index,\n        coordinates: [spiderfierMarker, marker, spiderfierMarker],\n        strokeColor: spiderLineColor,\n        strokeWidth: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 15\n        }\n      });\n    }\n  }));\n};\n\nClusteredMapView.defaultProps = {\n  clusteringEnabled: true,\n  animationEnabled: true,\n  preserveClusterPressBehavior: false,\n  layoutAnimationConf: LayoutAnimation.Presets.spring,\n  radius: Dimensions.get(\"window\").width * 0.06,\n  maxZoom: 20,\n  minZoom: 1,\n  extent: 512,\n  nodeSize: 64,\n  edgePadding: {\n    top: 50,\n    left: 50,\n    right: 50,\n    bottom: 50\n  },\n  clusterColor: \"#00B386\",\n  clusterTextColor: \"#FFFFFF\",\n  spiderLineColor: \"#FF0000\",\n  onRegionChangeComplete: () => {},\n  onClusterPress: () => {},\n  mapRef: () => {}\n};\nexport default memo(ClusteredMapView);","map":{"version":3,"sources":["/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/node_modules/react-native-map-clustering/lib/ClusteredMapView.js"],"names":["React","memo","useState","useEffect","useMemo","createRef","MapView","Marker","Polyline","SuperCluster","ClusterMarker","isMarker","markerToGeoJSONFeature","calculateBBox","returnMapZoom","generateSpiral","ClusteredMapView","radius","maxZoom","minZoom","extent","nodeSize","children","onClusterPress","onRegionChangeComplete","preserveClusterPressBehavior","clusteringEnabled","clusterColor","clusterTextColor","spiderLineColor","layoutAnimationConf","animationEnabled","renderCluster","restProps","markers","updateMarkers","spiderMarkers","updateSpiderMarker","otherChildren","updateChildren","superCluster","setSuperCluster","currentRegion","updateRegion","region","initialRegion","isSpiderfier","updateSpiderfier","spiderfierMarker","updateSpiderfierMarker","clusterChildren","updateClusterChildren","mapRef","propsChildren","Children","toArray","rawData","forEach","child","i","push","load","bBox","zoom","getClusters","length","positions","properties","point_count","geometry","coordinates","latitude","longitude","_onRegionChangeComplete","Platform","OS","LayoutAnimation","configureNext","_onClusterPress","cluster","getLeaves","id","limit","Infinity","map","current","fitToCoordinates","edgePadding","marker","index","onPress","image","defaultProps","Presets","spring","Dimensions","get","width","top","left","right","bottom"],"mappings":"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","sourcesContent":["import React, { memo, useState, useEffect, useMemo, createRef } from \"react\";\nimport { Dimensions, LayoutAnimation, Platform } from \"react-native\";\nimport MapView, { Marker, Polyline } from \"react-native-maps\";\nimport SuperCluster from \"supercluster\";\nimport ClusterMarker from \"./ClusteredMarker\";\nimport {\n  isMarker,\n  markerToGeoJSONFeature,\n  calculateBBox,\n  returnMapZoom,\n  generateSpiral\n} from \"./helpers\";\n\nconst ClusteredMapView = ({\n  radius,\n  maxZoom,\n  minZoom,\n  extent,\n  nodeSize,\n  children,\n  onClusterPress,\n  onRegionChangeComplete,\n  preserveClusterPressBehavior,\n  clusteringEnabled,\n  clusterColor,\n  clusterTextColor,\n  spiderLineColor,\n  layoutAnimationConf,\n  animationEnabled,\n  renderCluster,\n  ...restProps\n}) => {\n  const [markers, updateMarkers] = useState([]);\n  const [spiderMarkers, updateSpiderMarker] = useState([]);\n  const [otherChildren, updateChildren] = useState([]);\n  const [superCluster, setSuperCluster] = useState(null);\n  const [currentRegion, updateRegion] = useState(\n    restProps.region || restProps.initialRegion\n  );\n\n  const [isSpiderfier, updateSpiderfier] = useState(false);\n  const [spiderfierMarker, updateSpiderfierMarker] = useState(null);\n  const [clusterChildren, updateClusterChildren] = useState(null);\n  const mapRef = createRef();\n\n  const propsChildren = useMemo(() => React.Children.toArray(children), [\n    children\n  ]);\n\n  useEffect(() => {\n    const rawData = [];\n    const otherChildren = [];\n\n    if (!clusteringEnabled) {\n      updateChildren(propsChildren);\n      return;\n    }\n\n    React.Children.forEach(children, (child, i) => {\n      if (isMarker(child)) {\n        rawData.push(markerToGeoJSONFeature(child, i));\n      } else {\n        otherChildren.push(child);\n      }\n    });\n\n    const superCluster = new SuperCluster({\n      radius,\n      maxZoom,\n      minZoom,\n      extent,\n      nodeSize\n    });\n\n    superCluster.load(rawData);\n\n    const bBox = calculateBBox(currentRegion);\n    const zoom = returnMapZoom(currentRegion, bBox, minZoom);\n    const markers = superCluster.getClusters(bBox, zoom);\n\n    updateMarkers(markers);\n    updateChildren(otherChildren);\n    setSuperCluster(superCluster);\n  }, [children, restProps.region, restProps.initialRegion]);\n\n  useEffect(() => {\n    if (isSpiderfier && markers.length > 0) {\n      let positions = generateSpiral(\n        markers[0].properties.point_count,\n        markers[0].geometry.coordinates,\n        clusterChildren\n      );\n      updateSpiderMarker(positions);\n      updateSpiderfierMarker({\n        latitude: markers[0].geometry.coordinates[1],\n        longitude: markers[0].geometry.coordinates[0]\n      });\n    } else {\n      updateSpiderMarker([]);\n    }\n  }, [isSpiderfier]);\n\n  const _onRegionChangeComplete = region => {\n    if (superCluster) {\n      const bBox = calculateBBox(region);\n      const zoom = returnMapZoom(region, bBox, minZoom);\n      const markers = superCluster.getClusters(bBox, zoom);\n\n      if (animationEnabled && Platform.OS === \"ios\") {\n        LayoutAnimation.configureNext(layoutAnimationConf);\n      }\n\n      if (zoom >= 17 && markers.length === 1 && clusterChildren) {\n        updateSpiderfier(true);\n      } else {\n        updateSpiderfier(false);\n      }\n\n      updateMarkers(markers);\n      onRegionChangeComplete(region, markers);\n      updateRegion(region);\n    }\n  };\n\n  const _onClusterPress = cluster => () => {\n    const children = superCluster.getLeaves(cluster.id, (limit = Infinity));\n    updateClusterChildren(children);\n\n    if (preserveClusterPressBehavior) {\n      onClusterPress(cluster, children);\n      return;\n    }\n\n    const coordinates = children.map(({ geometry }) => ({\n      latitude: geometry.coordinates[1],\n      longitude: geometry.coordinates[0]\n    }));\n\n    mapRef.current.fitToCoordinates(coordinates, {\n      edgePadding: restProps.edgePadding\n    });\n\n    onClusterPress(cluster, children);\n  };\n\n  return (\n    <MapView\n      {...restProps}\n      ref={map => {\n        restProps.mapRef(map);\n        mapRef.current = map;\n      }}\n      onRegionChangeComplete={_onRegionChangeComplete}\n    >\n      {markers.map(marker =>\n        marker.properties.point_count === 0 ? (\n          propsChildren[marker.properties.index]\n        ) : !isSpiderfier ? (\n          renderCluster ? (\n            renderCluster({\n              onPress: _onClusterPress(marker),\n              clusterColor,\n              clusterTextColor,\n              ...marker\n            })\n          ) : (\n            <ClusterMarker\n              key={`cluster-${marker.id}`}\n              {...marker}\n              onPress={_onClusterPress(marker)}\n              clusterColor={clusterColor}\n              clusterTextColor={clusterTextColor}\n            />\n          )\n        ) : null\n      )}\n      {otherChildren}\n      {spiderMarkers.map(marker => (\n        <Marker\n          key={marker.latitude}\n          coordinate={marker}\n          image={marker.image}\n          onPress={marker.onPress}\n        ></Marker>\n      ))}\n      {spiderMarkers.map((marker, index) => {\n        {\n          return (\n            spiderfierMarker && (\n              <Polyline\n                key={index}\n                coordinates={[spiderfierMarker, marker, spiderfierMarker]}\n                strokeColor={spiderLineColor}\n                strokeWidth={1}\n              />\n            )\n          );\n        }\n      })}\n    </MapView>\n  );\n};\n\nClusteredMapView.defaultProps = {\n  clusteringEnabled: true,\n  animationEnabled: true,\n  preserveClusterPressBehavior: false,\n  layoutAnimationConf: LayoutAnimation.Presets.spring,\n  // SuperCluster parameters\n  radius: Dimensions.get(\"window\").width * 0.06,\n  maxZoom: 20,\n  minZoom: 1,\n  extent: 512,\n  nodeSize: 64,\n  // Map parameters\n  edgePadding: { top: 50, left: 50, right: 50, bottom: 50 },\n  // Cluster styles\n  clusterColor: \"#00B386\",\n  clusterTextColor: \"#FFFFFF\",\n  spiderLineColor: \"#FF0000\",\n  // Callbacks\n  onRegionChangeComplete: () => {},\n  onClusterPress: () => {},\n  mapRef: () => {}\n};\n\nexport default memo(ClusteredMapView);\n"]},"metadata":{},"sourceType":"module"}