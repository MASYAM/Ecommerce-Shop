{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nexport default ((Navigator, navigatorConfig) => {\n  var _class, _temp;\n\n  return _temp = _class = class KeyboardAwareNavigator extends React.Component {\n    constructor() {\n      super(...arguments);\n\n      _defineProperty(this, \"_previouslyFocusedTextInput\", null);\n\n      _defineProperty(this, \"_handleGestureBegin\", () => {\n        this._previouslyFocusedTextInput = TextInput.State.currentlyFocusedInput ? TextInput.State.currentlyFocusedInput() : TextInput.State.currentlyFocusedField();\n\n        if (this._previouslyFocusedTextInput) {\n          TextInput.State.blurTextInput(this._previouslyFocusedTextInput);\n        }\n\n        this.props.onGestureBegin && this.props.onGestureBegin();\n      });\n\n      _defineProperty(this, \"_handleGestureCanceled\", () => {\n        if (this._previouslyFocusedTextInput) {\n          TextInput.State.focusTextInput(this._previouslyFocusedTextInput);\n        }\n\n        this.props.onGestureCanceled && this.props.onGestureCanceled();\n      });\n\n      _defineProperty(this, \"_handleGestureEnd\", () => {\n        this._previouslyFocusedTextInput = null;\n        this.props.onGestureFinish && this.props.onGestureFinish();\n      });\n\n      _defineProperty(this, \"_handleTransitionStart\", (transitionProps, prevTransitionProps) => {\n        if (transitionProps.index !== prevTransitionProps.index) {\n          var currentField = TextInput.State.currentlyFocusedInput ? TextInput.State.currentlyFocusedInput() : TextInput.State.currentlyFocusedField();\n\n          if (currentField) {\n            TextInput.State.blurTextInput(currentField);\n          }\n        }\n\n        var onTransitionStart = this.props.onTransitionStart || navigatorConfig.onTransitionStart;\n        onTransitionStart && onTransitionStart(transitionProps, prevTransitionProps);\n      });\n    }\n\n    render() {\n      return React.createElement(Navigator, _extends({}, this.props, {\n        onGestureBegin: this._handleGestureBegin,\n        onGestureCanceled: this._handleGestureCanceled,\n        onGestureEnd: this._handleGestureEnd,\n        onTransitionStart: this._handleTransitionStart\n      }));\n    }\n\n  }, _defineProperty(_class, \"router\", Navigator.router), _defineProperty(_class, \"navigationOptions\", Navigator.navigationOptions), _temp;\n});","map":{"version":3,"sources":["createKeyboardAwareNavigator.js"],"names":["React","Navigator","TextInput","transitionProps","prevTransitionProps","currentField","onTransitionStart","navigatorConfig","render","_handleTransitionStart"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;AAGA,gBAAe,CAAA,SAAA,EAAA,eAAA,KAAA;AAAA,MAAA,MAAA,EAAA,KAAA;;AAAA,SAAA,KAAA,GAAA,MAAA,GACb,MAAA,sBAAA,SAAqCA,KAAK,CAA1C,SAAA,CAAqD;AAAA,IAAA,WAAA,GAAA;AAAA,YAAA,YAAA;;AAAA,MAAA,eAAA,CAAA,IAAA,EAAA,6BAAA,EAAA,IAAA,CAAA;;AAAA,MAAA,eAAA,CAAA,IAAA,EAAA,qBAAA,EAK7B,MAAM;AAC1B,aAAA,2BAAA,GAAmCE,SAAS,CAATA,KAAAA,CAAAA,qBAAAA,GAC/BA,SAAS,CAATA,KAAAA,CAD+BA,qBAC/BA,EAD+BA,GAE/BA,SAAS,CAATA,KAAAA,CAFJ,qBAEIA,EAFJ;;AAGA,YAAI,KAAJ,2BAAA,EAAsC;AACpCA,UAAAA,SAAS,CAATA,KAAAA,CAAAA,aAAAA,CAA8B,KAA9BA,2BAAAA;AACD;;AACD,aAAA,KAAA,CAAA,cAAA,IAA6B,KAAA,KAAA,CAA7B,cAA6B,EAA7B;AAZiD,OAAA,CAAA;;AAAA,MAAA,eAAA,CAAA,IAAA,EAAA,wBAAA,EAe1B,MAAM;AAC7B,YAAI,KAAJ,2BAAA,EAAsC;AACpCA,UAAAA,SAAS,CAATA,KAAAA,CAAAA,cAAAA,CAA+B,KAA/BA,2BAAAA;AACD;;AACD,aAAA,KAAA,CAAA,iBAAA,IAAgC,KAAA,KAAA,CAAhC,iBAAgC,EAAhC;AAnBiD,OAAA,CAAA;;AAAA,MAAA,eAAA,CAAA,IAAA,EAAA,mBAAA,EAsB/B,MAAM;AACxB,aAAA,2BAAA,GAAA,IAAA;AACA,aAAA,KAAA,CAAA,eAAA,IAA8B,KAAA,KAAA,CAA9B,eAA8B,EAA9B;AAxBiD,OAAA,CAAA;;AAAA,MAAA,eAAA,CAAA,IAAA,EAAA,wBAAA,EA2B1B,CAAA,eAAA,EAAA,mBAAA,KAA0C;AAIjE,YAAIC,eAAe,CAAfA,KAAAA,KAA0BC,mBAAmB,CAAjD,KAAA,EAAyD;AACvD,cAAMC,YAAY,GAAGH,SAAS,CAATA,KAAAA,CAAAA,qBAAAA,GACjBA,SAAS,CAATA,KAAAA,CADiBA,qBACjBA,EADiBA,GAEjBA,SAAS,CAATA,KAAAA,CAFJ,qBAEIA,EAFJ;;AAGA,cAAA,YAAA,EAAkB;AAChBA,YAAAA,SAAS,CAATA,KAAAA,CAAAA,aAAAA,CAAAA,YAAAA;AACD;AACF;;AAED,YAAMI,iBAAiB,GACrB,KAAA,KAAA,CAAA,iBAAA,IAAgCC,eAAe,CADjD,iBAAA;AAEAD,QAAAA,iBAAiB,IACfA,iBAAiB,CAAA,eAAA,EADnBA,mBACmB,CADnBA;AA1CiD,OAAA,CAAA;AAAA;;AA8CnDE,IAAAA,MAAM,GAAG;AACP,aACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA,EAAA,EACM,KADN,KAAA,EAAA;AAEE,QAAA,cAAc,EAAE,KAFlB,mBAAA;AAGE,QAAA,iBAAiB,EAAE,KAHrB,sBAAA;AAIE,QAAA,YAAY,EAAE,KAJhB,iBAAA;AAKE,QAAA,iBAAiB,EAAE,KAAKC;AAL1B,OAAA,CAAA,CADF;AASD;;AAxDkD,GADxC,EAAA,eAAA,CAAA,MAAA,EAAA,QAAA,EAEKR,SAAS,CAFd,MAAA,CAAA,EAAA,eAAA,CAAA,MAAA,EAAA,mBAAA,EAGgBA,SAAS,CAHzB,iBAAA,CAAA,EAAA,KAAA;AAAf,CAAA","sourcesContent":["import * as React from 'react';\nimport { TextInput } from 'react-native';\n\nexport default (Navigator, navigatorConfig) =>\n  class KeyboardAwareNavigator extends React.Component {\n    static router = Navigator.router;\n    static navigationOptions = Navigator.navigationOptions;\n    _previouslyFocusedTextInput = null;\n\n    _handleGestureBegin = () => {\n      this._previouslyFocusedTextInput = TextInput.State.currentlyFocusedInput\n        ? TextInput.State.currentlyFocusedInput()\n        : TextInput.State.currentlyFocusedField();\n      if (this._previouslyFocusedTextInput) {\n        TextInput.State.blurTextInput(this._previouslyFocusedTextInput);\n      }\n      this.props.onGestureBegin && this.props.onGestureBegin();\n    };\n\n    _handleGestureCanceled = () => {\n      if (this._previouslyFocusedTextInput) {\n        TextInput.State.focusTextInput(this._previouslyFocusedTextInput);\n      }\n      this.props.onGestureCanceled && this.props.onGestureCanceled();\n    };\n\n    _handleGestureEnd = () => {\n      this._previouslyFocusedTextInput = null;\n      this.props.onGestureFinish && this.props.onGestureFinish();\n    };\n\n    _handleTransitionStart = (transitionProps, prevTransitionProps) => {\n      // TODO: We should not even have received the transition start event\n      // in the case where the index did not change, I believe. We\n      // should revisit this after 2.0 release.\n      if (transitionProps.index !== prevTransitionProps.index) {\n        const currentField = TextInput.State.currentlyFocusedInput\n          ? TextInput.State.currentlyFocusedInput()\n          : TextInput.State.currentlyFocusedField();\n        if (currentField) {\n          TextInput.State.blurTextInput(currentField);\n        }\n      }\n\n      const onTransitionStart =\n        this.props.onTransitionStart || navigatorConfig.onTransitionStart;\n      onTransitionStart &&\n        onTransitionStart(transitionProps, prevTransitionProps);\n    };\n\n    render() {\n      return (\n        <Navigator\n          {...this.props}\n          onGestureBegin={this._handleGestureBegin}\n          onGestureCanceled={this._handleGestureCanceled}\n          onGestureEnd={this._handleGestureEnd}\n          onTransitionStart={this._handleTransitionStart}\n        />\n      );\n    }\n  };\n"]},"metadata":{},"sourceType":"module"}