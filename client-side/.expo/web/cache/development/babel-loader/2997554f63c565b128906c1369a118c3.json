{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport { Actions } from 'react-native-router-flux';\nimport { ActionStatusTypeValues } from \"../../constants/actionStatusTypes\";\nimport { EnvValues } from \"../../constants\";\nexport var INBOX_LIST = 'INBOX_LIST';\nexport var INBOX_DETAIL = 'INBOX_DETAIL';\nvar timer;\nexport var authenticate = (userId, token) => {\n  return dispatch => {\n    dispatch({\n      type: AUTHENTICATE,\n      token: token\n    });\n  };\n};\nexport var getInboxMessageList = viewId => {\n  return function () {\n    var _ref = _asyncToGenerator(function* (dispatch, getState) {\n      dispatch({\n        type: INBOX_LIST,\n        status: ActionStatusTypeValues.STARTED,\n        viewId,\n        payload: {}\n      });\n      var token = getState().auth.token;\n\n      if (!token) {\n        console.warn(\"Missing required parameters.\", {\n          token\n        });\n        dispatch({\n          type: INBOX_LIST,\n          status: ActionStatusTypeValues.ERROR,\n          viewId,\n          payload: {\n            error: new Error(\"Missing required parameters.\"),\n            token\n          }\n        });\n        return;\n      }\n\n      var finalURL = EnvValues.API_PATH + 'inbox/list';\n      var resData = null;\n      var response = null;\n\n      try {\n        response = yield fetch(finalURL, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            'token': token\n          })\n        });\n        resData = yield response.json();\n      } catch (error) {\n        dispatch({\n          type: INBOX_LIST,\n          status: ActionStatusTypeValues.ERROR,\n          viewId,\n          payload: {\n            token,\n            error: resData\n          }\n        });\n        return;\n      }\n\n      if (!response.ok) {\n        dispatch({\n          type: INBOX_LIST,\n          status: ActionStatusTypeValues.ERROR,\n          viewId,\n          payload: {\n            token,\n            error: resData\n          }\n        });\n        return;\n      }\n\n      dispatch({\n        type: INBOX_LIST,\n        viewId,\n        status: ActionStatusTypeValues.COMPLETED,\n        payload: {},\n        inboxlist: resData.result.inboxlist,\n        inboxListStatus: resData.result.status,\n        inboxListErrorMessage: resData.result.error\n      });\n    });\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var getInboxDetail = (viewId, id) => {\n  return function () {\n    var _ref2 = _asyncToGenerator(function* (dispatch, getState) {\n      dispatch({\n        type: INBOX_DETAIL,\n        status: ActionStatusTypeValues.STARTED,\n        viewId,\n        payload: {}\n      });\n      var token = getState().auth.token;\n\n      if (!token) {\n        console.warn(\"Missing required parameters.\", {\n          token\n        });\n        dispatch({\n          type: INBOX_DETAIL,\n          status: ActionStatusTypeValues.ERROR,\n          viewId,\n          payload: {\n            error: new Error(\"Missing required parameters.\"),\n            token\n          }\n        });\n        return;\n      }\n\n      var finalURL = EnvValues.API_PATH + 'inbox/detail/' + id;\n      var resData = null;\n      var response = null;\n\n      try {\n        response = yield fetch(finalURL, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            'token': token\n          })\n        });\n        resData = yield response.json();\n      } catch (error) {\n        dispatch({\n          type: INBOX_DETAIL,\n          status: ActionStatusTypeValues.ERROR,\n          viewId,\n          payload: {\n            token,\n            error: resData\n          }\n        });\n        return;\n      }\n\n      if (!response.ok) {\n        dispatch({\n          type: INBOX_DETAIL,\n          status: ActionStatusTypeValues.ERROR,\n          viewId,\n          payload: {\n            token,\n            error: resData\n          }\n        });\n        return;\n      }\n\n      dispatch({\n        type: INBOX_DETAIL,\n        viewId,\n        status: ActionStatusTypeValues.COMPLETED,\n        payload: {},\n        inboxDetail: resData.result.inboxDetail,\n        inboxDetailStatus: resData.result.status,\n        inboxDetailErrorMessage: resData.result.error\n      });\n    });\n\n    return function (_x3, _x4) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/src/store/actions/inbox.js"],"names":["Actions","ActionStatusTypeValues","EnvValues","INBOX_LIST","INBOX_DETAIL","timer","authenticate","userId","token","dispatch","type","AUTHENTICATE","getInboxMessageList","viewId","getState","status","STARTED","payload","auth","console","warn","ERROR","error","Error","finalURL","API_PATH","resData","response","fetch","method","headers","body","JSON","stringify","json","ok","COMPLETED","inboxlist","result","inboxListStatus","inboxListErrorMessage","getInboxDetail","id","inboxDetail","inboxDetailStatus","inboxDetailErrorMessage"],"mappings":"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","sourcesContent":["import { AsyncStorage } from 'react-native';\nimport { Actions  } from 'react-native-router-flux';\nimport { ActionStatusTypeValues } from '../../constants/actionStatusTypes';\nimport { EnvValues } from '../../constants';\n// export const SIGNUP = 'SIGNUP';\n// export const LOGIN = 'LOGIN';\n\nexport const INBOX_LIST = 'INBOX_LIST';\nexport const INBOX_DETAIL = 'INBOX_DETAIL';\n\n\nlet timer;\n\nexport const authenticate = (userId, token) => {\n  return dispatch => {\n    dispatch({ type: AUTHENTICATE, token: token });\n  };\n};\n\n\nexport const getInboxMessageList = (viewId) => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: INBOX_LIST,\n      status: ActionStatusTypeValues.STARTED,\n      viewId,\n      payload: {}\n    });\n    const token = getState().auth.token;\n    if ( !token) {\n      console.warn(\"Missing required parameters.\" , {token});\n      dispatch({\n        type: INBOX_LIST,\n        status: ActionStatusTypeValues.ERROR,\n        viewId,\n        payload: {error: new Error(\"Missing required parameters.\"), token}\n      });\n      return;\n    }\n    const finalURL = EnvValues.API_PATH + 'inbox/list';\n    let resData = null;\n    let response = null;\n    try {\n            response = await  fetch(finalURL,\n            {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  'token':token\n                })\n              }\n            );\n      resData = await response.json();\n    } catch (error ) {\n          dispatch({\n            type: INBOX_LIST,\n            status: ActionStatusTypeValues.ERROR,\n            viewId,\n            payload: {token, error: resData}\n          });\n          return;\n    }\n    if (!response.ok) {\n      dispatch({\n        type: INBOX_LIST,\n        status: ActionStatusTypeValues.ERROR,\n        viewId,\n        payload: {token, error: resData}\n      });\n      return;\n    }\n    dispatch({ \n      type: INBOX_LIST, \n      viewId,\n      status: ActionStatusTypeValues.COMPLETED, \n      payload: { },\n      inboxlist: resData.result.inboxlist,\n      inboxListStatus: resData.result.status,\n      inboxListErrorMessage: resData.result.error\n    });\n  };\n};\n\n\n\n\n\n\n\nexport const getInboxDetail = (viewId, id) => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: INBOX_DETAIL,\n      status: ActionStatusTypeValues.STARTED,\n      viewId,\n      payload: {}\n    });\n    const token = getState().auth.token;\n    if ( !token) {\n      console.warn(\"Missing required parameters.\" , {token});\n      dispatch({\n        type: INBOX_DETAIL,\n        status: ActionStatusTypeValues.ERROR,\n        viewId,\n        payload: {error: new Error(\"Missing required parameters.\"), token}\n      });\n      return;\n    }\n    const finalURL = EnvValues.API_PATH + 'inbox/detail/'+id;\n    let resData = null;\n    let response = null;\n    try {\n            response = await  fetch(finalURL,\n            {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  'token':token\n                })\n              }\n            );\n      resData = await response.json();\n    } catch (error ) {\n          dispatch({\n            type: INBOX_DETAIL,\n            status: ActionStatusTypeValues.ERROR,\n            viewId,\n            payload: {token, error: resData}\n          });\n          return;\n    }\n    if (!response.ok) {\n      dispatch({\n        type: INBOX_DETAIL,\n        status: ActionStatusTypeValues.ERROR,\n        viewId,\n        payload: {token, error: resData}\n      });\n      return;\n    }\n    dispatch({ \n      type: INBOX_DETAIL, \n      viewId,\n      status: ActionStatusTypeValues.COMPLETED, \n      payload: { },\n      inboxDetail: resData.result.inboxDetail,\n      inboxDetailStatus: resData.result.status,\n      inboxDetailErrorMessage: resData.result.error\n    });\n  };\n};"]},"metadata":{},"sourceType":"module"}