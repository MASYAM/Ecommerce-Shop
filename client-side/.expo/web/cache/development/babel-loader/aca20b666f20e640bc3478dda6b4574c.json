{"ast":null,"code":"var _jsxFileName = \"/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/node_modules/react-native-screens/src/screens.web.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport debounce from 'debounce';\nimport React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nvar _shouldEnableScreens = true;\nexport function enableScreens() {\n  var shouldEnableScreens = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n  if (shouldEnableScreens) {\n    console.warn('react-native-screens is not fully supported on this platform yet.');\n  }\n\n  _shouldEnableScreens = shouldEnableScreens;\n}\nexport function screensEnabled() {\n  return _shouldEnableScreens;\n}\n\nfunction isAnimatedValue(value) {\n  return value && value.__getValue && value.addListener;\n}\n\nfunction isPropTruthy(prop) {\n  var activeValue = prop;\n\n  if (isAnimatedValue(prop)) {\n    activeValue = prop.__getValue();\n  }\n\n  return !!activeValue;\n}\n\nexport class Screen extends React.Component {\n  constructor(props) {\n    super(props);\n    this.listenerId = null;\n\n    this._addListener = possibleListener => {\n      if (this.listenerId) throw new Error('Screen: Attempting to observe an animated value while another value is already observed.');\n\n      if (isAnimatedValue(possibleListener)) {\n        this.listenerId = possibleListener.addListener(this._onAnimatedValueUpdated);\n      }\n    };\n\n    this._removeListener = possibleListener => {\n      if (isAnimatedValue(possibleListener)) {\n        possibleListener.removeListener(this.listenerId);\n        this.listenerId = null;\n      }\n    };\n\n    this._onAnimatedValueUpdated = (_ref) => {\n      var {\n        value\n      } = _ref;\n\n      this._updateDisplay(!!value);\n    };\n\n    this._updateDisplay = isActive => {\n      if (isActive === undefined) {\n        isActive = isPropTruthy(this.props.active);\n      }\n\n      var display = isActive ? 'flex' : 'none';\n      this.setNativeProps({\n        style: {\n          display\n        }\n      });\n    };\n\n    this.setNativeProps = nativeProps => {\n      if (this._view) {\n        this._view.setNativeProps(nativeProps);\n      }\n    };\n\n    this._setRef = view => {\n      this._view = view;\n\n      this._updateDisplay();\n    };\n\n    this._onAnimatedValueUpdated = debounce(this._onAnimatedValueUpdated, 10);\n\n    this._addListener(props.active);\n  }\n\n  componentWillUnmount() {\n    this._removeListener(this.props.active);\n  }\n\n  shouldComponentUpdate(_ref2) {\n    var {\n      active: nextActive\n    } = _ref2;\n    var {\n      active\n    } = this.props;\n\n    if (nextActive !== active) {\n      this._removeListener(active);\n\n      this._addListener(nextActive);\n\n      this._updateDisplay(isPropTruthy(nextActive));\n\n      return false;\n    }\n\n    return true;\n  }\n\n  render() {\n    return React.createElement(Animated.View, _extends({}, this.props, {\n      ref: this._setRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 12\n      }\n    }));\n  }\n\n}\nScreen.defaultProps = {\n  active: true\n};\nexport var ScreenContainer = View;\nexport var NativeScreen = View;\nexport var NativeScreenContainer = View;","map":{"version":3,"sources":["/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/node_modules/react-native-screens/src/screens.web.js"],"names":["debounce","React","_shouldEnableScreens","enableScreens","shouldEnableScreens","console","warn","screensEnabled","isAnimatedValue","value","__getValue","addListener","isPropTruthy","prop","activeValue","Screen","Component","constructor","props","listenerId","_addListener","possibleListener","Error","_onAnimatedValueUpdated","_removeListener","removeListener","_updateDisplay","isActive","undefined","active","display","setNativeProps","style","nativeProps","_view","_setRef","view","componentWillUnmount","shouldComponentUpdate","nextActive","render","defaultProps","ScreenContainer","View","NativeScreen","NativeScreenContainer"],"mappings":";;;;AAAA,OAAOA,QAAP,MAAqB,UAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAGA,IAAIC,oBAAoB,GAAG,IAA3B;AAEA,OAAO,SAASC,aAAT,GAAmD;AAAA,MAA5BC,mBAA4B,uEAAN,IAAM;;AACxD,MAAIA,mBAAJ,EAAyB;AACvBC,IAAAA,OAAO,CAACC,IAAR,CACE,mEADF;AAGD;;AACDJ,EAAAA,oBAAoB,GAAGE,mBAAvB;AACD;AAED,OAAO,SAASG,cAAT,GAA0B;AAC/B,SAAOL,oBAAP;AACD;;AAED,SAASM,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAOA,KAAK,IAAIA,KAAK,CAACC,UAAf,IAA6BD,KAAK,CAACE,WAA1C;AACD;;AAED,SAASC,YAAT,CAAsBC,IAAtB,EAA4B;AAC1B,MAAIC,WAAW,GAAGD,IAAlB;;AACA,MAAIL,eAAe,CAACK,IAAD,CAAnB,EAA2B;AACzBC,IAAAA,WAAW,GAAGD,IAAI,CAACH,UAAL,EAAd;AACD;;AAED,SAAO,CAAC,CAACI,WAAT;AACD;;AAED,OAAO,MAAMC,MAAN,SAAqBd,KAAK,CAACe,SAA3B,CAAqC;AAO1CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SAFnBC,UAEmB,GAFN,IAEM;;AAAA,SAWnBC,YAXmB,GAWJC,gBAAgB,IAAI;AACjC,UAAI,KAAKF,UAAT,EACE,MAAM,IAAIG,KAAJ,CACJ,0FADI,CAAN;;AAGF,UAAId,eAAe,CAACa,gBAAD,CAAnB,EAAuC;AACrC,aAAKF,UAAL,GAAkBE,gBAAgB,CAACV,WAAjB,CAChB,KAAKY,uBADW,CAAlB;AAGD;AACF,KArBkB;;AAAA,SAuBnBC,eAvBmB,GAuBDH,gBAAgB,IAAI;AACpC,UAAIb,eAAe,CAACa,gBAAD,CAAnB,EAAuC;AACrCA,QAAAA,gBAAgB,CAACI,cAAjB,CAAgC,KAAKN,UAArC;AACA,aAAKA,UAAL,GAAkB,IAAlB;AACD;AACF,KA5BkB;;AAAA,SAyCnBI,uBAzCmB,GAyCO,UAAe;AAAA,UAAd;AAAEd,QAAAA;AAAF,OAAc;;AACvC,WAAKiB,cAAL,CAAoB,CAAC,CAACjB,KAAtB;AACD,KA3CkB;;AAAA,SA6CnBiB,cA7CmB,GA6CFC,QAAQ,IAAI;AAC3B,UAAIA,QAAQ,KAAKC,SAAjB,EAA4B;AAC1BD,QAAAA,QAAQ,GAAGf,YAAY,CAAC,KAAKM,KAAL,CAAWW,MAAZ,CAAvB;AACD;;AACD,UAAMC,OAAO,GAAGH,QAAQ,GAAG,MAAH,GAAY,MAApC;AACA,WAAKI,cAAL,CAAoB;AAAEC,QAAAA,KAAK,EAAE;AAAEF,UAAAA;AAAF;AAAT,OAApB;AACD,KAnDkB;;AAAA,SAqDnBC,cArDmB,GAqDFE,WAAW,IAAI;AAC9B,UAAI,KAAKC,KAAT,EAAgB;AACd,aAAKA,KAAL,CAAWH,cAAX,CAA0BE,WAA1B;AACD;AACF,KAzDkB;;AAAA,SA2DnBE,OA3DmB,GA2DTC,IAAI,IAAI;AAChB,WAAKF,KAAL,GAAaE,IAAb;;AACA,WAAKV,cAAL;AACD,KA9DkB;;AAGjB,SAAKH,uBAAL,GAA+BvB,QAAQ,CAAC,KAAKuB,uBAAN,EAA+B,EAA/B,CAAvC;;AACA,SAAKH,YAAL,CAAkBF,KAAK,CAACW,MAAxB;AACD;;AAEDQ,EAAAA,oBAAoB,GAAG;AACrB,SAAKb,eAAL,CAAqB,KAAKN,KAAL,CAAWW,MAAhC;AACD;;AAqBDS,EAAAA,qBAAqB,QAAyB;AAAA,QAAxB;AAAET,MAAAA,MAAM,EAAEU;AAAV,KAAwB;AAC5C,QAAM;AAAEV,MAAAA;AAAF,QAAa,KAAKX,KAAxB;;AACA,QAAIqB,UAAU,KAAKV,MAAnB,EAA2B;AACzB,WAAKL,eAAL,CAAqBK,MAArB;;AACA,WAAKT,YAAL,CAAkBmB,UAAlB;;AACA,WAAKb,cAAL,CAAoBd,YAAY,CAAC2B,UAAD,CAAhC;;AACA,aAAO,KAAP;AACD;;AACD,WAAO,IAAP;AACD;;AAyBDC,EAAAA,MAAM,GAAG;AACP,WAAO,oBAAC,QAAD,CAAU,IAAV,eAAmB,KAAKtB,KAAxB;AAA+B,MAAA,GAAG,EAAE,KAAKiB,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD;;AAzEyC;AAA/BpB,M,CACJ0B,Y,GAAe;AACpBZ,EAAAA,MAAM,EAAE;AADY,C;AA2ExB,OAAO,IAAMa,eAAe,GAAGC,IAAxB;AAEP,OAAO,IAAMC,YAAY,GAAGD,IAArB;AAEP,OAAO,IAAME,qBAAqB,GAAGF,IAA9B","sourcesContent":["import debounce from 'debounce';\nimport React from 'react';\nimport { Animated, View } from 'react-native';\n\nlet _shouldEnableScreens = true;\n\nexport function enableScreens(shouldEnableScreens = true) {\n  if (shouldEnableScreens) {\n    console.warn(\n      'react-native-screens is not fully supported on this platform yet.'\n    );\n  }\n  _shouldEnableScreens = shouldEnableScreens;\n}\n\nexport function screensEnabled() {\n  return _shouldEnableScreens;\n}\n\nfunction isAnimatedValue(value) {\n  return value && value.__getValue && value.addListener;\n}\n\nfunction isPropTruthy(prop) {\n  let activeValue = prop;\n  if (isAnimatedValue(prop)) {\n    activeValue = prop.__getValue();\n  }\n\n  return !!activeValue;\n}\n\nexport class Screen extends React.Component {\n  static defaultProps = {\n    active: true,\n  };\n\n  listenerId = null;\n\n  constructor(props) {\n    super(props);\n\n    this._onAnimatedValueUpdated = debounce(this._onAnimatedValueUpdated, 10);\n    this._addListener(props.active);\n  }\n\n  componentWillUnmount() {\n    this._removeListener(this.props.active);\n  }\n\n  _addListener = possibleListener => {\n    if (this.listenerId)\n      throw new Error(\n        'Screen: Attempting to observe an animated value while another value is already observed.'\n      );\n    if (isAnimatedValue(possibleListener)) {\n      this.listenerId = possibleListener.addListener(\n        this._onAnimatedValueUpdated\n      );\n    }\n  };\n\n  _removeListener = possibleListener => {\n    if (isAnimatedValue(possibleListener)) {\n      possibleListener.removeListener(this.listenerId);\n      this.listenerId = null;\n    }\n  };\n\n  shouldComponentUpdate({ active: nextActive }) {\n    const { active } = this.props;\n    if (nextActive !== active) {\n      this._removeListener(active);\n      this._addListener(nextActive);\n      this._updateDisplay(isPropTruthy(nextActive));\n      return false;\n    }\n    return true;\n  }\n\n  _onAnimatedValueUpdated = ({ value }) => {\n    this._updateDisplay(!!value);\n  };\n\n  _updateDisplay = isActive => {\n    if (isActive === undefined) {\n      isActive = isPropTruthy(this.props.active);\n    }\n    const display = isActive ? 'flex' : 'none';\n    this.setNativeProps({ style: { display } });\n  };\n\n  setNativeProps = nativeProps => {\n    if (this._view) {\n      this._view.setNativeProps(nativeProps);\n    }\n  };\n\n  _setRef = view => {\n    this._view = view;\n    this._updateDisplay();\n  };\n\n  render() {\n    return <Animated.View {...this.props} ref={this._setRef} />;\n  }\n}\n\nexport const ScreenContainer = View;\n\nexport const NativeScreen = View;\n\nexport const NativeScreenContainer = View;\n"]},"metadata":{},"sourceType":"module"}