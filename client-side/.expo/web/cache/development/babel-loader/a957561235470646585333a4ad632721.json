{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport withNavigation from \"./withNavigation\";\nvar EventNameToPropName = {\n  willFocus: 'onWillFocus',\n  didFocus: 'onDidFocus',\n  willBlur: 'onWillBlur',\n  didBlur: 'onDidBlur'\n};\nvar EventNames = Object.keys(EventNameToPropName);\n\nclass NavigationEvents extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"getPropListener\", eventName => this.props[EventNameToPropName[eventName]]);\n  }\n\n  componentDidMount() {\n    var _this = this;\n\n    this.subscriptions = {};\n    EventNames.forEach(eventName => {\n      this.subscriptions[eventName] = this.props.navigation.addListener(eventName, function () {\n        var propListener = _this.getPropListener(eventName);\n\n        return propListener && propListener(...arguments);\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    EventNames.forEach(eventName => {\n      this.subscriptions[eventName].remove();\n    });\n  }\n\n  render() {\n    return null;\n  }\n\n}\n\nexport default withNavigation(NavigationEvents);","map":{"version":3,"sources":["NavigationEvents.js"],"names":["EventNameToPropName","willFocus","didFocus","willBlur","didBlur","EventNames","Object","React","componentDidMount","eventName","propListener","componentWillUnmount","render","withNavigation"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAA,cAAA;AAEA,IAAMA,mBAAmB,GAAG;AAC1BC,EAAAA,SAAS,EADiB,aAAA;AAE1BC,EAAAA,QAAQ,EAFkB,YAAA;AAG1BC,EAAAA,QAAQ,EAHkB,YAAA;AAI1BC,EAAAA,OAAO,EAAE;AAJiB,CAA5B;AAOA,IAAMC,UAAU,GAAGC,MAAM,CAANA,IAAAA,CAAnB,mBAAmBA,CAAnB;;AAEA,MAAA,gBAAA,SAA+BC,KAAK,CAApC,SAAA,CAA+C;AAAA,EAAA,WAAA,GAAA;AAAA,UAAA,YAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,iBAAA,EAwB1BE,SAAD,IAAe,KAAA,KAAA,CAAWT,mBAAmB,CAxBlB,SAwBkB,CAA9B,CAxBY,CAAA;AAAA;;AAC7CQ,EAAAA,iBAAiB,GAAG;AAAA;;AAClB,SAAA,aAAA,GADkB,EAClB;AAKAH,IAAAA,UAAU,CAAVA,OAAAA,CAAoBI,SAAD,IAAe;AAChC,WAAA,aAAA,CAAA,SAAA,IAAgC,KAAA,KAAA,CAAA,UAAA,CAAA,WAAA,CAAA,SAAA,EAE9B,YAAa;AACX,YAAMC,YAAY,GAAG,KAAA,CAAA,eAAA,CAArB,SAAqB,CAArB;;AACA,eAAOA,YAAY,IAAIA,YAAY,CAAnC,YAAmC,CAAnC;AAJJ,OAAgC,CAAhC;AADFL,KAAAA;AASD;;AAEDM,EAAAA,oBAAoB,GAAG;AACrBN,IAAAA,UAAU,CAAVA,OAAAA,CAAoBI,SAAD,IAAe;AAChC,WAAA,aAAA,CAAA,SAAA,EAAA,MAAA;AADFJ,KAAAA;AAGD;;AAIDO,EAAAA,MAAM,GAAG;AACP,WAAA,IAAA;AACD;;AA5B4C;;AA+B/C,eAAeC,cAAc,CAA7B,gBAA6B,CAA7B","sourcesContent":["import * as React from 'react';\nimport withNavigation from './withNavigation';\n\nconst EventNameToPropName = {\n  willFocus: 'onWillFocus',\n  didFocus: 'onDidFocus',\n  willBlur: 'onWillBlur',\n  didBlur: 'onDidBlur',\n};\n\nconst EventNames = Object.keys(EventNameToPropName);\n\nclass NavigationEvents extends React.Component {\n  componentDidMount() {\n    this.subscriptions = {};\n\n    // We register all navigation listeners on mount to ensure listener stability across re-render\n    // A former implementation was replacing (removing/adding) listeners on all update (if prop provided)\n    // but there were issues (see https://github.com/react-navigation/react-navigation/issues/5058)\n    EventNames.forEach((eventName) => {\n      this.subscriptions[eventName] = this.props.navigation.addListener(\n        eventName,\n        (...args) => {\n          const propListener = this.getPropListener(eventName);\n          return propListener && propListener(...args);\n        }\n      );\n    });\n  }\n\n  componentWillUnmount() {\n    EventNames.forEach((eventName) => {\n      this.subscriptions[eventName].remove();\n    });\n  }\n\n  getPropListener = (eventName) => this.props[EventNameToPropName[eventName]];\n\n  render() {\n    return null;\n  }\n}\n\nexport default withNavigation(NavigationEvents);\n"]},"metadata":{},"sourceType":"module"}