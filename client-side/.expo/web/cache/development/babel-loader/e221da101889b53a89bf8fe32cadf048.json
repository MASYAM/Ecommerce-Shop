{"ast":null,"code":"import React from 'react';\nimport { createAnimatedAlways } from \"./AnimatedAlways\";\nimport AnimatedNode from \"./AnimatedNode\";\n\nclass Code extends React.PureComponent {\n  componentDidMount() {\n    var {\n      children,\n      exec\n    } = this.props;\n    var nodeChildren = Code.resolveNode(children);\n    var nodeExec = Code.resolveNode(exec);\n    var cantResolveNode = nodeChildren === null && nodeExec === null;\n\n    if (cantResolveNode) {\n      var error = nodeChildren === null ? \"Got \\\"\".concat(typeof children, \"\\\" type passed to children\") : \"Got \\\"\".concat(typeof exec, \"\\\" type passed to exec\");\n      throw new Error(\"<Animated.Code /> expects the 'exec' prop or children to be an animated node or a function returning an animated node. \".concat(error));\n    }\n\n    this.always = createAnimatedAlways(nodeExec || nodeChildren);\n\n    this.always.__attach();\n  }\n\n  componentWillUnmount() {\n    this.always.__detach();\n  }\n\n  componentDidUpdate() {\n    this.componentWillUnmount();\n    this.componentDidMount();\n  }\n\n  render() {\n    return null;\n  }\n\n}\n\nCode.resolveNode = maybeNode => {\n  if (typeof maybeNode === 'function') {\n    return Code.resolveNode(maybeNode());\n  }\n\n  if (maybeNode instanceof AnimatedNode) {\n    return maybeNode;\n  }\n\n  return null;\n};\n\nexport default Code;","map":{"version":3,"sources":["/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/node_modules/react-native-reanimated/src/core/AnimatedCode.js"],"names":["React","createAnimatedAlways","AnimatedNode","Code","PureComponent","componentDidMount","children","exec","props","nodeChildren","resolveNode","nodeExec","cantResolveNode","error","Error","always","__attach","componentWillUnmount","__detach","componentDidUpdate","render","maybeNode"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,oBAAT;AACA,OAAOC,YAAP;;AAEA,MAAMC,IAAN,SAAmBH,KAAK,CAACI,aAAzB,CAAuC;AAarCC,EAAAA,iBAAiB,GAAG;AAClB,QAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAAqB,KAAKC,KAAhC;AACA,QAAMC,YAAY,GAAGN,IAAI,CAACO,WAAL,CAAiBJ,QAAjB,CAArB;AACA,QAAMK,QAAQ,GAAGR,IAAI,CAACO,WAAL,CAAiBH,IAAjB,CAAjB;AAEA,QAAMK,eAAe,GAAGH,YAAY,KAAK,IAAjB,IAAyBE,QAAQ,KAAK,IAA9D;;AAEA,QAAIC,eAAJ,EAAqB;AACnB,UAAMC,KAAK,GACTJ,YAAY,KAAK,IAAjB,mBACY,OAAOH,QADnB,kDAEY,OAAOC,IAFnB,2BADF;AAKA,YAAM,IAAIO,KAAJ,kIACsHD,KADtH,EAAN;AAGD;;AAED,SAAKE,MAAL,GAAcd,oBAAoB,CAACU,QAAQ,IAAIF,YAAb,CAAlC;;AACA,SAAKM,MAAL,CAAYC,QAAZ;AACD;;AAEDC,EAAAA,oBAAoB,GAAG;AACrB,SAAKF,MAAL,CAAYG,QAAZ;AACD;;AAEDC,EAAAA,kBAAkB,GAAG;AACnB,SAAKF,oBAAL;AACA,SAAKZ,iBAAL;AACD;;AAEDe,EAAAA,MAAM,GAAG;AACP,WAAO,IAAP;AACD;;AA9CoC;;AAAjCjB,I,CACGO,W,GAAcW,SAAS,IAAI;AAChC,MAAI,OAAOA,SAAP,KAAqB,UAAzB,EAAqC;AACnC,WAAOlB,IAAI,CAACO,WAAL,CAAiBW,SAAS,EAA1B,CAAP;AACD;;AAED,MAAIA,SAAS,YAAYnB,YAAzB,EAAuC;AACrC,WAAOmB,SAAP;AACD;;AAED,SAAO,IAAP;AACD,C;;AAqCH,eAAelB,IAAf","sourcesContent":["import React from 'react';\nimport { createAnimatedAlways } from './AnimatedAlways';\nimport AnimatedNode from './AnimatedNode';\n\nclass Code extends React.PureComponent {\n  static resolveNode = maybeNode => {\n    if (typeof maybeNode === 'function') {\n      return Code.resolveNode(maybeNode());\n    }\n\n    if (maybeNode instanceof AnimatedNode) {\n      return maybeNode;\n    }\n\n    return null;\n  };\n\n  componentDidMount() {\n    const { children, exec } = this.props;\n    const nodeChildren = Code.resolveNode(children);\n    const nodeExec = Code.resolveNode(exec);\n\n    const cantResolveNode = nodeChildren === null && nodeExec === null;\n\n    if (cantResolveNode) {\n      const error =\n        nodeChildren === null\n          ? `Got \"${typeof children}\" type passed to children`\n          : `Got \"${typeof exec}\" type passed to exec`;\n\n      throw new Error(\n        `<Animated.Code /> expects the 'exec' prop or children to be an animated node or a function returning an animated node. ${error}`\n      );\n    }\n\n    this.always = createAnimatedAlways(nodeExec || nodeChildren);\n    this.always.__attach();\n  }\n\n  componentWillUnmount() {\n    this.always.__detach();\n  }\n  \n  componentDidUpdate() {\n    this.componentWillUnmount();\n    this.componentDidMount();\n  }\n  \n  render() {\n    return null;\n  }\n}\nexport default Code;\n"]},"metadata":{},"sourceType":"module"}