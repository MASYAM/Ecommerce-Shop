{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport invariant from 'fbjs/lib/invariant';\nimport { adapt } from \"../core/AnimatedBlock\";\nimport { val } from \"../val\";\nimport AnimatedNode from \"./AnimatedNode\";\n\nclass AnimatedCond extends AnimatedNode {\n  constructor(condition, ifBlock, elseBlock) {\n    invariant(condition instanceof AnimatedNode, \"Reanimated: Animated.cond node first argument should be of type AnimatedNode but got \".concat(condition));\n    invariant(ifBlock instanceof AnimatedNode, \"Reanimated: Animated.cond node second argument should be of type AnimatedNode but got \".concat(ifBlock));\n    invariant(elseBlock instanceof AnimatedNode || elseBlock === undefined, \"Reanimated: Animated.cond node third argument should be of type AnimatedNode or should be undefined but got \".concat(elseBlock));\n    super({\n      type: 'cond',\n      cond: condition,\n      ifBlock,\n      elseBlock\n    }, [condition, ifBlock, elseBlock]);\n\n    _defineProperty(this, \"_condition\", void 0);\n\n    _defineProperty(this, \"_ifBlock\", void 0);\n\n    _defineProperty(this, \"_elseBlock\", void 0);\n\n    this._condition = condition;\n    this._ifBlock = ifBlock;\n    this._elseBlock = elseBlock;\n  }\n\n  toString() {\n    return \"AnimatedCond, id: \".concat(this.__nodeID);\n  }\n\n  __onEvaluate() {\n    if (val(this._condition)) {\n      return val(this._ifBlock);\n    } else {\n      return this._elseBlock !== undefined ? val(this._elseBlock) : undefined;\n    }\n  }\n\n}\n\nexport function createAnimatedCond(cond, ifBlock, elseBlock) {\n  return new AnimatedCond(adapt(cond), adapt(ifBlock), elseBlock === undefined ? undefined : adapt(elseBlock));\n}","map":{"version":3,"sources":["AnimatedCond.js"],"names":["constructor","invariant","condition","ifBlock","elseBlock","type","cond","toString","__onEvaluate","val","adapt"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAA,SAAA,MAAA,oBAAA;AACA,SAAA,KAAA;AACA,SAAA,GAAA;AACA,OAAA,YAAA;;AAEA,MAAA,YAAA,SAAA,YAAA,CAAwC;AAKtCA,EAAAA,WAAW,CAAA,SAAA,EAAA,OAAA,EAAA,SAAA,EAAgC;AACzCC,IAAAA,SAAS,CACPC,SAAS,YADF,YAAA,EAAA,wFAAA,MAAA,CAATD,SAAS,CAAA,CAATA;AAIAA,IAAAA,SAAS,CACPE,OAAO,YADA,YAAA,EAAA,yFAAA,MAAA,CAATF,OAAS,CAAA,CAATA;AAIAA,IAAAA,SAAS,CACPG,SAAS,YAATA,YAAAA,IAAqCA,SAAS,KADvC,SAAA,EAAA,+GAAA,MAAA,CAATH,SAAS,CAAA,CAATA;AAIA,UACE;AACEI,MAAAA,IAAI,EADN,MAAA;AAEEC,MAAAA,IAAI,EAFN,SAAA;AAAA,MAAA,OAAA;AAIEF,MAAAA;AAJF,KADF,EAOE,CAAA,SAAA,EAAA,OAAA,EAPF,SAOE,CAPF;;AAbyC,IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,EAAA,KAAA,CAAA,CAAA;;AAsBzC,SAAA,UAAA,GAAA,SAAA;AACA,SAAA,QAAA,GAAA,OAAA;AACA,SAAA,UAAA,GAAA,SAAA;AACD;;AAEDG,EAAAA,QAAQ,GAAG;AACT,WAAA,qBAAA,MAAA,CAA4B,KAA5B,QAAA,CAAA;AACD;;AAEDC,EAAAA,YAAY,GAAG;AACb,QAAIC,GAAG,CAAC,KAAR,UAAO,CAAP,EAA0B;AACxB,aAAOA,GAAG,CAAC,KAAX,QAAU,CAAV;AADF,KAAA,MAEO;AACL,aAAO,KAAA,UAAA,KAAA,SAAA,GAAgCA,GAAG,CAAC,KAApC,UAAmC,CAAnC,GAAP,SAAA;AACD;AACF;;AA1CqC;;AA6CxC,OAAO,SAAA,kBAAA,CAAA,IAAA,EAAA,OAAA,EAAA,SAAA,EAAsD;AAC3D,SAAO,IAAA,YAAA,CACLC,KAAK,CADA,IACA,CADA,EAELA,KAAK,CAFA,OAEA,CAFA,EAGLN,SAAS,KAATA,SAAAA,GAAAA,SAAAA,GAAsCM,KAAK,CAH7C,SAG6C,CAHtC,CAAP;AAKD","sourcesContent":["import invariant from 'fbjs/lib/invariant';\nimport { adapt } from '../core/AnimatedBlock';\nimport { val } from '../val';\nimport AnimatedNode from './AnimatedNode';\n\nclass AnimatedCond extends AnimatedNode {\n  _condition;\n  _ifBlock;\n  _elseBlock;\n\n  constructor(condition, ifBlock, elseBlock) {\n    invariant(\n      condition instanceof AnimatedNode,\n      `Reanimated: Animated.cond node first argument should be of type AnimatedNode but got ${condition}`\n    );\n    invariant(\n      ifBlock instanceof AnimatedNode,\n      `Reanimated: Animated.cond node second argument should be of type AnimatedNode but got ${ifBlock}`\n    );\n    invariant(\n      elseBlock instanceof AnimatedNode || elseBlock === undefined,\n      `Reanimated: Animated.cond node third argument should be of type AnimatedNode or should be undefined but got ${elseBlock}`\n    );\n    super(\n      {\n        type: 'cond',\n        cond: condition,\n        ifBlock,\n        elseBlock,\n      },\n      [condition, ifBlock, elseBlock]\n    );\n    this._condition = condition;\n    this._ifBlock = ifBlock;\n    this._elseBlock = elseBlock;\n  }\n\n  toString() {\n    return `AnimatedCond, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    if (val(this._condition)) {\n      return val(this._ifBlock);\n    } else {\n      return this._elseBlock !== undefined ? val(this._elseBlock) : undefined;\n    }\n  }\n}\n\nexport function createAnimatedCond(cond, ifBlock, elseBlock) {\n  return new AnimatedCond(\n    adapt(cond),\n    adapt(ifBlock),\n    elseBlock === undefined ? undefined : adapt(elseBlock)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}