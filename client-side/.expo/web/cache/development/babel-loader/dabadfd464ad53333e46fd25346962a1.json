{"ast":null,"code":"import AnimatedNode from \"./AnimatedNode\";\nimport deepEqual from 'fbjs/lib/areEqual';\n\nfunction sanitizeTransform(inputTransform) {\n  var outputTransform = [];\n  inputTransform.forEach(transform => {\n    for (var key in transform) {\n      var value = transform[key];\n\n      if (value instanceof AnimatedNode) {\n        outputTransform.push({\n          property: key,\n          nodeID: value.__nodeID\n        });\n      } else {\n        outputTransform.push({\n          property: key,\n          value\n        });\n      }\n    }\n  });\n  return outputTransform;\n}\n\nfunction extractAnimatedParentNodes(transform) {\n  var parents = [];\n  transform.forEach(transform => {\n    for (var key in transform) {\n      var value = transform[key];\n\n      if (value instanceof AnimatedNode) {\n        parents.push(value);\n      }\n    }\n  });\n  return parents;\n}\n\nexport function createOrReuseTransformNode(transform, oldNode) {\n  var config = sanitizeTransform(transform);\n\n  if (oldNode && deepEqual(config, oldNode._config)) {\n    return oldNode;\n  }\n\n  return new AnimatedTransform(transform, config);\n}\n\nclass AnimatedTransform extends AnimatedNode {\n  constructor(transform, config) {\n    super({\n      type: 'transform',\n      transform: config\n    }, extractAnimatedParentNodes(transform));\n    this._config = config;\n    this._transform = transform;\n  }\n\n  toString() {\n    return \"AnimatedTransform, id: \".concat(this.__nodeID);\n  }\n\n  __onEvaluate() {\n    return this._transform.map(transform => {\n      var result = {};\n\n      for (var key in transform) {\n        var value = transform[key];\n\n        if (value instanceof AnimatedNode) {\n          result[key] = value.__getValue();\n        }\n      }\n\n      return result;\n    });\n  }\n\n}","map":{"version":3,"sources":["AnimatedTransform.js"],"names":["outputTransform","inputTransform","transform","value","property","nodeID","__nodeID","parents","config","sanitizeTransform","oldNode","deepEqual","constructor","type","extractAnimatedParentNodes","toString","__onEvaluate","result"],"mappings":"AAAA,OAAA,YAAA;AAEA,OAAA,SAAA,MAAA,mBAAA;;AAEA,SAAA,iBAAA,CAAA,cAAA,EAA2C;AACzC,MAAMA,eAAe,GAArB,EAAA;AACAC,EAAAA,cAAc,CAAdA,OAAAA,CAAuBC,SAAS,IAAI;AAClC,SAAK,IAAL,GAAA,IAAA,SAAA,EAA6B;AAC3B,UAAMC,KAAK,GAAGD,SAAS,CAAvB,GAAuB,CAAvB;;AACA,UAAIC,KAAK,YAAT,YAAA,EAAmC;AACjCH,QAAAA,eAAe,CAAfA,IAAAA,CAAqB;AACnBI,UAAAA,QAAQ,EADW,GAAA;AAEnBC,UAAAA,MAAM,EAAEF,KAAK,CAACG;AAFK,SAArBN;AADF,OAAA,MAKO;AACLA,QAAAA,eAAe,CAAfA,IAAAA,CAAqB;AACnBI,UAAAA,QAAQ,EADW,GAAA;AAEnBD,UAAAA;AAFmB,SAArBH;AAID;AACF;AAdHC,GAAAA;AAgBA,SAAA,eAAA;AACD;;AAED,SAAA,0BAAA,CAAA,SAAA,EAA+C;AAC7C,MAAMM,OAAO,GAAb,EAAA;AACAL,EAAAA,SAAS,CAATA,OAAAA,CAAkBA,SAAS,IAAI;AAC7B,SAAK,IAAL,GAAA,IAAA,SAAA,EAA6B;AAC3B,UAAMC,KAAK,GAAGD,SAAS,CAAvB,GAAuB,CAAvB;;AACA,UAAIC,KAAK,YAAT,YAAA,EAAmC;AACjCI,QAAAA,OAAO,CAAPA,IAAAA,CAAAA,KAAAA;AACD;AACF;AANHL,GAAAA;AAQA,SAAA,OAAA;AACD;;AAED,OAAO,SAAA,0BAAA,CAAA,SAAA,EAAA,OAAA,EAAwD;AAC7D,MAAMM,MAAM,GAAGC,iBAAiB,CAAhC,SAAgC,CAAhC;;AACA,MAAIC,OAAO,IAAIC,SAAS,CAAA,MAAA,EAASD,OAAO,CAAxC,OAAwB,CAAxB,EAAmD;AACjD,WAAA,OAAA;AACD;;AACD,SAAO,IAAA,iBAAA,CAAA,SAAA,EAAP,MAAO,CAAP;AACD;;AAED,MAAA,iBAAA,SAAA,YAAA,CAA6C;AAC3CE,EAAAA,WAAW,CAAA,SAAA,EAAA,MAAA,EAAoB;AAC7B,UACE;AAAEC,MAAAA,IAAI,EAAN,WAAA;AAAqBX,MAAAA,SAAS,EAAEM;AAAhC,KADF,EAEEM,0BAA0B,CAF5B,SAE4B,CAF5B;AAIA,SAAA,OAAA,GAAA,MAAA;AACA,SAAA,UAAA,GAAA,SAAA;AACD;;AAEDC,EAAAA,QAAQ,GAAG;AACT,WAAA,0BAAA,MAAA,CAAiC,KAAjC,QAAA,CAAA;AACD;;AAEDC,EAAAA,YAAY,GAAG;AACb,WAAO,KAAA,UAAA,CAAA,GAAA,CAAoBd,SAAS,IAAI;AACtC,UAAMe,MAAM,GAAZ,EAAA;;AACA,WAAK,IAAL,GAAA,IAAA,SAAA,EAA6B;AAC3B,YAAMd,KAAK,GAAGD,SAAS,CAAvB,GAAuB,CAAvB;;AACA,YAAIC,KAAK,YAAT,YAAA,EAAmC;AACjCc,UAAAA,MAAM,CAANA,GAAM,CAANA,GAAcd,KAAK,CAAnBc,UAAcd,EAAdc;AACD;AACF;;AACD,aAAA,MAAA;AARF,KAAO,CAAP;AAUD;;AAzB0C","sourcesContent":["import AnimatedNode from './AnimatedNode';\n\nimport deepEqual from 'fbjs/lib/areEqual';\n\nfunction sanitizeTransform(inputTransform) {\n  const outputTransform = [];\n  inputTransform.forEach(transform => {\n    for (const key in transform) {\n      const value = transform[key];\n      if (value instanceof AnimatedNode) {\n        outputTransform.push({\n          property: key,\n          nodeID: value.__nodeID,\n        });\n      } else {\n        outputTransform.push({\n          property: key,\n          value,\n        });\n      }\n    }\n  });\n  return outputTransform;\n}\n\nfunction extractAnimatedParentNodes(transform) {\n  const parents = [];\n  transform.forEach(transform => {\n    for (const key in transform) {\n      const value = transform[key];\n      if (value instanceof AnimatedNode) {\n        parents.push(value);\n      }\n    }\n  });\n  return parents;\n}\n\nexport function createOrReuseTransformNode(transform, oldNode) {\n  const config = sanitizeTransform(transform);\n  if (oldNode && deepEqual(config, oldNode._config)) {\n    return oldNode;\n  }\n  return new AnimatedTransform(transform, config);\n}\n\nclass AnimatedTransform extends AnimatedNode {\n  constructor(transform, config) {\n    super(\n      { type: 'transform', transform: config },\n      extractAnimatedParentNodes(transform)\n    );\n    this._config = config;\n    this._transform = transform;\n  }\n\n  toString() {\n    return `AnimatedTransform, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    return this._transform.map(transform => {\n      const result = {};\n      for (const key in transform) {\n        const value = transform[key];\n        if (value instanceof AnimatedNode) {\n          result[key] = value.__getValue();\n        }\n      }\n      return result;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}