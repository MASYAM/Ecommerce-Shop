{"ast":null,"code":"var _jsxFileName = \"/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/src/screens/legacy/StartupScreen/index.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { Actions } from 'react-native-router-flux';\nimport { Header, Container, Content, Button, Text, Toast, Spinner, CheckBox, Radio, ListItem, Left, Right, Body } from 'native-base';\nimport { NavigationActions, StackActions, NavigationProp } from 'react-navigation';\nimport { bindActionCreators } from 'redux';\nimport { connect } from \"react-redux\";\nimport { Input } from 'react-native-elements';\nimport styles from \"./style\";\nimport { ScreenNames, ImageSources } from \"../../../constants\";\nimport { BackButton } from \"../../../components/StandardButtons\";\nimport { StandardHeader } from \"../../../components/legacy/Header\";\nimport { authActions } from \"../../../store/actions\";\nimport { ActionStatusTypeValues } from \"../../../constants/actionStatusTypes\";\nimport { selectViewActionStatus } from \"../../../store/selectors/app\";\n\nclass StartupScreen extends React.Component {\n  constructor(props) {\n    var _this;\n\n    super(props);\n    _this = this;\n    this.tryLogin = _asyncToGenerator(function* () {\n      var {\n        authActions,\n        navigation\n      } = _this.props;\n      authActions.checkLogin(navigation.state.key);\n    });\n    this.state = {\n      modalVisible: false,\n      isLoading: false,\n      lastRequest: 0,\n      lastSent: 0,\n      errorMessage: null\n    };\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.tryLogin();\n    }, 3000);\n  }\n\n  componentDidUpdate(prevProps) {\n    var {\n      props,\n      state\n    } = this;\n\n    if (state.lastRequest !== props.checkLoginRequest.lastRequest) {\n      if (props.checkLoginRequest.status === ActionStatusTypeValues.ERROR) {\n        this.props.navigation.navigate(ScreenNames.Landing);\n      } else if (props.checkLoginRequest.status === ActionStatusTypeValues.COMPLETED) {\n        this.props.navigation.replace(ScreenNames.AppMain);\n      }\n    }\n  }\n\n  render() {\n    return React.createElement(Container, {\n      style: styles.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 19\n      }\n    }, React.createElement(StatusBar, {\n      barStyle: \"light-content\",\n      translucent: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }\n    }), React.createElement(ImageBackground, {\n      source: ImageSources.StartUpBg,\n      resizeMode: \"cover\",\n      style: styles.backgroundImage,\n      imageStyle: styles.backgroundImage_imageStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }\n    }, React.createElement(View, {\n      style: styles.bottomLayerFiller,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 21\n      }\n    }), React.createElement(View, {\n      style: styles.bottomLayer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 25\n      }\n    }, React.createElement(Text, {\n      style: styles.appTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 25\n      }\n    }, \"Monvelli\"), React.createElement(Text, {\n      style: styles.monvelli4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 25\n      }\n    }, \"Your 24 hours Shopping Mall\"), React.createElement(ActivityIndicator, {\n      style: styles.loadingStyle,\n      size: \"large\",\n      color: 'white',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 25\n      }\n    }), React.createElement(Text, {\n      style: styles.monvelli4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 25\n      }\n    }, \"Loading ...\"))));\n  }\n\n}\n\n;\n\nvar mapStateToProps = (state, ownProps) => {\n  var {\n    navigation\n  } = ownProps;\n  return {\n    checkLoginRequest: selectViewActionStatus(state, navigation.state.key, authActions.CHECK_LOGIN)\n  };\n};\n\nvar mapDispatchToProps = dispatch => {\n  return {\n    authActions: bindActionCreators(authActions, dispatch)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StartupScreen);","map":{"version":3,"sources":["/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/src/screens/legacy/StartupScreen/index.js"],"names":["React","Actions","Header","Container","Content","Button","Text","Toast","Spinner","CheckBox","Radio","ListItem","Left","Right","Body","NavigationActions","StackActions","NavigationProp","bindActionCreators","connect","Input","styles","ScreenNames","ImageSources","BackButton","StandardHeader","authActions","ActionStatusTypeValues","selectViewActionStatus","StartupScreen","Component","constructor","props","tryLogin","navigation","checkLogin","state","key","modalVisible","isLoading","lastRequest","lastSent","errorMessage","componentDidMount","setTimeout","componentDidUpdate","prevProps","checkLoginRequest","status","ERROR","navigate","Landing","COMPLETED","replace","AppMain","render","container","StartUpBg","backgroundImage","backgroundImage_imageStyle","bottomLayerFiller","bottomLayer","appTitle","monvelli4","loadingStyle","mapStateToProps","ownProps","CHECK_LOGIN","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {\n    View,\n    TextInput,\n    ActivityIndicator,\n    Image,\n    TouchableOpacity,\n    KeyboardAvoidingView,\n    Platform,\n    Keyboard,\n    StatusBar,\n    ImageBackground,\n    Alert\n} from 'react-native'\nimport { Actions } from 'react-native-router-flux'\nimport { Header, Container, Content, Button, Text, Toast , Spinner, CheckBox, Radio, ListItem, Left, Right, Body} from 'native-base'\nimport { NavigationActions, StackActions, NavigationProp } from 'react-navigation';\nimport { bindActionCreators } from 'redux';\nimport { connect } from \"react-redux\";\nimport { Input } from 'react-native-elements';\nimport styles from './style'\nimport { ScreenNames, ImageSources } from '../../../constants'\nimport { BackButton } from '../../../components/StandardButtons'\nimport { StandardHeader } from '../../../components/legacy/Header';\nimport { authActions } from  '../../../store/actions';\nimport { ActionStatusTypeValues } from '../../../constants/actionStatusTypes';\nimport { selectViewActionStatus } from '../../../store/selectors/app';\n\n\ntype OwnProps = {\n    navigation: NavigationProp;\n}\n\ntype Props = OwnProps & {\n    checkLoginRequest: ViewActionStateInfo,\n    authActions: typeof authActions,\n}\nclass StartupScreen extends React.Component<Props> {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      modalVisible: false,\n      isLoading: false,\n      lastRequest:0,\n      lastSent: 0,\n      errorMessage: null,\n    }\n  }\n\n  componentDidMount() {\n    setTimeout(\n      () => { this.tryLogin() },\n      3000\n    );\n    // this.props.navigation.navigate( );\n  }\n\n\n  componentDidUpdate(prevProps: Props) {\n    const { props, state } = this;\n    if (state.lastRequest !== props.checkLoginRequest.lastRequest) {\n        if (props.checkLoginRequest.status === ActionStatusTypeValues.ERROR) {\n          this.props.navigation.navigate(ScreenNames.Landing);\n        }\n        else if (props.checkLoginRequest.status === ActionStatusTypeValues.COMPLETED) {\n          //Login Success\n          this.props.navigation.replace(ScreenNames.AppMain);\n\n        }\n    }\n}\n\n\n  tryLogin = async () => {\n    const { authActions, navigation } = this.props;\n    authActions.checkLogin(navigation.state.key);\n    /*\n    const userData = await AsyncStorage.getItem('userData');\n    if (userData) \n    {\n      const transformedData = JSON.parse(userData);\n      if (transformedData.token) \n      {\n        this.props.navigation.navigate(ScreenNames.AppMain);\n        return;\n      }\n      else\n      {\n        this.props.navigation.replace(ScreenNames.Landing);\n        return;\n      }\n    }\n    else\n    {\n      this.props.navigation.replace(ScreenNames.Landing);\n      return;\n    }\n    */\n\n    /*\n    if (userData.token) {\n      const transformedData = JSON.parse(userData);\n      const { token, userId, isPhoneVerified } = transformedData;\n     // if (token && userId && isPhoneVerified) {\n      if (token && userId ) {\n       \n      }\n    }else{\n       \n    }\n    */\n  };\n\n      render() {\n        return (\n                  <Container style={styles.container}>\n                    <StatusBar\n                    barStyle=\"light-content\"\n                    translucent={true}\n                    />\n                    <ImageBackground\n                    source={ImageSources.StartUpBg}\n                    resizeMode=\"cover\"\n                    style={styles.backgroundImage}\n                    imageStyle={styles.backgroundImage_imageStyle}\n                    >\n                    <View style={styles.bottomLayerFiller}></View>\n                        <View style={styles.bottomLayer}>\n                        <Text style={styles.appTitle}>Monvelli</Text>\n                        <Text style={styles.monvelli4}>Your 24 hours Shopping Mall</Text>\n                        <ActivityIndicator style={styles.loadingStyle} size=\"large\" color={'white'} />\n                        <Text style={styles.monvelli4}>Loading ...</Text>\n                    </View>\n                    </ImageBackground>\n                  </Container>\n        );\n      }\n\n};\n\n\n\n\n\n\nconst mapStateToProps = (state, ownProps: OwnProps) => {\n  const { navigation } = ownProps;\n  return {\n      checkLoginRequest: selectViewActionStatus(state, navigation.state.key, authActions.CHECK_LOGIN),\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n      authActions: bindActionCreators(authActions, dispatch),\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(StartupScreen);"]},"metadata":{},"sourceType":"module"}