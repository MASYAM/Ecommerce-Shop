{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Hammer from '@egjs/hammerjs';\nimport DiscreteGestureHandler from \"./DiscreteGestureHandler\";\nimport { isnan } from \"./utils\";\n\nclass TapGestureHandler extends DiscreteGestureHandler {\n  constructor() {\n    super(...arguments);\n\n    this.onSuccessfulTap = ev => {\n      if (this._getPendingGestures().length) {\n        this._shouldFireEndEvent = ev;\n        return;\n      }\n\n      if (ev.eventType === Hammer.INPUT_END) {\n        this.sendEvent(_objectSpread(_objectSpread({}, ev), {}, {\n          eventType: Hammer.INPUT_MOVE\n        }));\n      }\n\n      this.sendEvent(_objectSpread(_objectSpread({}, ev), {}, {\n        isFinal: true\n      }));\n      this.onGestureEnded(ev);\n    };\n  }\n\n  get name() {\n    return 'tap';\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Tap;\n  }\n\n  get maxDelayMs() {\n    return isnan(this.config.maxDelayMs) ? 300 : this.config.maxDelayMs;\n  }\n\n  simulateCancelEvent(inputData) {\n    if (this.isGestureRunning) {\n      this.cancelEvent(inputData);\n    }\n  }\n\n  onGestureActivated(ev) {\n    if (this.isGestureRunning) {\n      this.onSuccessfulTap(ev);\n    }\n  }\n\n  onRawEvent(ev) {\n    super.onRawEvent(ev);\n\n    if (!this.hasGestureFailed && !this.isGestureRunning && !ev.isFinal) {\n      var gesture = this.hammer.get(this.name);\n\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n\n    if (ev.isFinal && ev.maxPointers > 1) {\n      setTimeout(() => {\n        if (this.isGestureRunning) {\n          this.cancelEvent(ev);\n        }\n      });\n    }\n\n    if (this.hasGestureFailed) {\n      return;\n    }\n\n    if (ev.isFinal) {\n      if (ev.maxPointers > 1) {\n        setTimeout(() => {\n          if (this.isGestureRunning) {\n            this.cancelEvent(ev);\n          }\n        });\n      }\n\n      clearTimeout(this._timer);\n      this._timer = setTimeout(() => {\n        this.hasGestureFailed = true;\n        this.cancelEvent(ev);\n      }, this.maxDelayMs);\n    } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n      var _gesture = this.hammer.get(this.name);\n\n      if (_gesture.options.enable(_gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n  }\n\n  getHammerConfig() {\n    return _objectSpread(_objectSpread({}, super.getHammerConfig()), {}, {\n      event: this.name,\n      taps: isnan(this.config.numberOfTaps) ? 1 : this.config.numberOfTaps,\n      interval: this.maxDelayMs,\n      time: isnan(this.config.maxDurationMs) || this.config.maxDurationMs == null ? 250 : this.config.maxDurationMs\n    });\n  }\n\n  updateGestureConfig(_ref) {\n    var {\n      shouldCancelWhenOutside = true,\n      maxDeltaX = Number.NaN,\n      maxDeltaY = Number.NaN,\n      numberOfTaps = 1,\n      minDurationMs = 525,\n      maxDelayMs = Number.NaN,\n      maxDurationMs = Number.NaN,\n      maxDist = 2,\n      minPointers = 1,\n      maxPointers = 1\n    } = _ref,\n        props = _objectWithoutProperties(_ref, [\"shouldCancelWhenOutside\", \"maxDeltaX\", \"maxDeltaY\", \"numberOfTaps\", \"minDurationMs\", \"maxDelayMs\", \"maxDurationMs\", \"maxDist\", \"minPointers\", \"maxPointers\"]);\n\n    return super.updateGestureConfig(_objectSpread({\n      shouldCancelWhenOutside,\n      numberOfTaps,\n      maxDeltaX,\n      maxDeltaY,\n      minDurationMs,\n      maxDelayMs,\n      maxDist,\n      minPointers,\n      maxPointers\n    }, props));\n  }\n\n  onGestureEnded() {\n    clearTimeout(this._timer);\n    super.onGestureEnded(...arguments);\n  }\n\n  onWaitingEnded(gesture) {\n    if (this._shouldFireEndEvent) {\n      this.onSuccessfulTap(this._shouldFireEndEvent);\n      this._shouldFireEndEvent = null;\n    }\n  }\n\n}\n\nexport default TapGestureHandler;","map":{"version":3,"sources":["/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/node_modules/react-native-gesture-handler/web/TapGestureHandler.js"],"names":["Hammer","DiscreteGestureHandler","isnan","TapGestureHandler","onSuccessfulTap","ev","_getPendingGestures","length","_shouldFireEndEvent","eventType","INPUT_END","sendEvent","INPUT_MOVE","isFinal","onGestureEnded","name","NativeGestureClass","Tap","maxDelayMs","config","simulateCancelEvent","inputData","isGestureRunning","cancelEvent","onGestureActivated","onRawEvent","hasGestureFailed","gesture","hammer","get","options","enable","clearTimeout","_multiTapTimer","onStart","maxPointers","setTimeout","_timer","getHammerConfig","event","taps","numberOfTaps","interval","time","maxDurationMs","updateGestureConfig","shouldCancelWhenOutside","maxDeltaX","Number","NaN","maxDeltaY","minDurationMs","maxDist","minPointers","props","onWaitingEnded"],"mappings":"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","sourcesContent":["import Hammer from '@egjs/hammerjs';\n\nimport DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { isnan } from './utils';\n\nclass TapGestureHandler extends DiscreteGestureHandler {\n  get name() {\n    return 'tap';\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Tap;\n  }\n\n  get maxDelayMs() {\n    return isnan(this.config.maxDelayMs) ? 300 : this.config.maxDelayMs;\n  }\n\n  simulateCancelEvent(inputData) {\n    if (this.isGestureRunning) {\n      this.cancelEvent(inputData);\n    }\n  }\n\n  onGestureActivated(ev) {\n    if (this.isGestureRunning) {\n      this.onSuccessfulTap(ev);\n    }\n  }\n\n  onSuccessfulTap = ev => {\n    if (this._getPendingGestures().length) {\n      this._shouldFireEndEvent = ev;\n      return;\n    }\n    if (ev.eventType === Hammer.INPUT_END) {\n      this.sendEvent({ ...ev, eventType: Hammer.INPUT_MOVE });\n    }\n    // When handler gets activated it will turn into State.END immediately.\n    this.sendEvent({ ...ev, isFinal: true });\n    this.onGestureEnded(ev);\n  };\n\n  onRawEvent(ev) {\n    super.onRawEvent(ev);\n\n    // Attempt to create a touch-down event by checking if a valid tap hasn't started yet, then validating the input.\n    if (\n      !this.hasGestureFailed &&\n      !this.isGestureRunning &&\n      // Prevent multi-pointer events from misfiring.\n      !ev.isFinal\n    ) {\n      // Tap Gesture start event\n      const gesture = this.hammer.get(this.name);\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n    if (ev.isFinal && ev.maxPointers > 1) {\n      setTimeout(() => {\n        // Handle case where one finger presses slightly\n        // after the first finger on a multi-tap event\n        if (this.isGestureRunning) {\n          this.cancelEvent(ev);\n        }\n      });\n    }\n\n    if (this.hasGestureFailed) {\n      return;\n    }\n    // Hammer doesn't send a `cancel` event for taps.\n    // Manually fail the event.\n    if (ev.isFinal) {\n      // Handle case where one finger presses slightly\n      // after the first finger on a multi-tap event\n      if (ev.maxPointers > 1) {\n        setTimeout(() => {\n          if (this.isGestureRunning) {\n            this.cancelEvent(ev);\n          }\n        });\n      }\n\n      // Clear last timer\n      clearTimeout(this._timer);\n      // Create time out for multi-taps.\n      this._timer = setTimeout(() => {\n        this.hasGestureFailed = true;\n        this.cancelEvent(ev);\n      }, this.maxDelayMs);\n    } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n      // Tap Gesture start event\n      const gesture = this.hammer.get(this.name);\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n  }\n\n  getHammerConfig() {\n    return {\n      ...super.getHammerConfig(),\n      event: this.name,\n      taps: isnan(this.config.numberOfTaps) ? 1 : this.config.numberOfTaps,\n      interval: this.maxDelayMs,\n      time:\n        isnan(this.config.maxDurationMs) || this.config.maxDurationMs == null\n          ? 250\n          : this.config.maxDurationMs,\n    };\n  }\n\n  updateGestureConfig({\n    shouldCancelWhenOutside = true,\n    maxDeltaX = Number.NaN,\n    maxDeltaY = Number.NaN,\n    numberOfTaps = 1,\n    minDurationMs = 525,\n    maxDelayMs = Number.NaN,\n    maxDurationMs = Number.NaN,\n    maxDist = 2,\n    minPointers = 1,\n    maxPointers = 1,\n    ...props\n  }) {\n    return super.updateGestureConfig({\n      shouldCancelWhenOutside,\n      numberOfTaps,\n      maxDeltaX,\n      maxDeltaY,\n      minDurationMs,\n      maxDelayMs,\n      maxDist,\n      minPointers,\n      maxPointers,\n      ...props,\n    });\n  }\n\n  onGestureEnded(...props) {\n    clearTimeout(this._timer);\n    super.onGestureEnded(...props);\n  }\n\n  onWaitingEnded(gesture) {\n    if (this._shouldFireEndEvent) {\n      this.onSuccessfulTap(this._shouldFireEndEvent);\n      this._shouldFireEndEvent = null;\n    }\n  }\n}\nexport default TapGestureHandler;\n"]},"metadata":{},"sourceType":"module"}