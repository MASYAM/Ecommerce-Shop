{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { TabBar } from 'react-native-tab-view';\nimport Animated from 'react-native-reanimated';\nexport default class TabBarTop extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"_renderLabel\", (_ref) => {\n      var {\n        route,\n        focused,\n        color\n      } = _ref;\n      var {\n        showLabel,\n        upperCaseLabel,\n        labelStyle,\n        allowFontScaling\n      } = this.props;\n\n      if (showLabel === false) {\n        return null;\n      }\n\n      var label = this.props.getLabelText({\n        route\n      });\n\n      if (typeof label === 'string') {\n        return React.createElement(Animated.Text, {\n          style: [styles.label, {\n            color\n          }, labelStyle],\n          allowFontScaling: allowFontScaling\n        }, upperCaseLabel ? label.toUpperCase() : label);\n      }\n\n      if (typeof label === 'function') {\n        return label({\n          focused,\n          tintColor: color\n        });\n      }\n\n      return label;\n    });\n\n    _defineProperty(this, \"_renderIcon\", (_ref2) => {\n      var {\n        route,\n        focused,\n        color\n      } = _ref2;\n      var {\n        renderIcon,\n        showIcon,\n        iconStyle\n      } = this.props;\n\n      if (showIcon === false) {\n        return null;\n      }\n\n      return React.createElement(View, {\n        style: [styles.icon, iconStyle]\n      }, renderIcon({\n        route,\n        focused,\n        tintColor: color\n      }));\n    });\n  }\n\n  render() {\n    var _this$props = this.props,\n        {\n      navigation,\n      activeTintColor,\n      inactiveTintColor,\n      renderIcon,\n      getLabelText,\n      allowFontScaling,\n      showLabel,\n      showIcon,\n      upperCaseLabel,\n      tabBarPosition,\n      screenProps,\n      iconStyle\n    } = _this$props,\n        rest = _objectWithoutProperties(_this$props, [\"navigation\", \"activeTintColor\", \"inactiveTintColor\", \"renderIcon\", \"getLabelText\", \"allowFontScaling\", \"showLabel\", \"showIcon\", \"upperCaseLabel\", \"tabBarPosition\", \"screenProps\", \"iconStyle\"]);\n\n    return React.createElement(TabBar, _extends({}, rest, {\n      activeColor: activeTintColor,\n      inactiveColor: inactiveTintColor,\n      navigationState: navigation.state,\n      renderIcon: this._renderIcon,\n      renderLabel: this._renderLabel\n    }));\n  }\n\n}\n\n_defineProperty(TabBarTop, \"defaultProps\", {\n  activeTintColor: 'rgba(255, 255, 255, 1)',\n  inactiveTintColor: 'rgba(255, 255, 255, 0.7)',\n  showIcon: false,\n  showLabel: true,\n  upperCaseLabel: true,\n  allowFontScaling: true\n});\n\nvar styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24\n  },\n  label: {\n    textAlign: 'center',\n    fontSize: 13,\n    margin: 4,\n    backgroundColor: 'transparent'\n  }\n});","map":{"version":3,"sources":["MaterialTopTabBar.tsx"],"names":["TabBarTop","React","activeTintColor","inactiveTintColor","showIcon","showLabel","upperCaseLabel","allowFontScaling","color","label","route","styles","tintColor","iconStyle","renderIcon","render","rest","navigation","_renderLabel","icon","height","width","textAlign","fontSize","margin","backgroundColor"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { TabBar } from 'react-native-tab-view';\nimport Animated from 'react-native-reanimated';\nimport { NavigationRoute } from 'react-navigation';\nimport { MaterialTabBarProps } from '../types';\n\ntype Scene = { route: NavigationRoute; focused: boolean; color: string };\n\nexport default class TabBarTop extends React.PureComponent<\n  MaterialTabBarProps\n> {\n  static defaultProps = {\n    activeTintColor: 'rgba(255, 255, 255, 1)',\n    inactiveTintColor: 'rgba(255, 255, 255, 0.7)',\n    showIcon: false,\n    showLabel: true,\n    upperCaseLabel: true,\n    allowFontScaling: true,\n  };\n\n  _renderLabel = ({ route, focused, color }: Scene) => {\n    const {\n      showLabel,\n      upperCaseLabel,\n      labelStyle,\n      allowFontScaling,\n    } = this.props;\n\n    if (showLabel === false) {\n      return null;\n    }\n\n    const label = this.props.getLabelText({ route });\n\n    if (typeof label === 'string') {\n      return (\n        <Animated.Text\n          style={[styles.label, { color }, labelStyle]}\n          allowFontScaling={allowFontScaling}\n        >\n          {upperCaseLabel ? label.toUpperCase() : label}\n        </Animated.Text>\n      );\n    }\n\n    if (typeof label === 'function') {\n      return label({ focused, tintColor: color });\n    }\n\n    return label;\n  };\n\n  _renderIcon = ({ route, focused, color }: Scene) => {\n    const { renderIcon, showIcon, iconStyle } = this.props;\n\n    if (showIcon === false) {\n      return null;\n    }\n\n    return (\n      <View style={[styles.icon, iconStyle]}>\n        {renderIcon({\n          route,\n          focused,\n          tintColor: color,\n        })}\n      </View>\n    );\n  };\n\n  render() {\n    const {\n      navigation,\n      activeTintColor,\n      inactiveTintColor,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      renderIcon,\n      getLabelText,\n      allowFontScaling,\n      showLabel,\n      showIcon,\n      upperCaseLabel,\n      tabBarPosition,\n      screenProps,\n      iconStyle,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      ...rest\n    } = this.props;\n\n    return (\n      <TabBar\n        {...rest}\n        activeColor={activeTintColor}\n        inactiveColor={inactiveTintColor}\n        navigationState={navigation.state}\n        renderIcon={this._renderIcon}\n        renderLabel={this._renderLabel}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24,\n  },\n  label: {\n    textAlign: 'center',\n    fontSize: 13,\n    margin: 4,\n    backgroundColor: 'transparent',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}