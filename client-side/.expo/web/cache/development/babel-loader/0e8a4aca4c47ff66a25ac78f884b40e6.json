{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport hoistNonReactStatic from 'hoist-non-react-statics';\nexport var isOrientationLandscape = (_ref) => {\n  var {\n    width,\n    height\n  } = _ref;\n  return width > height;\n};\nexport default function withDimensions(WrappedComponent) {\n  class EnhancedComponent extends React.Component {\n    constructor(props) {\n      super(props);\n\n      _defineProperty(this, \"handleOrientationChange\", (_ref2) => {\n        var {\n          window\n        } = _ref2;\n        var {\n          width,\n          height\n        } = window;\n        this.setState({\n          dimensions: {\n            width,\n            height\n          },\n          isLandscape: isOrientationLandscape({\n            width,\n            height\n          })\n        });\n      });\n\n      var {\n        width: _width,\n        height: _height\n      } = Dimensions.get('window');\n      this.state = {\n        dimensions: {\n          width: _width,\n          height: _height\n        },\n        isLandscape: isOrientationLandscape({\n          width: _width,\n          height: _height\n        })\n      };\n    }\n\n    componentDidMount() {\n      Dimensions.addEventListener('change', this.handleOrientationChange);\n    }\n\n    componentWillUnmount() {\n      Dimensions.removeEventListener('change', this.handleOrientationChange);\n    }\n\n    render() {\n      return React.createElement(WrappedComponent, _extends({}, this.props, this.state));\n    }\n\n  }\n\n  _defineProperty(EnhancedComponent, \"displayName\", \"withDimensions(\".concat(WrappedComponent.displayName, \")\"));\n\n  return hoistNonReactStatic(EnhancedComponent, WrappedComponent);\n}","map":{"version":3,"sources":["withDimensions.tsx"],"names":["isOrientationLandscape","height","width","React","WrappedComponent","constructor","Dimensions","dimensions","isLandscape","componentDidMount","componentWillUnmount","window","render","hoistNonReactStatic"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;AAEA,OAAA,mBAAA,MAAA,yBAAA;AAYA,OAAO,IAAMA,sBAAsB,GAAG;AAAA,MAAC;AAAA,IAAA,KAAA;AAASC,IAAAA;AAAT,GAAD;AAAA,SACpCC,KAAK,GADA,MAA+B;AAAA,CAA/B;AAGP,eAAe,SAAA,cAAA,CAAA,gBAAA,EAEgE;AAC7E,QAAA,iBAAA,SAAgCC,KAAK,CAArC,SAAA,CAAgD;AAG9CE,IAAAA,WAAW,CAAA,KAAA,EAAe;AACxB,YAAA,KAAA;;AADwB,MAAA,eAAA,CAAA,IAAA,EAAA,yBAAA,EAkBA,WAAwC;AAAA,YAAvC;AAAEM,UAAAA;AAAF,SAAuC;AAChE,YAAM;AAAA,UAAA,KAAA;AAASV,UAAAA;AAAT,YAAN,MAAA;AACA,aAAA,QAAA,CAAc;AACZM,UAAAA,UAAU,EAAE;AAAA,YAAA,KAAA;AAASN,YAAAA;AAAT,WADA;AAEZO,UAAAA,WAAW,EAAER,sBAAsB,CAAC;AAAA,YAAA,KAAA;AAASC,YAAAA;AAAT,WAAD;AAFvB,SAAd;AApBwB,OAAA,CAAA;;AAGxB,UAAM;AAAEC,QAAAA,KAAK,EAAP,MAAA;AAASD,QAAAA,MAAM,EAANA;AAAT,UAAoBK,UAAU,CAAVA,GAAAA,CAA1B,QAA0BA,CAA1B;AACA,WAAA,KAAA,GAAa;AACXC,QAAAA,UAAU,EAAE;AAAEL,UAAAA,KAAK,EAAP,MAAA;AAASD,UAAAA,MAAM,EAANA;AAAT,SADD;AAEXO,QAAAA,WAAW,EAAER,sBAAsB,CAAC;AAAEE,UAAAA,KAAK,EAAP,MAAA;AAASD,UAAAA,MAAM,EAANA;AAAT,SAAD;AAFxB,OAAb;AAID;;AAEDQ,IAAAA,iBAAiB,GAAG;AAClBH,MAAAA,UAAU,CAAVA,gBAAAA,CAAAA,QAAAA,EAAsC,KAAtCA,uBAAAA;AACD;;AAEDI,IAAAA,oBAAoB,GAAG;AACrBJ,MAAAA,UAAU,CAAVA,mBAAAA,CAAAA,QAAAA,EAAyC,KAAzCA,uBAAAA;AACD;;AAUDM,IAAAA,MAAM,GAAG;AAEP,aAAO,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA,QAAA,CAAA,EAAA,EAAsB,KAAtB,KAAA,EAAsC,KAA7C,KAAO,CAAA,CAAP;AACD;;AAhC6C;;AAD6B,EAAA,eAAA,CAAA,iBAAA,EAAA,aAAA,EAAA,kBAAA,MAAA,CAEpCR,gBAAgB,CAFoB,WAAA,EAAA,GAAA,CAAA,CAAA;;AAqC7E,SAAOS,mBAAmB,CAAA,iBAAA,EAA1B,gBAA0B,CAA1B;AACD","sourcesContent":["import * as React from 'react';\nimport { Dimensions, ScaledSize } from 'react-native';\nimport hoistNonReactStatic from 'hoist-non-react-statics';\n\ntype DimensionsType = {\n  width: number;\n  height: number;\n};\n\ntype InjectedProps = {\n  dimensions: DimensionsType;\n  isLandscape: boolean;\n};\n\nexport const isOrientationLandscape = ({ width, height }: DimensionsType) =>\n  width > height;\n\nexport default function withDimensions<Props extends InjectedProps>(\n  WrappedComponent: React.ComponentType<Props>\n): React.ComponentType<Pick<Props, Exclude<keyof Props, keyof InjectedProps>>> {\n  class EnhancedComponent extends React.Component {\n    static displayName = `withDimensions(${WrappedComponent.displayName})`;\n\n    constructor(props: Props) {\n      super(props);\n\n      const { width, height } = Dimensions.get('window');\n      this.state = {\n        dimensions: { width, height },\n        isLandscape: isOrientationLandscape({ width, height }),\n      };\n    }\n\n    componentDidMount() {\n      Dimensions.addEventListener('change', this.handleOrientationChange);\n    }\n\n    componentWillUnmount() {\n      Dimensions.removeEventListener('change', this.handleOrientationChange);\n    }\n\n    handleOrientationChange = ({ window }: { window: ScaledSize }) => {\n      const { width, height } = window;\n      this.setState({\n        dimensions: { width, height },\n        isLandscape: isOrientationLandscape({ width, height }),\n      });\n    };\n\n    render() {\n      // @ts-ignore\n      return <WrappedComponent {...this.props} {...this.state} />;\n    }\n  }\n\n  // @ts-ignore\n  return hoistNonReactStatic(EnhancedComponent, WrappedComponent);\n}\n"]},"metadata":{},"sourceType":"module"}