{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { RCTDeviceEventEmitter, UnavailabilityError } from '@unimodules/core';\nimport { EventEmitter } from 'fbemitter';\nimport ExponentUpdates from \"./ExponentUpdates\";\nexport function reload() {\n  return _reload.apply(this, arguments);\n}\n\nfunction _reload() {\n  _reload = _asyncToGenerator(function* () {\n    yield ExponentUpdates.reload();\n  });\n  return _reload.apply(this, arguments);\n}\n\nexport function reloadFromCache() {\n  return _reloadFromCache.apply(this, arguments);\n}\n\nfunction _reloadFromCache() {\n  _reloadFromCache = _asyncToGenerator(function* () {\n    yield ExponentUpdates.reloadFromCache();\n  });\n  return _reloadFromCache.apply(this, arguments);\n}\n\nexport function checkForUpdateAsync() {\n  return _checkForUpdateAsync.apply(this, arguments);\n}\n\nfunction _checkForUpdateAsync() {\n  _checkForUpdateAsync = _asyncToGenerator(function* () {\n    if (!ExponentUpdates.checkForUpdateAsync) {\n      throw new UnavailabilityError('Updates', 'checkForUpdateAsync');\n    }\n\n    var result = yield ExponentUpdates.checkForUpdateAsync();\n\n    if (!result) {\n      return {\n        isAvailable: false\n      };\n    }\n\n    return {\n      isAvailable: true,\n      manifest: typeof result === 'string' ? JSON.parse(result) : result\n    };\n  });\n  return _checkForUpdateAsync.apply(this, arguments);\n}\n\nexport function fetchUpdateAsync() {\n  return _fetchUpdateAsync.apply(this, arguments);\n}\n\nfunction _fetchUpdateAsync() {\n  _fetchUpdateAsync = _asyncToGenerator(function* () {\n    var {\n      eventListener\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (!ExponentUpdates.fetchUpdateAsync) {\n      throw new UnavailabilityError('Updates', 'fetchUpdateAsync');\n    }\n\n    var subscription;\n    var result;\n\n    if (eventListener && typeof eventListener === 'function') {\n      subscription = addListener(eventListener);\n    }\n\n    try {\n      result = yield ExponentUpdates.fetchUpdateAsync();\n    } finally {\n      subscription && subscription.remove();\n    }\n\n    if (!result) {\n      return {\n        isNew: false\n      };\n    }\n\n    return {\n      isNew: true,\n      manifest: typeof result === 'string' ? JSON.parse(result) : result\n    };\n  });\n  return _fetchUpdateAsync.apply(this, arguments);\n}\n\nexport function clearUpdateCacheExperimentalAsync(_x) {\n  return _clearUpdateCacheExperimentalAsync.apply(this, arguments);\n}\n\nfunction _clearUpdateCacheExperimentalAsync() {\n  _clearUpdateCacheExperimentalAsync = _asyncToGenerator(function* (abiVersion) {\n    if (!ExponentUpdates.clearUpdateCacheAsync) {\n      throw new UnavailabilityError('Updates', 'clearUpdateCacheAsync');\n    }\n\n    return ExponentUpdates.clearUpdateCacheAsync(abiVersion);\n  });\n  return _clearUpdateCacheExperimentalAsync.apply(this, arguments);\n}\n\nvar _emitter;\n\nfunction _getEmitter() {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    RCTDeviceEventEmitter.addListener('Exponent.nativeUpdatesEvent', _emitEvent);\n  }\n\n  return _emitter;\n}\n\nfunction _emitEvent(params) {\n  var newParams = params;\n\n  if (typeof params === 'string') {\n    newParams = JSON.parse(params);\n  }\n\n  if (newParams.manifestString) {\n    newParams.manifest = JSON.parse(newParams.manifestString);\n    delete newParams.manifestString;\n  }\n\n  if (!_emitter) {\n    throw new Error(\"EventEmitter must be initialized to use from its listener\");\n  }\n\n  _emitter.emit('Exponent.updatesEvent', newParams);\n}\n\nexport function addListener(listener) {\n  var emitter = _getEmitter();\n\n  return emitter.addListener('Exponent.updatesEvent', listener);\n}\nexport var EventType = {\n  DOWNLOAD_STARTED: 'downloadStart',\n  DOWNLOAD_PROGRESS: 'downloadProgress',\n  DOWNLOAD_FINISHED: 'downloadFinished',\n  NO_UPDATE_AVAILABLE: 'noUpdateAvailable',\n  ERROR: 'error'\n};","map":{"version":3,"sources":["../../src/Updates/Updates.ts"],"names":[],"mappings":"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","sourcesContent":["import { RCTDeviceEventEmitter, UnavailabilityError } from '@unimodules/core';\nimport Constants from 'expo-constants';\nimport { EventEmitter, EventSubscription } from 'fbemitter';\n\nimport ExponentUpdates from './ExponentUpdates';\n\ntype Manifest = typeof Constants.manifest;\n\ntype UpdateCheckResult = { isAvailable: false } | { isAvailable: true; manifest: Manifest };\n\ntype UpdateFetchResult = { isNew: false } | { isNew: true; manifest: Manifest };\n\ntype UpdateEvent =\n  | { type: 'downloadStart' | 'downloadProgress' | 'noUpdateAvailable' }\n  | { type: 'downloadFinished'; manifest: Manifest }\n  | { type: 'error'; message: string };\n\ntype UpdateEventListener = (event: UpdateEvent) => void;\n\nexport async function reload(): Promise<void> {\n  await ExponentUpdates.reload();\n}\n\nexport async function reloadFromCache(): Promise<void> {\n  await ExponentUpdates.reloadFromCache();\n}\n\nexport async function checkForUpdateAsync(): Promise<UpdateCheckResult> {\n  if (!ExponentUpdates.checkForUpdateAsync) {\n    throw new UnavailabilityError('Updates', 'checkForUpdateAsync');\n  }\n  const result = await ExponentUpdates.checkForUpdateAsync();\n  if (!result) {\n    return { isAvailable: false };\n  }\n\n  return {\n    isAvailable: true,\n    manifest: typeof result === 'string' ? JSON.parse(result) : result,\n  };\n}\n\nexport async function fetchUpdateAsync({\n  eventListener,\n}: { eventListener?: UpdateEventListener } = {}): Promise<UpdateFetchResult> {\n  if (!ExponentUpdates.fetchUpdateAsync) {\n    throw new UnavailabilityError('Updates', 'fetchUpdateAsync');\n  }\n  let subscription;\n  let result;\n  if (eventListener && typeof eventListener === 'function') {\n    subscription = addListener(eventListener);\n  }\n  try {\n    result = await ExponentUpdates.fetchUpdateAsync();\n  } finally {\n    subscription && subscription.remove();\n  }\n\n  if (!result) {\n    return { isNew: false };\n  }\n\n  return {\n    isNew: true,\n    manifest: typeof result === 'string' ? JSON.parse(result) : result,\n  };\n}\n\nexport async function clearUpdateCacheExperimentalAsync(abiVersion: string): Promise<void> {\n  if (!ExponentUpdates.clearUpdateCacheAsync) {\n    throw new UnavailabilityError('Updates', 'clearUpdateCacheAsync');\n  }\n  return ExponentUpdates.clearUpdateCacheAsync(abiVersion);\n}\n\nlet _emitter: EventEmitter | null;\n\nfunction _getEmitter(): EventEmitter {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    RCTDeviceEventEmitter.addListener('Exponent.nativeUpdatesEvent', _emitEvent);\n  }\n  return _emitter;\n}\n\nfunction _emitEvent(params): void {\n  let newParams = params;\n  if (typeof params === 'string') {\n    newParams = JSON.parse(params);\n  }\n  if (newParams.manifestString) {\n    newParams.manifest = JSON.parse(newParams.manifestString);\n    delete newParams.manifestString;\n  }\n\n  if (!_emitter) {\n    throw new Error(`EventEmitter must be initialized to use from its listener`);\n  }\n  _emitter.emit('Exponent.updatesEvent', newParams);\n}\n\nexport function addListener(listener: Function): EventSubscription {\n  let emitter = _getEmitter();\n  return emitter.addListener('Exponent.updatesEvent', listener);\n}\n\nexport const EventType = {\n  DOWNLOAD_STARTED: 'downloadStart',\n  DOWNLOAD_PROGRESS: 'downloadProgress',\n  DOWNLOAD_FINISHED: 'downloadFinished',\n  NO_UPDATE_AVAILABLE: 'noUpdateAvailable',\n  ERROR: 'error',\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}