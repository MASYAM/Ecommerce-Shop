{"ast":null,"code":"var _jsxFileName = \"/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/src/screens/legacy/RegisterScreen/index.js\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { Actions } from 'react-native-router-flux';\nimport { Header, Container, Content, Button, Text, Toast, Spinner, CheckBox, Radio, ListItem, Left, Right, Body } from 'native-base';\nimport { NavigationActions, StackActions, NavigationProp } from 'react-navigation';\nimport { bindActionCreators } from 'redux';\nimport { connect } from \"react-redux\";\nimport { Input } from 'react-native-elements';\nimport styles from \"./style\";\nimport { ScreenNames, ImageSources } from \"../../../constants\";\nimport { BackButton } from \"../../../components/StandardButtons\";\nimport { StandardHeader } from \"../../../components/legacy/Header\";\nimport { authActions } from \"../../../store/actions\";\nimport { ActionStatusTypeValues } from \"../../../constants/actionStatusTypes\";\nimport { selectViewActionStatus } from \"../../../store/selectors/app\";\n\nclass RegisterScreen extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.closeDialog = () => {\n      this.setState({\n        isShowAlert: false\n      });\n    };\n\n    this.doAgreeTNC = () => {\n      this.setState({\n        isAgreeTNC: !this.state.isAgreeTNC\n      });\n    };\n\n    this.doLoginNow = () => {\n      var {\n        navigation\n      } = this.props;\n      navigation.replace(ScreenNames.LoginScreen);\n    };\n\n    this.validate = text => {\n      var reg = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n\n      if (reg.test(text) === false) {\n        return false;\n      } else {\n        return true;\n      }\n    };\n\n    this.doRegister = () => {\n      if (!this.username || !this.email || !this.password || !this.confirmPassword) {\n        Toast.show({\n          type: \"danger\",\n          text: 'Please enter username, email ,password  and confirm password'\n        });\n      } else if (this.validate(this.email) == false) {\n        Toast.show({\n          type: \"danger\",\n          text: 'Your email address is not a correct format'\n        });\n      } else if (this.password !== this.confirmPassword) {\n        Toast.show({\n          type: \"danger\",\n          text: 'Your confirm password is not matching with your password'\n        });\n      } else if (!this.state.isAgreeTNC) {\n        Toast.show({\n          type: \"danger\",\n          text: 'You need to agree the terms and condition before register'\n        });\n      } else {\n        this.processSubmitForm();\n      }\n    };\n\n    this.processSubmitForm = () => {\n      this.setState({\n        isLoading: true\n      });\n      Keyboard.dismiss();\n      var {\n        authActions,\n        navigation\n      } = this.props;\n      authActions.registerAccount(navigation.state.key, this.username, this.email, this.password);\n    };\n\n    this.doNext = () => {\n      Keyboard.dismiss();\n      var {\n        navigation\n      } = this.props;\n      var action = StackActions.reset({\n        index: 0,\n        actions: [StackActions.replace({\n          routeName: ScreenNames.root,\n          actions: [StackActions.push({\n            routeName: ScreenNames.AppMain\n          })]\n        })]\n      });\n      navigation.dispatch(action);\n    };\n\n    this.state = {\n      isLoading: false,\n      lastRequest: 0,\n      lastSent: 0,\n      isAgreeTNC: false,\n      isShowAlert: false,\n      isShowingSuccessAlert: false\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    var {\n      props,\n      state\n    } = this;\n\n    if (state.lastRequest !== props.registerRequest.lastRequest) {\n      if (props.registerRequest.status === ActionStatusTypeValues.ERROR) {\n        this.setState({\n          isLoading: false,\n          lastRequest: props.registerRequest.lastRequest\n        }, () => {\n          Toast.show({\n            type: \"danger\",\n            text: \"Sorry, it seems you are facing some technical problem. Please contact IT Support.\"\n          });\n        });\n      } else if (props.registerRequest.status === ActionStatusTypeValues.COMPLETED) {\n        console.log(this.props.registerStatus);\n        console.log(this.props.registerErrorMessage);\n\n        if (this.props.registerStatus === \"success\") {\n          this.setState({\n            isLoading: false,\n            isShowingSuccessAlert: true,\n            lastRequest: props.registerRequest.lastRequest\n          }, () => {});\n        } else {\n          this.setState({\n            isLoading: false,\n            isShowAlert: true,\n            lastRequest: props.registerRequest.lastRequest\n          }, () => {});\n        }\n      }\n    }\n  }\n\n  render() {\n    var {\n      props\n    } = this;\n    var isCompleteSubmit = props.registerRequest.status === ActionStatusTypeValues.COMPLETED;\n    var registerStatus = props.registerStatus;\n    var registerErrorMessage = props.registerErrorMessage;\n    return React.createElement(Container, {\n      style: styles.registerBackgroundStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 13\n      }\n    }, React.createElement(StandardHeader, {\n      back: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 13\n      }\n    }), React.createElement(Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 13\n      }\n    }, React.createElement(View, {\n      style: styles.body,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }\n    }, React.createElement(View, {\n      style: styles.descWrap,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 21\n      }\n    }, React.createElement(Text, {\n      style: styles.txt,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 25\n      }\n    }, \"Create\"), React.createElement(Text, {\n      style: styles.txt,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 25\n      }\n    }, \"your account\")), React.createElement(View, {\n      style: styles.formInputContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 21\n      }\n    }, React.createElement(Text, {\n      style: styles.inputHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 25\n      }\n    }, \"Your name\"), React.createElement(TextInput, {\n      ref: el => {\n        this.usernameInput = el;\n      },\n      onChangeText: text => this.username = text,\n      id: \"username\",\n      placeholder: \"Enter your name\",\n      autoCapitalize: \"none\",\n      style: styles.textInputStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 25\n      }\n    }), React.createElement(Text, {\n      style: styles.inputHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 25\n      }\n    }, \"Your email\"), React.createElement(TextInput, {\n      ref: el => {\n        this.emailInput = el;\n      },\n      onChangeText: text => this.email = text,\n      id: \"email\",\n      placeholder: \"Enter your email address\",\n      autoCompleteType: 'email',\n      autoCapitalize: \"none\",\n      style: styles.textInputStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 25\n      }\n    }), React.createElement(Text, {\n      style: styles.inputHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 25\n      }\n    }, \"Your password\"), React.createElement(TextInput, {\n      ref: el => {\n        this.passwordInput = el;\n      },\n      onChangeText: text => this.password = text,\n      id: \"password\",\n      placeholder: \"Enter your password\",\n      autoCompleteType: 'password',\n      secureTextEntry: true,\n      style: styles.textInputStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 25\n      }\n    }), React.createElement(Text, {\n      style: styles.inputHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 25\n      }\n    }, \"Your confirm password\"), React.createElement(TextInput, {\n      ref: el => {\n        this.confirmPasswordInput = el;\n      },\n      onChangeText: text => this.confirmPassword = text,\n      id: \"password\",\n      placeholder: \"Enter your password again\",\n      autoCompleteType: 'password',\n      secureTextEntry: true,\n      style: styles.textInputStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 25\n      }\n    }), React.createElement(ListItem, {\n      style: styles.tncstyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 15\n      }\n    }, React.createElement(CheckBox, {\n      color: \"#000\",\n      checked: this.state.isAgreeTNC,\n      onPress: () => this.doAgreeTNC(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 13\n      }\n    }), React.createElement(Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 13\n      }\n    }, \"I agree to the Monvelli Privacy Policy.\")))), React.createElement(View, {\n      style: styles.bottomLayerFiller,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 21\n      }\n    }), React.createElement(View, {\n      style: styles.bottomLayer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 21\n      }\n    }, React.createElement(Button, {\n      transparent: true,\n      full: true,\n      style: styles.btnLogin,\n      onPress: this.doRegister,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 25\n      }\n    }, React.createElement(Text, {\n      style: styles.btnLoginTextStyle,\n      large: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 29\n      }\n    }, \"Sign Up\"))))), this.state.isLoading ? React.createElement(View, {\n      style: styles.loadingDialog,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 13\n      }\n    }, React.createElement(ActivityIndicator, {\n      style: styles.loadingStyle,\n      size: \"large\",\n      color: 'white',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 22\n      }\n    })) : null, this.state.isShowingSuccessAlert ? React.createElement(View, {\n      style: styles.registerSuccessDialog,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 13\n      }\n    }, React.createElement(View, {\n      style: styles.sucessWordingsContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 22\n      }\n    }, React.createElement(Text, {\n      style: styles.sucessHeading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 29\n      }\n    }, \"Register Success\"), React.createElement(Text, {\n      style: styles.sucessDescription,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 29\n      }\n    }, \"Please your email for verify your email account.\"), React.createElement(Button, {\n      transparent: true,\n      full: true,\n      style: styles.btnLogonNow,\n      onPress: this.doLoginNow,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 29\n      }\n    }, React.createElement(Text, {\n      style: styles.btnLogonNowTextStyle,\n      large: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 33\n      }\n    }, \"Log in Now!\")))) : null, this.state.isShowAlert ? React.createElement(View, {\n      style: styles.registerSuccessDialog,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 13\n      }\n    }, React.createElement(View, {\n      style: styles.sucessWordingsContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 22\n      }\n    }, React.createElement(Text, {\n      style: styles.errorHeading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 29\n      }\n    }, \"Error\"), React.createElement(Text, {\n      style: styles.sucessDescription,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 29\n      }\n    }, registerErrorMessage), React.createElement(Button, {\n      transparent: true,\n      full: true,\n      style: styles.btnLogonNow,\n      onPress: this.closeDialog,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 29\n      }\n    }, React.createElement(Text, {\n      style: styles.btnLogonNowTextStyle,\n      large: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 33\n      }\n    }, \"Close\")))) : null);\n  }\n\n}\n\nvar mapStateToProps = (state, ownProps) => {\n  var {\n    navigation\n  } = ownProps;\n  return {\n    registerStatus: state.auth.registerStatus,\n    registerErrorMessage: state.auth.registerErrorMessage,\n    registerRequest: selectViewActionStatus(state, navigation.state.key, authActions.REGISTER_ACCOUNT)\n  };\n};\n\nvar mapDispatchToProps = dispatch => {\n  return {\n    authActions: bindActionCreators(authActions, dispatch)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RegisterScreen);","map":{"version":3,"sources":["/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/src/screens/legacy/RegisterScreen/index.js"],"names":["React","Actions","Header","Container","Content","Button","Text","Toast","Spinner","CheckBox","Radio","ListItem","Left","Right","Body","NavigationActions","StackActions","NavigationProp","bindActionCreators","connect","Input","styles","ScreenNames","ImageSources","BackButton","StandardHeader","authActions","ActionStatusTypeValues","selectViewActionStatus","RegisterScreen","Component","constructor","props","closeDialog","setState","isShowAlert","doAgreeTNC","isAgreeTNC","state","doLoginNow","navigation","replace","LoginScreen","validate","text","reg","test","doRegister","username","email","password","confirmPassword","show","type","processSubmitForm","isLoading","Keyboard","dismiss","registerAccount","key","doNext","action","reset","index","actions","routeName","root","push","AppMain","dispatch","lastRequest","lastSent","isShowingSuccessAlert","componentDidUpdate","prevProps","registerRequest","status","ERROR","COMPLETED","console","log","registerStatus","registerErrorMessage","render","isCompleteSubmit","registerBackgroundStyle","body","descWrap","txt","formInputContainer","inputHeader","el","usernameInput","textInputStyle","emailInput","passwordInput","confirmPasswordInput","tncstyle","bottomLayerFiller","bottomLayer","btnLogin","btnLoginTextStyle","loadingDialog","loadingStyle","registerSuccessDialog","sucessWordingsContainer","sucessHeading","sucessDescription","btnLogonNow","btnLogonNowTextStyle","errorHeading","mapStateToProps","ownProps","auth","REGISTER_ACCOUNT","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {\n    View,\n    TextInput,\n    ActivityIndicator,\n    Image,\n    TouchableOpacity,\n    KeyboardAvoidingView,\n    Platform,\n    Keyboard,\n    StatusBar,\n    ImageBackground,\n    Alert\n} from 'react-native'\nimport { Actions } from 'react-native-router-flux'\nimport { Header, Container, Content, Button, Text, Toast , Spinner, CheckBox, Radio, ListItem, Left, Right, Body} from 'native-base'\nimport { NavigationActions, StackActions, NavigationProp } from 'react-navigation';\nimport { bindActionCreators } from 'redux';\nimport { connect } from \"react-redux\";\nimport { Input } from 'react-native-elements';\nimport styles from './style'\nimport { ScreenNames, ImageSources } from '../../../constants'\nimport { BackButton } from '../../../components/StandardButtons'\nimport { StandardHeader } from '../../../components/legacy/Header';\nimport { authActions } from  '../../../store/actions';\nimport { ActionStatusTypeValues } from '../../../constants/actionStatusTypes';\nimport { selectViewActionStatus } from '../../../store/selectors/app';\n\ntype OwnProps = {\n    navigation: NavigationProp;\n}\n\ntype Props = OwnProps & {\n    registerRequest: ViewActionStateInfo,\n    authActions: typeof authActions,\n}\nclass RegisterScreen extends React.Component<Props> {\n\n    constructor(props) {\n        super(props);\n        this.state = { \n            isLoading: false,\n            lastRequest:0,\n            lastSent: 0,\n            isAgreeTNC: false,\n            isShowAlert:false,\n            isShowingSuccessAlert: false\n        };\n    }\n\n    closeDialog=()=>{\n        this.setState({\n            isShowAlert:false\n        });\n    }\n    doAgreeTNC=()=>{\n        this.setState({\n            isAgreeTNC: !this.state.isAgreeTNC\n        });\n    }\n\n    doLoginNow=() =>{\n    //     this.setState({\n    //         isRegisterSuccess:false\n    //     });\n\n    //     this.username = null;\n    //     this.email  = null;\n    //     this.password = null;\n\n    //     this.usernameInput.clear();\n    //     this.emailInput.clear();\n    //     this.passwordInput.clear();\n\n\n\n    //    Actions.push(ScreenNames.LoginScreen);\n\n       const {  navigation } = this.props;\n       navigation.replace(ScreenNames.LoginScreen);\n\n\n       \n    }\n\n    validate = (text) => {\n        let reg = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n        if (reg.test(text) === false) {\n           return false;\n        }\n        else {\n            return true;\n\n        }\n      }\n\n    doRegister = () => {\n\n        if ( !this.username || !this.email || !this.password || !this.confirmPassword) {\n            Toast.show({\n                type: \"danger\",\n                text: 'Please enter username, email ,password  and confirm password',\n            });\n        }else if( this.validate(this.email) == false){\n            Toast.show({\n                type: \"danger\",\n                text: 'Your email address is not a correct format',\n            });\n        \n        }else if(this.password !== this.confirmPassword){\n            Toast.show({\n                type: \"danger\",\n                text: 'Your confirm password is not matching with your password',\n            });\n        \n        }else if(!this.state.isAgreeTNC){\n            Toast.show({\n                type: \"danger\",\n                text: 'You need to agree the terms and condition before register',\n            });\n        \n        }\n        else{\n            this.processSubmitForm();\n        }\n    \n    }\n\n    processSubmitForm = () =>{\n        this.setState({\n            isLoading: true\n        });\n        Keyboard.dismiss();\n        const { authActions, navigation } = this.props;\n        authActions.registerAccount(navigation.state.key, this.username, this.email, this.password);\n    }\n\n    doNext = () => {\n        Keyboard.dismiss();\n        const { navigation} = this.props;\n        // navigation.popToTop();\n        const action = StackActions.reset({\n            index:0,\n            actions: [\n                StackActions.replace({\n                    routeName: ScreenNames.root,\n                    actions: [\n\n                StackActions.push({\n                    routeName: ScreenNames.AppMain,\n                })\n                    ]\n                }),\n            ],\n        })\n        navigation.dispatch(action);\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        const { props, state } = this;\n\n        if (state.lastRequest !== props.registerRequest.lastRequest) {\n            if (props.registerRequest.status === ActionStatusTypeValues.ERROR) {\n                this.setState({\n                    isLoading: false,\n                    lastRequest: props.registerRequest.lastRequest,\n                }, () => {\n                    Toast.show({\n                        type: \"danger\",\n                        text:\"Sorry, it seems you are facing some technical problem. Please contact IT Support.\"\n                    })\n                });\n            }\n            else if (props.registerRequest.status === ActionStatusTypeValues.COMPLETED) {\n\n\n                console.log(this.props.registerStatus);\n                console.log(this.props.registerErrorMessage);\n                if(this.props.registerStatus===\"success\"){\n\n                    this.setState({\n                        isLoading: false,\n                        isShowingSuccessAlert: true,\n                        lastRequest: props.registerRequest.lastRequest,\n                    }, () => {\n    \n                        // if (props.isPhoneVerified) {\n                        //     Actions.push(ScreenNames.ActivationComplete);\n                        // } else {\n                        //     Actions.push(ScreenNames.PhoneVerification);\n                        // }\n                    });\n\n\n                }else{\n\n\n                    this.setState({\n                        isLoading: false,\n                        isShowAlert:true,\n                        lastRequest: props.registerRequest.lastRequest,\n                    }, () => {\n    \n                        // if (props.isPhoneVerified) {\n                        //     Actions.push(ScreenNames.ActivationComplete);\n                        // } else {\n                        //     Actions.push(ScreenNames.PhoneVerification);\n                        // }\n                    });\n\n\n                }\n\n\n            }\n\n        }\n\n\n\n    }\n\n    render() {\n        const { props } = this;\n        const isCompleteSubmit = props.registerRequest.status === ActionStatusTypeValues.COMPLETED;\n        const registerStatus = props.registerStatus;\n        const registerErrorMessage = props.registerErrorMessage;\n\n        \n\n        return (\n            <Container style={styles.registerBackgroundStyle}>\n            <StandardHeader back />\n            <Content>\n                <View style={styles.body}>\n                    <View style={styles.descWrap}>\n                        <Text style={styles.txt}>Create</Text>\n                        <Text style={styles.txt}>your account</Text>\n                    </View>\n                    <View style={styles.formInputContainer}>\n        \n                        <Text style={styles.inputHeader}>Your name</Text>\n                        <TextInput \n                            ref= {(el) => { this.usernameInput = el; }}\n                            onChangeText={(text) => this.username = text}\n                            id=\"username\" \n                            placeholder='Enter your name' \n                            autoCapitalize = 'none'\n                            style={styles.textInputStyle}></TextInput>\n        \n                        <Text style={styles.inputHeader}>Your email</Text>\n                        <TextInput \n                            ref= {(el) => { this.emailInput = el; }}\n                            onChangeText={(text) => this.email = text}\n                            id=\"email\" \n                            placeholder='Enter your email address' \n                            autoCompleteType={'email'}\n                            autoCapitalize = 'none'\n                            style={styles.textInputStyle}></TextInput>\n\n                        <Text style={styles.inputHeader}>Your password</Text>\n                        <TextInput \n                            ref= {(el) => { this.passwordInput = el; }}\n                            onChangeText={(text) => this.password = text}\n                            id=\"password\" \n                            placeholder='Enter your password' \n                            autoCompleteType={'password'}\n                            secureTextEntry={true} \n                            style={styles.textInputStyle}></TextInput>\n\n                        <Text style={styles.inputHeader}>Your confirm password</Text>\n                        <TextInput \n                            ref= {(el) => { this.confirmPasswordInput = el; }}\n                            onChangeText={(text) => this.confirmPassword = text}\n                            id=\"password\" \n                            placeholder='Enter your password again' \n                            autoCompleteType={'password'}\n                            secureTextEntry={true} \n                            style={styles.textInputStyle}></TextInput>\n\n\n\n\n\n              <ListItem style={styles.tncstyle} >\n            <CheckBox\n              color=\"#000\"\n              checked={this.state.isAgreeTNC}\n              onPress={() => this.doAgreeTNC()}\n            />\n            <Body>\n            <Text>I agree to the Monvelli Privacy Policy.</Text>\n            </Body>\n          </ListItem>\n\n\n\n\n\n\n\n                    </View>\n        \n                    <View style={styles.bottomLayerFiller}></View>\n                    <View style={styles.bottomLayer}>\n                        <Button transparent full style={styles.btnLogin} onPress={this.doRegister}>\n                            <Text style={styles.btnLoginTextStyle} large>Sign Up</Text>\n                        </Button>\n        \n                        {/* <Button transparent full style={styles.btnLoginFacebook} onPress={this.doRegister}>\n                            <Text style={styles.btnLoginfacebookTextStyle} large>Sign Up with Facebook</Text>\n                        </Button> */}\n                    </View>\n        \n                </View>\n            </Content>\n         \n            {this.state.isLoading ? (\n            <View style={styles.loadingDialog}>\n                     <ActivityIndicator style={styles.loadingStyle} size=\"large\" color={'white'} />\n            </View>\n        ) : null}\n\n\n\n        { this.state.isShowingSuccessAlert ? (\n            <View style={styles.registerSuccessDialog} >\n                     <View style={styles.sucessWordingsContainer}>\n                            <Text style={styles.sucessHeading}>Register Success</Text>\n                            <Text style={styles.sucessDescription}>Please your email for verify your email account.</Text>\n                            <Button transparent full style={styles.btnLogonNow} onPress={this.doLoginNow}>\n                                <Text style={styles.btnLogonNowTextStyle} large>Log in Now!</Text>\n                            </Button> \n                     </View>\n               \n            </View>\n        ) : null}\n\n\n\n\n        { this.state.isShowAlert  ? (\n            <View style={styles.registerSuccessDialog} >\n                     <View style={styles.sucessWordingsContainer}>\n                            <Text style={styles.errorHeading}>Error</Text>\n                            <Text style={styles.sucessDescription}>{registerErrorMessage}</Text>\n                            <Button transparent full style={styles.btnLogonNow} onPress={this.closeDialog}>\n                                <Text style={styles.btnLogonNowTextStyle} large>Close</Text>\n                            </Button> \n                     </View>\n               \n            </View>\n        ) : null}\n\n\n\n\n        </Container>\n        )\n    }\n}\n\n\nconst mapStateToProps = (state, ownProps: OwnProps) => {\n    const { navigation } = ownProps;\n    return {\n        registerStatus: state.auth.registerStatus,\n        registerErrorMessage: state.auth.registerErrorMessage,\n        registerRequest: selectViewActionStatus(state, navigation.state.key, authActions.REGISTER_ACCOUNT),\n    };\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        authActions: bindActionCreators(authActions, dispatch),\n    };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(RegisterScreen);"]},"metadata":{},"sourceType":"module"}