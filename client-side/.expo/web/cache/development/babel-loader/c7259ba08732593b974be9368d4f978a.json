{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport AnimatedNode from \"./AnimatedNode\";\nimport AnimatedEvent from \"./AnimatedEvent\";\nimport { createOrReuseStyleNode } from \"./AnimatedStyle\";\nimport invariant from 'fbjs/lib/invariant';\nimport deepEqual from 'fbjs/lib/areEqual';\nimport { val } from \"../val\";\n\nfunction sanitizeProps(inputProps) {\n  var props = {};\n\n  for (var key in inputProps) {\n    var value = inputProps[key];\n\n    if (value instanceof AnimatedNode && !(value instanceof AnimatedEvent)) {\n      props[key] = value.__nodeID;\n    }\n  }\n\n  return props;\n}\n\nexport function createOrReusePropsNode(props, callback, oldNode) {\n  if (props.style) {\n    props = _objectSpread({}, props, {\n      style: createOrReuseStyleNode(props.style, oldNode && oldNode._props.style)\n    });\n  }\n\n  var config = sanitizeProps(props);\n\n  if (oldNode && deepEqual(config, oldNode._config)) {\n    return oldNode;\n  }\n\n  return new AnimatedProps(props, config, callback);\n}\n\nclass AnimatedProps extends AnimatedNode {\n  constructor(props, config, callback) {\n    super({\n      type: 'props',\n      props: config\n    }, Object.values(props).filter(n => !(n instanceof AnimatedEvent)));\n    this._config = config;\n    this._props = props;\n    this._callback = callback;\n\n    this.__attach();\n  }\n\n  toString() {\n    return \"AnimatedProps, id: \".concat(this.__nodeID);\n  }\n\n  __onEvaluate() {\n    var props = {};\n\n    for (var key in this._props) {\n      var value = this._props[key];\n\n      if (value instanceof AnimatedNode) {\n        props[key] = value.__getValue();\n      }\n    }\n\n    return props;\n  }\n\n  __detach() {\n    var nativeViewTag = findNodeHandle(this._animatedView);\n    invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');\n\n    this._disconnectAnimatedView(nativeViewTag);\n\n    super.__detach();\n  }\n\n  update() {\n    this._callback();\n\n    if (!this._animatedView) {\n      return;\n    }\n\n    val(this);\n  }\n\n  setNativeView(animatedView) {\n    if (this._animatedView === animatedView) {\n      return;\n    }\n\n    this._animatedView = animatedView;\n    var nativeViewTag = findNodeHandle(this._animatedView);\n    invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');\n\n    this._connectAnimatedView(nativeViewTag);\n  }\n\n}","map":{"version":3,"sources":["/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/node_modules/react-native-reanimated/src/core/AnimatedProps.js"],"names":["AnimatedNode","AnimatedEvent","createOrReuseStyleNode","invariant","deepEqual","val","sanitizeProps","inputProps","props","key","value","__nodeID","createOrReusePropsNode","callback","oldNode","style","_props","config","_config","AnimatedProps","constructor","type","Object","values","filter","n","_callback","__attach","toString","__onEvaluate","__getValue","__detach","nativeViewTag","findNodeHandle","_animatedView","_disconnectAnimatedView","update","setNativeView","animatedView","_connectAnimatedView"],"mappings":"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","sourcesContent":["import { findNodeHandle } from 'react-native';\n\nimport AnimatedNode from './AnimatedNode';\nimport AnimatedEvent from './AnimatedEvent';\nimport { createOrReuseStyleNode } from './AnimatedStyle';\n\nimport invariant from 'fbjs/lib/invariant';\nimport deepEqual from 'fbjs/lib/areEqual';\nimport { val } from '../val';\n\nfunction sanitizeProps(inputProps) {\n  const props = {};\n  for (const key in inputProps) {\n    const value = inputProps[key];\n    if (value instanceof AnimatedNode && !(value instanceof AnimatedEvent)) {\n      props[key] = value.__nodeID;\n    }\n  }\n  return props;\n}\n\nexport function createOrReusePropsNode(props, callback, oldNode) {\n  if (props.style) {\n    props = {\n      ...props,\n      style: createOrReuseStyleNode(\n        props.style,\n        oldNode && oldNode._props.style\n      ),\n    };\n  }\n  const config = sanitizeProps(props);\n  if (oldNode && deepEqual(config, oldNode._config)) {\n    return oldNode;\n  }\n  return new AnimatedProps(props, config, callback);\n}\n\nclass AnimatedProps extends AnimatedNode {\n  constructor(props, config, callback) {\n    super(\n      { type: 'props', props: config },\n      Object.values(props).filter(n => !(n instanceof AnimatedEvent))\n    );\n    this._config = config;\n    this._props = props;\n    this._callback = callback;\n    this.__attach();\n  }\n\n  toString() {\n    return `AnimatedProps, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    const props = {};\n    for (const key in this._props) {\n      const value = this._props[key];\n      if (value instanceof AnimatedNode) {\n        props[key] = value.__getValue();\n      }\n    }\n    return props;\n  }\n\n  __detach() {\n    const nativeViewTag = findNodeHandle(this._animatedView);\n    invariant(\n      nativeViewTag != null,\n      'Unable to locate attached view in the native tree'\n    );\n    this._disconnectAnimatedView(nativeViewTag);\n    super.__detach();\n  }\n\n  update() {\n    this._callback();\n\n    if (!this._animatedView) {\n      return;\n    }\n\n    val(this);\n  }\n\n  setNativeView(animatedView) {\n    if (this._animatedView === animatedView) {\n      return;\n    }\n    this._animatedView = animatedView;\n\n    const nativeViewTag = findNodeHandle(this._animatedView);\n    invariant(\n      nativeViewTag != null,\n      'Unable to locate attached view in the native tree'\n    );\n    this._connectAnimatedView(nativeViewTag);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}