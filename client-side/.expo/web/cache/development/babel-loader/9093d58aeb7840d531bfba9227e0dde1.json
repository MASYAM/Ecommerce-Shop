{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nexport default class NavigationEventManager extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"_actionSubscription\", void 0);\n\n    _defineProperty(this, \"_willFocusSubscription\", void 0);\n\n    _defineProperty(this, \"_willBlurSubscription\", void 0);\n\n    _defineProperty(this, \"_lastWillBlurKey\", void 0);\n\n    _defineProperty(this, \"_lastWillFocusKey\", void 0);\n\n    _defineProperty(this, \"_handleAction\", (_ref) => {\n      var {\n        state,\n        lastState,\n        action,\n        type,\n        context\n      } = _ref;\n\n      var _lastState$routes;\n\n      var {\n        navigation,\n        onEvent\n      } = this.props;\n\n      if (!navigation.isFocused()) {\n        return;\n      }\n\n      var previous = lastState ? (_lastState$routes = lastState.routes) === null || _lastState$routes === void 0 ? void 0 : _lastState$routes[lastState.index] : undefined;\n      var current = state.routes[state.index];\n      var payload = {\n        context: \"\".concat(current.key, \":\").concat(action.type, \"_\").concat(context || 'Root'),\n        state: current,\n        lastState: previous,\n        action,\n        type\n      };\n\n      if ((previous === null || previous === void 0 ? void 0 : previous.key) !== current.key) {\n        this._emitFocus(current.key, payload);\n\n        if (previous === null || previous === void 0 ? void 0 : previous.key) {\n          this._emitBlur(previous.key, payload);\n        }\n      }\n\n      if ((lastState === null || lastState === void 0 ? void 0 : lastState.isTransitioning) !== state.isTransitioning && state.isTransitioning === false) {\n        if (this._lastWillBlurKey) {\n          onEvent(this._lastWillBlurKey, 'didBlur', payload);\n        }\n\n        if (this._lastWillFocusKey) {\n          onEvent(this._lastWillFocusKey, 'didFocus', payload);\n        }\n      }\n\n      onEvent(current.key, 'action', payload);\n    });\n\n    _defineProperty(this, \"_handleWillFocus\", (_ref2) => {\n      var {\n        lastState,\n        action,\n        context,\n        type\n      } = _ref2;\n\n      var _lastState$routes2;\n\n      var {\n        navigation\n      } = this.props;\n      var route = navigation.state.routes[navigation.state.index];\n\n      this._emitFocus(route.key, {\n        context: \"\".concat(route.key, \":\").concat(action.type, \"_\").concat(context || 'Root'),\n        state: route,\n        lastState: lastState === null || lastState === void 0 ? void 0 : (_lastState$routes2 = lastState.routes) === null || _lastState$routes2 === void 0 ? void 0 : _lastState$routes2.find(r => r.key === route.key),\n        action,\n        type\n      });\n    });\n\n    _defineProperty(this, \"_handleWillBlur\", (_ref3) => {\n      var {\n        lastState,\n        action,\n        context,\n        type\n      } = _ref3;\n\n      var _lastState$routes3;\n\n      var {\n        navigation\n      } = this.props;\n      var route = navigation.state.routes[navigation.state.index];\n\n      this._emitBlur(route.key, {\n        context: \"\".concat(route.key, \":\").concat(action.type, \"_\").concat(context || 'Root'),\n        state: route,\n        lastState: lastState === null || lastState === void 0 ? void 0 : (_lastState$routes3 = lastState.routes) === null || _lastState$routes3 === void 0 ? void 0 : _lastState$routes3.find(r => r.key === route.key),\n        action,\n        type\n      });\n    });\n\n    _defineProperty(this, \"_emitFocus\", (target, payload) => {\n      if (this._lastWillBlurKey === target) {\n        this._lastWillBlurKey = undefined;\n      }\n\n      if (this._lastWillFocusKey === target) {\n        return;\n      }\n\n      this._lastWillFocusKey = target;\n      var {\n        navigation,\n        onEvent\n      } = this.props;\n      onEvent(target, 'willFocus', payload);\n\n      if (typeof navigation.state.isTransitioning !== 'boolean') {\n        onEvent(target, 'didFocus', payload);\n      }\n    });\n\n    _defineProperty(this, \"_emitBlur\", (target, payload) => {\n      if (this._lastWillFocusKey === target) {\n        this._lastWillFocusKey = undefined;\n      }\n\n      if (this._lastWillBlurKey === target) {\n        return;\n      }\n\n      this._lastWillBlurKey = target;\n      var {\n        navigation,\n        onEvent\n      } = this.props;\n      onEvent(target, 'willBlur', payload);\n\n      if (typeof navigation.state.isTransitioning !== 'boolean') {\n        onEvent(target, 'didBlur', payload);\n      }\n    });\n  }\n\n  componentDidMount() {\n    var {\n      navigation\n    } = this.props;\n    this._actionSubscription = navigation.addListener('action', this._handleAction);\n    this._willFocusSubscription = navigation.addListener('willFocus', this._handleWillFocus);\n    this._willBlurSubscription = navigation.addListener('willBlur', this._handleWillBlur);\n  }\n\n  componentWillUnmount() {\n    var _this$_actionSubscrip, _this$_willFocusSubsc, _this$_willBlurSubscr;\n\n    (_this$_actionSubscrip = this._actionSubscription) === null || _this$_actionSubscrip === void 0 ? void 0 : _this$_actionSubscrip.remove();\n    (_this$_willFocusSubsc = this._willFocusSubscription) === null || _this$_willFocusSubsc === void 0 ? void 0 : _this$_willFocusSubsc.remove();\n    (_this$_willBlurSubscr = this._willBlurSubscription) === null || _this$_willBlurSubscr === void 0 ? void 0 : _this$_willBlurSubscr.remove();\n  }\n\n  render() {\n    return null;\n  }\n\n}","map":{"version":3,"sources":["NavigationFocusEvents.js"],"names":["React","componentDidMount","navigation","componentWillUnmount","context","onEvent","previous","lastState","current","state","payload","action","type","route","r","render"],"mappings":"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","sourcesContent":["// @ts-check\n\nimport * as React from 'react';\n\n/**\n * @typedef {object} State\n * @prop {number} index\n * @prop {({ key: string } & (State | {}))[]} routes\n * @prop {boolean} [isTransitioning]\n *\n * @typedef {object} ParentPayload\n * @prop {string} type\n * @prop {object} action\n * @prop {State} state\n * @prop {State | {key: string, routes?: undefined, index?: undefined, isTransitioning?: undefined} | undefined | null} lastState\n * @prop {string} [context]\n *\n * @typedef {object} Payload\n * @prop {string} type\n * @prop {object} action\n * @prop {State | {key: string}} state\n * @prop {State | {key: string} | undefined | null} lastState\n * @prop {string} [context]\n *\n * @typedef {object} Props\n * @prop {object} navigation\n * @prop {Function} navigation.addListener\n * @prop {Function} navigation.removeListener\n * @prop {() => boolean} navigation.isFocused\n * @prop {() => object | undefined} navigation.dangerouslyGetParent\n * @prop {State} navigation.state\n * @prop {(target: string, type: string, data: any) => void} onEvent\n *\n * @extends {React.Component<Props>}\n */\nexport default class NavigationEventManager extends React.Component {\n  componentDidMount() {\n    const { navigation } = this.props;\n\n    this._actionSubscription = navigation.addListener(\n      'action',\n      this._handleAction\n    );\n\n    this._willFocusSubscription = navigation.addListener(\n      'willFocus',\n      this._handleWillFocus\n    );\n\n    this._willBlurSubscription = navigation.addListener(\n      'willBlur',\n      this._handleWillBlur\n    );\n  }\n\n  componentWillUnmount() {\n    this._actionSubscription?.remove();\n    this._willFocusSubscription?.remove();\n    this._willBlurSubscription?.remove();\n  }\n\n  /**\n   * @type {{ remove(): void } | undefined}\n   */\n  _actionSubscription;\n\n  /**\n   * @type {{ remove(): void } | undefined}\n   */\n  _willFocusSubscription;\n\n  /**\n   * @type {{ remove(): void } | undefined}\n   */\n  _willBlurSubscription;\n\n  /**\n   * @type {string | undefined}\n   */\n  _lastWillBlurKey;\n\n  /**\n   * @type {string | undefined}\n   */\n  _lastWillFocusKey;\n\n  /**\n   * The 'action' event will fire when navigation state changes.\n   * Detect if the focused route changed here and emit appropriate events.\n   *\n   * @param {ParentPayload} payload\n   */\n  _handleAction = ({ state, lastState, action, type, context }) => {\n    const { navigation, onEvent } = this.props;\n\n    // We should only emit events when the navigator is focused\n    // When navigator is not focused, screens inside shouldn't receive focused status either\n    if (!navigation.isFocused()) {\n      return;\n    }\n\n    const previous = lastState\n      ? lastState.routes?.[lastState.index]\n      : undefined;\n    const current = state.routes[state.index];\n\n    const payload = {\n      context: `${current.key}:${action.type}_${context || 'Root'}`,\n      state: current,\n      lastState: previous,\n      action,\n      type,\n    };\n\n    if (previous?.key !== current.key) {\n      this._emitFocus(current.key, payload);\n\n      if (previous?.key) {\n        this._emitBlur(previous.key, payload);\n      }\n    }\n\n    if (\n      lastState?.isTransitioning !== state.isTransitioning &&\n      state.isTransitioning === false\n    ) {\n      if (this._lastWillBlurKey) {\n        onEvent(this._lastWillBlurKey, 'didBlur', payload);\n      }\n\n      if (this._lastWillFocusKey) {\n        onEvent(this._lastWillFocusKey, 'didFocus', payload);\n      }\n    }\n\n    onEvent(current.key, 'action', payload);\n  };\n\n  /**\n   * @param {ParentPayload} payload\n   */\n  _handleWillFocus = ({ lastState, action, context, type }) => {\n    const { navigation } = this.props;\n    const route = navigation.state.routes[navigation.state.index];\n\n    this._emitFocus(route.key, {\n      context: `${route.key}:${action.type}_${context || 'Root'}`,\n      state: route,\n      lastState: lastState?.routes?.find((r) => r.key === route.key),\n      action,\n      type,\n    });\n  };\n\n  /**\n   * @param {ParentPayload} payload\n   */\n  _handleWillBlur = ({ lastState, action, context, type }) => {\n    const { navigation } = this.props;\n    const route = navigation.state.routes[navigation.state.index];\n\n    this._emitBlur(route.key, {\n      context: `${route.key}:${action.type}_${context || 'Root'}`,\n      state: route,\n      lastState: lastState?.routes?.find((r) => r.key === route.key),\n      action,\n      type,\n    });\n  };\n\n  /**\n   * @param {string} target\n   * @param {Payload} payload\n   */\n  _emitFocus = (target, payload) => {\n    if (this._lastWillBlurKey === target) {\n      this._lastWillBlurKey = undefined;\n    }\n\n    if (this._lastWillFocusKey === target) {\n      return;\n    }\n\n    this._lastWillFocusKey = target;\n\n    const { navigation, onEvent } = this.props;\n\n    onEvent(target, 'willFocus', payload);\n\n    if (typeof navigation.state.isTransitioning !== 'boolean') {\n      onEvent(target, 'didFocus', payload);\n    }\n  };\n\n  /**\n   * @param {string} target\n   * @param {Payload} payload\n   */\n  _emitBlur = (target, payload) => {\n    if (this._lastWillFocusKey === target) {\n      this._lastWillFocusKey = undefined;\n    }\n\n    if (this._lastWillBlurKey === target) {\n      return;\n    }\n\n    this._lastWillBlurKey = target;\n\n    const { navigation, onEvent } = this.props;\n\n    onEvent(target, 'willBlur', payload);\n\n    if (typeof navigation.state.isTransitioning !== 'boolean') {\n      onEvent(target, 'didBlur', payload);\n    }\n  };\n\n  render() {\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}