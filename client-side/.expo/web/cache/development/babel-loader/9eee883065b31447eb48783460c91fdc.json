{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport AnimatedNode from \"./AnimatedNode\";\nimport { createOrReuseTransformNode } from \"./AnimatedTransform\";\nimport deepEqual from 'fbjs/lib/areEqual';\n\nfunction sanitizeStyle(inputStyle) {\n  var style = {};\n\n  for (var key in inputStyle) {\n    var value = inputStyle[key];\n\n    if (value instanceof AnimatedNode) {\n      style[key] = value.__nodeID;\n    }\n  }\n\n  return style;\n}\n\nexport function createOrReuseStyleNode(style, oldNode) {\n  style = StyleSheet.flatten(style) || {};\n\n  if (style.transform) {\n    style = _objectSpread(_objectSpread({}, style), {}, {\n      transform: createOrReuseTransformNode(style.transform, oldNode && oldNode._style.transform)\n    });\n  }\n\n  var config = sanitizeStyle(style);\n\n  if (oldNode && deepEqual(config, oldNode._config)) {\n    return oldNode;\n  }\n\n  return new AnimatedStyle(style, config);\n}\nexport default class AnimatedStyle extends AnimatedNode {\n  constructor(style, config) {\n    super({\n      type: 'style',\n      style: config\n    }, Object.values(style));\n    this._config = config;\n    this._style = style;\n  }\n\n  toString() {\n    return \"AnimatedStyle, id: \".concat(this.__nodeID);\n  }\n\n  _walkStyleAndGetAnimatedValues(style) {\n    var updatedStyle = {};\n\n    for (var key in style) {\n      var value = style[key];\n\n      if (value instanceof AnimatedNode) {\n        updatedStyle[key] = value.__getValue();\n      } else if (value && !Array.isArray(value) && typeof value === 'object') {\n        updatedStyle[key] = this._walkStyleAndGetAnimatedValues(value);\n      }\n    }\n\n    return updatedStyle;\n  }\n\n  __onEvaluate() {\n    return this._walkStyleAndGetAnimatedValues(this._style);\n  }\n\n}","map":{"version":3,"sources":["AnimatedStyle.js"],"names":["style","value","inputStyle","StyleSheet","transform","createOrReuseTransformNode","oldNode","config","sanitizeStyle","deepEqual","constructor","type","Object","toString","_walkStyleAndGetAnimatedValues","updatedStyle","Array","__onEvaluate"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,OAAA,YAAA;AACA,SAAA,0BAAA;AAEA,OAAA,SAAA,MAAA,mBAAA;;AAEA,SAAA,aAAA,CAAA,UAAA,EAAmC;AACjC,MAAMA,KAAK,GAAX,EAAA;;AACA,OAAK,IAAL,GAAA,IAAA,UAAA,EAA8B;AAC5B,QAAMC,KAAK,GAAGC,UAAU,CAAxB,GAAwB,CAAxB;;AACA,QAAID,KAAK,YAAT,YAAA,EAAmC;AACjCD,MAAAA,KAAK,CAALA,GAAK,CAALA,GAAaC,KAAK,CAAlBD,QAAAA;AACD;AACF;;AACD,SAAA,KAAA;AACD;;AAED,OAAO,SAAA,sBAAA,CAAA,KAAA,EAAA,OAAA,EAAgD;AACrDA,EAAAA,KAAK,GAAGG,UAAU,CAAVA,OAAAA,CAAAA,KAAAA,KAARH,EAAAA;;AACA,MAAIA,KAAK,CAAT,SAAA,EAAqB;AACnBA,IAAAA,KAAK,GAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA;AAEHI,MAAAA,SAAS,EAAEC,0BAA0B,CACnCL,KAAK,CAD8B,SAAA,EAEnCM,OAAO,IAAIA,OAAO,CAAPA,MAAAA,CAFwB,SAAA;AAFlC,KAAA,CAALN;AAOD;;AACD,MAAMO,MAAM,GAAGC,aAAa,CAA5B,KAA4B,CAA5B;;AACA,MAAIF,OAAO,IAAIG,SAAS,CAAA,MAAA,EAASH,OAAO,CAAxC,OAAwB,CAAxB,EAAmD;AACjD,WAAA,OAAA;AACD;;AACD,SAAO,IAAA,aAAA,CAAA,KAAA,EAAP,MAAO,CAAP;AACD;AAMD,eAAe,MAAA,aAAA,SAAA,YAAA,CAAyC;AACtDI,EAAAA,WAAW,CAAA,KAAA,EAAA,MAAA,EAAgB;AACzB,UAAM;AAAEC,MAAAA,IAAI,EAAN,OAAA;AAAiBX,MAAAA,KAAK,EAAEO;AAAxB,KAAN,EAAwCK,MAAM,CAANA,MAAAA,CAAxC,KAAwCA,CAAxC;AACA,SAAA,OAAA,GAAA,MAAA;AACA,SAAA,MAAA,GAAA,KAAA;AACD;;AAEDC,EAAAA,QAAQ,GAAG;AACT,WAAA,sBAAA,MAAA,CAA6B,KAA7B,QAAA,CAAA;AACD;;AAEDC,EAAAA,8BAA8B,CAAA,KAAA,EAAQ;AACpC,QAAMC,YAAY,GAAlB,EAAA;;AACA,SAAK,IAAL,GAAA,IAAA,KAAA,EAAyB;AACvB,UAAMd,KAAK,GAAGD,KAAK,CAAnB,GAAmB,CAAnB;;AACA,UAAIC,KAAK,YAAT,YAAA,EAAmC;AACjCc,QAAAA,YAAY,CAAZA,GAAY,CAAZA,GAAoBd,KAAK,CAAzBc,UAAoBd,EAApBc;AADF,OAAA,MAEO,IAAId,KAAK,IAAI,CAACe,KAAK,CAALA,OAAAA,CAAVf,KAAUe,CAAVf,IAAkC,OAAA,KAAA,KAAtC,QAAA,EAAiE;AAEtEc,QAAAA,YAAY,CAAZA,GAAY,CAAZA,GAAoB,KAAA,8BAAA,CAApBA,KAAoB,CAApBA;AACD;AACF;;AACD,WAAA,YAAA;AACD;;AAEDE,EAAAA,YAAY,GAAG;AACb,WAAO,KAAA,8BAAA,CAAoC,KAA3C,MAAO,CAAP;AACD;;AA3BqD","sourcesContent":["import { StyleSheet } from 'react-native';\n\nimport AnimatedNode from './AnimatedNode';\nimport { createOrReuseTransformNode } from './AnimatedTransform';\n\nimport deepEqual from 'fbjs/lib/areEqual';\n\nfunction sanitizeStyle(inputStyle) {\n  const style = {};\n  for (const key in inputStyle) {\n    const value = inputStyle[key];\n    if (value instanceof AnimatedNode) {\n      style[key] = value.__nodeID;\n    }\n  }\n  return style;\n}\n\nexport function createOrReuseStyleNode(style, oldNode) {\n  style = StyleSheet.flatten(style) || {};\n  if (style.transform) {\n    style = {\n      ...style,\n      transform: createOrReuseTransformNode(\n        style.transform,\n        oldNode && oldNode._style.transform\n      ),\n    };\n  }\n  const config = sanitizeStyle(style);\n  if (oldNode && deepEqual(config, oldNode._config)) {\n    return oldNode;\n  }\n  return new AnimatedStyle(style, config);\n}\n\n/**\n * AnimatedStyle should never be directly instantiated, use createOrReuseStyleNode\n * in order to make a new instance of this node.\n */\nexport default class AnimatedStyle extends AnimatedNode {\n  constructor(style, config) {\n    super({ type: 'style', style: config }, Object.values(style));\n    this._config = config;\n    this._style = style;\n  }\n\n  toString() {\n    return `AnimatedStyle, id: ${this.__nodeID}`;\n  }\n\n  _walkStyleAndGetAnimatedValues(style) {\n    const updatedStyle = {};\n    for (const key in style) {\n      const value = style[key];\n      if (value instanceof AnimatedNode) {\n        updatedStyle[key] = value.__getValue();\n      } else if (value && !Array.isArray(value) && typeof value === 'object') {\n        // Support animating nested values (for example: shadowOffset.height)\n        updatedStyle[key] = this._walkStyleAndGetAnimatedValues(value);\n      }\n    }\n    return updatedStyle;\n  }\n\n  __onEvaluate() {\n    return this._walkStyleAndGetAnimatedValues(this._style);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}