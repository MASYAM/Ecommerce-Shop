{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { PanGestureHandler, TapGestureHandler, State } from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\nimport DrawerProgressContext from \"../utils/DrawerProgressContext\";\nvar {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  interpolate,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub\n} = Animated;\nvar TRUE = 1;\nvar FALSE = 0;\nvar NOOP = 0;\nvar UNSET = -1;\nvar PROGRESS_EPSILON = 0.05;\nvar DIRECTION_LEFT = 1;\nvar DIRECTION_RIGHT = -1;\nvar SWIPE_DISTANCE_THRESHOLD_DEFAULT = 60;\nvar SWIPE_DISTANCE_MINIMUM = 5;\nvar SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01\n};\nexport default class Drawer extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"clock\", new Clock());\n\n    _defineProperty(this, \"isDrawerTypeFront\", new Value(this.props.drawerType === 'front' ? TRUE : FALSE));\n\n    _defineProperty(this, \"isOpen\", new Value(this.props.open ? TRUE : FALSE));\n\n    _defineProperty(this, \"nextIsOpen\", new Value(UNSET));\n\n    _defineProperty(this, \"isSwiping\", new Value(FALSE));\n\n    _defineProperty(this, \"gestureState\", new Value(State.UNDETERMINED));\n\n    _defineProperty(this, \"touchX\", new Value(0));\n\n    _defineProperty(this, \"velocityX\", new Value(0));\n\n    _defineProperty(this, \"gestureX\", new Value(0));\n\n    _defineProperty(this, \"offsetX\", new Value(0));\n\n    _defineProperty(this, \"position\", new Value(0));\n\n    _defineProperty(this, \"containerWidth\", new Value(0));\n\n    _defineProperty(this, \"drawerWidth\", new Value(0));\n\n    _defineProperty(this, \"drawerOpacity\", new Value(0));\n\n    _defineProperty(this, \"drawerPosition\", new Value(this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT));\n\n    _defineProperty(this, \"touchDistanceFromDrawer\", cond(this.isDrawerTypeFront, cond(eq(this.drawerPosition, DIRECTION_LEFT), max(sub(sub(this.touchX, this.gestureX), this.drawerWidth), 0), min(multiply(sub(sub(this.containerWidth, this.drawerWidth), sub(this.touchX, this.gestureX)), DIRECTION_RIGHT), 0)), 0));\n\n    _defineProperty(this, \"swipeDistanceThreshold\", new Value(this.props.swipeDistanceThreshold !== undefined ? this.props.swipeDistanceThreshold : SWIPE_DISTANCE_THRESHOLD_DEFAULT));\n\n    _defineProperty(this, \"swipeVelocityThreshold\", new Value(this.props.swipeVelocityThreshold));\n\n    _defineProperty(this, \"currentOpenValue\", this.props.open);\n\n    _defineProperty(this, \"pendingOpenValue\", void 0);\n\n    _defineProperty(this, \"isStatusBarHidden\", false);\n\n    _defineProperty(this, \"manuallyTriggerSpring\", new Value(FALSE));\n\n    _defineProperty(this, \"transitionTo\", isOpen => {\n      var toValue = new Value(0);\n      var frameTime = new Value(0);\n      var state = {\n        position: this.position,\n        time: new Value(0),\n        finished: new Value(FALSE),\n        velocity: new Value(0)\n      };\n      return block([cond(clockRunning(this.clock), NOOP, [set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)), set(frameTime, 0), set(state.time, 0), set(state.finished, FALSE), set(state.velocity, this.velocityX), set(this.isOpen, isOpen), startClock(this.clock), set(this.manuallyTriggerSpring, FALSE)]), spring(this.clock, state, _objectSpread({}, SPRING_CONFIG, {\n        toValue\n      })), cond(state.finished, [set(this.touchX, 0), set(this.gestureX, 0), set(this.velocityX, 0), set(this.offsetX, 0), stopClock(this.clock), call([this.isOpen], (_ref) => {\n        var [value] = _ref;\n        var open = Boolean(value);\n\n        if (open !== this.props.open) {\n          this.toggleDrawer(this.props.open);\n        }\n      })])]);\n    });\n\n    _defineProperty(this, \"dragX\", block([onChange(this.isOpen, call([this.isOpen], (_ref2) => {\n      var [value] = _ref2;\n      var open = Boolean(value);\n      this.currentOpenValue = open;\n\n      if (open !== this.props.open) {\n        if (open) {\n          this.props.onOpen();\n        } else {\n          this.props.onClose();\n        }\n\n        this.pendingOpenValue = open;\n        this.forceUpdate();\n      }\n    })), onChange(this.nextIsOpen, cond(neq(this.nextIsOpen, UNSET), [cond(clockRunning(this.clock), stopClock(this.clock)), set(this.isOpen, this.nextIsOpen), set(this.gestureX, 0), set(this.nextIsOpen, UNSET)])), onChange(this.isSwiping, call([this.isSwiping], (_ref3) => {\n      var [value] = _ref3;\n      var {\n        keyboardDismissMode\n      } = this.props;\n\n      if (value === TRUE) {\n        if (keyboardDismissMode === 'on-drag') {\n          Keyboard.dismiss();\n        }\n\n        this.toggleStatusBar(true);\n      } else {\n        this.toggleStatusBar(this.currentOpenValue);\n      }\n    })), cond(eq(this.gestureState, State.ACTIVE), [cond(this.isSwiping, NOOP, [set(this.isSwiping, TRUE), set(this.offsetX, this.position)]), set(this.position, add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)), stopClock(this.clock)], [set(this.isSwiping, FALSE), set(this.touchX, 0), this.transitionTo(cond(this.manuallyTriggerSpring, this.isOpen, cond(or(and(greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM), greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)), greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)), cond(eq(this.drawerPosition, DIRECTION_LEFT), greaterThan(cond(eq(this.velocityX, 0), this.gestureX, this.velocityX), 0), lessThan(cond(eq(this.velocityX, 0), this.gestureX, this.velocityX), 0)), this.isOpen)))]), this.position]));\n\n    _defineProperty(this, \"translateX\", cond(eq(this.drawerPosition, DIRECTION_RIGHT), min(max(multiply(this.drawerWidth, -1), this.dragX), 0), max(min(this.drawerWidth, this.dragX), 0)));\n\n    _defineProperty(this, \"progress\", cond(eq(this.drawerWidth, 0), 0, abs(divide(this.translateX, this.drawerWidth))));\n\n    _defineProperty(this, \"handleGestureEvent\", event([{\n      nativeEvent: {\n        x: this.touchX,\n        translationX: this.gestureX,\n        velocityX: this.velocityX\n      }\n    }]));\n\n    _defineProperty(this, \"handleGestureStateChange\", event([{\n      nativeEvent: {\n        state: s => set(this.gestureState, s)\n      }\n    }]));\n\n    _defineProperty(this, \"handleTapStateChange\", event([{\n      nativeEvent: {\n        oldState: s => cond(eq(s, State.ACTIVE), set(this.manuallyTriggerSpring, TRUE))\n      }\n    }]));\n\n    _defineProperty(this, \"handleContainerLayout\", e => this.containerWidth.setValue(e.nativeEvent.layout.width));\n\n    _defineProperty(this, \"handleDrawerLayout\", e => {\n      this.drawerWidth.setValue(e.nativeEvent.layout.width);\n      this.toggleDrawer(this.props.open);\n      requestAnimationFrame(() => requestAnimationFrame(() => this.drawerOpacity.setValue(1)));\n    });\n\n    _defineProperty(this, \"toggleDrawer\", open => {\n      if (this.currentOpenValue !== open) {\n        this.nextIsOpen.setValue(open ? TRUE : FALSE);\n        this.currentOpenValue = open;\n      }\n    });\n\n    _defineProperty(this, \"toggleStatusBar\", hidden => {\n      var {\n        hideStatusBar,\n        statusBarAnimation\n      } = this.props;\n\n      if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n        this.isStatusBarHidden = hidden;\n        StatusBar.setHidden(hidden, statusBarAnimation);\n      }\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    var {\n      open,\n      drawerPosition,\n      drawerType,\n      swipeDistanceThreshold,\n      swipeVelocityThreshold,\n      hideStatusBar\n    } = this.props;\n\n    if (typeof this.pendingOpenValue !== 'boolean' || open !== this.pendingOpenValue) {\n      this.toggleDrawer(open);\n    }\n\n    this.pendingOpenValue = undefined;\n\n    if (open !== prevProps.open && hideStatusBar) {\n      this.toggleStatusBar(open);\n    }\n\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT);\n    }\n\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n      this.swipeDistanceThreshold.setValue(swipeDistanceThreshold !== undefined ? swipeDistanceThreshold : SWIPE_DISTANCE_THRESHOLD_DEFAULT);\n    }\n\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n    }\n  }\n\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n  }\n\n  render() {\n    var {\n      open,\n      gestureEnabled,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      sceneContainerStyle,\n      drawerStyle,\n      overlayStyle,\n      onGestureRef,\n      renderDrawerContent,\n      renderSceneContent,\n      gestureHandlerProps\n    } = this.props;\n    var right = drawerPosition === 'right';\n    var contentTranslateX = drawerType === 'front' ? 0 : this.translateX;\n    var drawerTranslateX = drawerType === 'back' ? I18nManager.isRTL ? multiply(this.drawerWidth, DIRECTION_RIGHT) : this.drawerWidth : this.translateX;\n    var offset = I18nManager.isRTL ? '100%' : multiply(this.drawerWidth, -1);\n    var hitSlop = right ? {\n      right: 0,\n      width: open ? undefined : swipeEdgeWidth\n    } : {\n      left: 0,\n      width: open ? undefined : swipeEdgeWidth\n    };\n    return React.createElement(DrawerProgressContext.Provider, {\n      value: this.progress\n    }, React.createElement(PanGestureHandler, _extends({\n      ref: onGestureRef,\n      activeOffsetX: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n      failOffsetY: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n      onGestureEvent: this.handleGestureEvent,\n      onHandlerStateChange: this.handleGestureStateChange,\n      hitSlop: hitSlop,\n      enabled: gestureEnabled\n    }, gestureHandlerProps), React.createElement(Animated.View, {\n      onLayout: this.handleContainerLayout,\n      style: styles.main\n    }, React.createElement(Animated.View, {\n      style: [styles.content, {\n        transform: [{\n          translateX: contentTranslateX\n        }]\n      }, sceneContainerStyle],\n      importantForAccessibility: open ? 'no-hide-descendants' : 'yes'\n    }, renderSceneContent({\n      progress: this.progress\n    }), React.createElement(TapGestureHandler, {\n      enabled: gestureEnabled,\n      onHandlerStateChange: this.handleTapStateChange\n    }, React.createElement(Animated.View, {\n      style: [styles.overlay, {\n        opacity: interpolate(this.progress, {\n          inputRange: [PROGRESS_EPSILON, 1],\n          outputRange: [0, 1]\n        }),\n        zIndex: cond(greaterThan(this.progress, PROGRESS_EPSILON), 0, -1)\n      }, overlayStyle]\n    }))), React.createElement(Animated.Code, {\n      exec: block([onChange(this.manuallyTriggerSpring, [cond(eq(this.manuallyTriggerSpring, TRUE), [set(this.nextIsOpen, FALSE), call([], () => this.currentOpenValue = false)])])])\n    }), React.createElement(Animated.View, {\n      accessibilityViewIsModal: open,\n      removeClippedSubviews: Platform.OS !== 'ios',\n      onLayout: this.handleDrawerLayout,\n      style: [styles.container, right ? {\n        right: offset\n      } : {\n        left: offset\n      }, {\n        transform: [{\n          translateX: drawerTranslateX\n        }],\n        opacity: this.drawerOpacity,\n        zIndex: drawerType === 'back' ? -1 : 0\n      }, drawerStyle]\n    }, renderDrawerContent({\n      progress: this.progress\n    })))));\n  }\n\n}\n\n_defineProperty(Drawer, \"defaultProps\", {\n  gestureEnabled: true,\n  drawerPostion: I18nManager.isRTL ? 'left' : 'right',\n  drawerType: 'front',\n  swipeEdgeWidth: 32,\n  swipeVelocityThreshold: 500,\n  keyboardDismissMode: 'on-drag',\n  hideStatusBar: false,\n  statusBarAnimation: 'slide'\n});\n\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: '80%',\n    maxWidth: '100%'\n  },\n  overlay: _objectSpread({}, StyleSheet.absoluteFillObject, {\n    backgroundColor: 'rgba(0, 0, 0, 0.5)'\n  }),\n  content: {\n    flex: 1\n  },\n  main: {\n    flex: 1,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"sources":["Drawer.tsx"],"names":["sub","TRUE","FALSE","NOOP","UNSET","PROGRESS_EPSILON","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_THRESHOLD_DEFAULT","SWIPE_DISTANCE_MINIMUM","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","Drawer","React","gestureEnabled","drawerPostion","I18nManager","drawerType","swipeEdgeWidth","swipeVelocityThreshold","keyboardDismissMode","hideStatusBar","statusBarAnimation","componentDidUpdate","open","prevProps","drawerPosition","swipeDistanceThreshold","componentWillUnmount","State","cond","eq","max","min","multiply","isOpen","toValue","frameTime","state","position","time","finished","velocity","block","clockRunning","set","startClock","spring","stopClock","call","Boolean","onChange","neq","value","Keyboard","add","or","and","greaterThan","abs","lessThan","divide","event","nativeEvent","x","translationX","velocityX","s","oldState","e","requestAnimationFrame","hidden","StatusBar","render","gestureHandlerProps","right","contentTranslateX","drawerTranslateX","offset","hitSlop","width","left","progress","styles","main","transform","translateX","renderSceneContent","handleTapStateChange","opacity","interpolate","inputRange","outputRange","zIndex","Platform","renderDrawerContent","container","backgroundColor","top","bottom","maxWidth","overlay","StyleSheet","content","flex","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  ViewStyle,\n  LayoutChangeEvent,\n  I18nManager,\n  Platform,\n  Keyboard,\n  StatusBar,\n} from 'react-native';\nimport {\n  PanGestureHandler,\n  TapGestureHandler,\n  State,\n} from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\nimport DrawerProgressContext from '../utils/DrawerProgressContext';\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  interpolate,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub,\n} = Animated;\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst PROGRESS_EPSILON = 0.05;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_THRESHOLD_DEFAULT = 60;\n\nconst SWIPE_DISTANCE_MINIMUM = 5;\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\ntype Binary = 0 | 1;\n\ntype Renderer = (props: { progress: Animated.Node<number> }) => React.ReactNode;\n\ntype Props = {\n  open: boolean;\n  onOpen: () => void;\n  onClose: () => void;\n  onGestureRef?: (ref: PanGestureHandler | null) => void;\n  gestureEnabled: boolean;\n  drawerPosition: 'left' | 'right';\n  drawerType: 'front' | 'back' | 'slide';\n  keyboardDismissMode: 'none' | 'on-drag';\n  swipeEdgeWidth: number;\n  swipeDistanceThreshold?: number;\n  swipeVelocityThreshold: number;\n  hideStatusBar: boolean;\n  statusBarAnimation: 'slide' | 'none' | 'fade';\n  overlayStyle?: ViewStyle;\n  drawerStyle?: ViewStyle;\n  sceneContainerStyle?: ViewStyle;\n  renderDrawerContent: Renderer;\n  renderSceneContent: Renderer;\n  gestureHandlerProps?: React.ComponentProps<typeof PanGestureHandler>;\n};\n\nexport default class Drawer extends React.PureComponent<Props> {\n  static defaultProps = {\n    gestureEnabled: true,\n    drawerPostion: I18nManager.isRTL ? 'left' : 'right',\n    drawerType: 'front',\n    swipeEdgeWidth: 32,\n    swipeVelocityThreshold: 500,\n    keyboardDismissMode: 'on-drag',\n    hideStatusBar: false,\n    statusBarAnimation: 'slide',\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      open,\n      drawerPosition,\n      drawerType,\n      swipeDistanceThreshold,\n      swipeVelocityThreshold,\n      hideStatusBar,\n    } = this.props;\n\n    if (\n      // If we're not in the middle of a transition, sync the drawer's open state\n      typeof this.pendingOpenValue !== 'boolean' ||\n      open !== this.pendingOpenValue\n    ) {\n      this.toggleDrawer(open);\n    }\n\n    this.pendingOpenValue = undefined;\n\n    if (open !== prevProps.open && hideStatusBar) {\n      this.toggleStatusBar(open);\n    }\n\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(\n        drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n      );\n    }\n\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n      this.swipeDistanceThreshold.setValue(\n        swipeDistanceThreshold !== undefined\n          ? swipeDistanceThreshold\n          : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n      );\n    }\n\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n    }\n  }\n\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n  }\n\n  private clock = new Clock();\n\n  private isDrawerTypeFront = new Value<Binary>(\n    this.props.drawerType === 'front' ? TRUE : FALSE\n  );\n\n  private isOpen = new Value<Binary>(this.props.open ? TRUE : FALSE);\n  private nextIsOpen = new Value<Binary | -1>(UNSET);\n  private isSwiping = new Value<Binary>(FALSE);\n\n  private gestureState = new Value<number>(State.UNDETERMINED);\n  private touchX = new Value<number>(0);\n  private velocityX = new Value<number>(0);\n  private gestureX = new Value<number>(0);\n  private offsetX = new Value<number>(0);\n  private position = new Value<number>(0);\n\n  private containerWidth = new Value<number>(0);\n  private drawerWidth = new Value<number>(0);\n  private drawerOpacity = new Value<number>(0);\n  private drawerPosition = new Value<number>(\n    this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n  );\n\n  // Comment stolen from react-native-gesture-handler/DrawerLayout\n  //\n  // While closing the drawer when user starts gesture outside of its area (in greyed\n  // out part of the window), we want the drawer to follow only once finger reaches the\n  // edge of the drawer.\n  // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n  // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n  // an arrow pointing left\n  // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    +---------------+    +---------------+    +---------------+    +---------------+\n  //\n  // For the above to work properly we define animated value that will keep start position\n  // of the gesture. Then we use that value to calculate how much we need to subtract from\n  // the dragX. If the gesture started on the greyed out area we take the distance from the\n  // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n  // drawer be pulled back as soon as you start the pan.\n  //\n  // This is used only when drawerType is \"front\"\n  private touchDistanceFromDrawer = cond(\n    this.isDrawerTypeFront,\n    cond(\n      eq(this.drawerPosition, DIRECTION_LEFT),\n      max(\n        // Distance of touch start from left screen edge - Drawer width\n        sub(sub(this.touchX, this.gestureX), this.drawerWidth),\n        0\n      ),\n      min(\n        multiply(\n          // Distance of drawer from left screen edge - Touch start point\n          sub(\n            sub(this.containerWidth, this.drawerWidth),\n            sub(this.touchX, this.gestureX)\n          ),\n          DIRECTION_RIGHT\n        ),\n        0\n      )\n    ),\n    0\n  );\n\n  private swipeDistanceThreshold = new Value<number>(\n    this.props.swipeDistanceThreshold !== undefined\n      ? this.props.swipeDistanceThreshold\n      : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n  );\n  private swipeVelocityThreshold = new Value<number>(\n    this.props.swipeVelocityThreshold\n  );\n\n  private currentOpenValue: boolean = this.props.open;\n  private pendingOpenValue: boolean | undefined;\n\n  private isStatusBarHidden: boolean = false;\n\n  private manuallyTriggerSpring = new Value<Binary>(FALSE);\n\n  private transitionTo = (isOpen: number | Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.position,\n      time: new Value(0),\n      finished: new Value(FALSE),\n      velocity: new Value(0),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(state.velocity, this.velocityX),\n        set(this.isOpen, isOpen),\n        startClock(this.clock),\n        set(this.manuallyTriggerSpring, FALSE),\n      ]),\n      spring(this.clock, state, { ...SPRING_CONFIG, toValue }),\n      cond(state.finished, [\n        // Reset gesture and velocity from previous gesture\n        set(this.touchX, 0),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        set(this.offsetX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n        call([this.isOpen], ([value]: readonly Binary[]) => {\n          const open = Boolean(value);\n\n          if (open !== this.props.open) {\n            // Sync drawer's state after animation finished\n            // This shouldn't be necessary, but there seems to be an issue on iOS\n            this.toggleDrawer(this.props.open);\n          }\n        }),\n      ]),\n    ]);\n  };\n\n  private dragX = block([\n    onChange(\n      this.isOpen,\n      call([this.isOpen], ([value]: readonly Binary[]) => {\n        const open = Boolean(value);\n\n        this.currentOpenValue = open;\n\n        // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\n        if (open !== this.props.open) {\n          // If the mode changed, update state\n          if (open) {\n            this.props.onOpen();\n          } else {\n            this.props.onClose();\n          }\n\n          this.pendingOpenValue = open;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          this.forceUpdate();\n        }\n      })\n    ),\n    onChange(\n      this.nextIsOpen,\n      cond(neq(this.nextIsOpen, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        // Update the open value to trigger the transition\n        set(this.isOpen, this.nextIsOpen),\n        set(this.gestureX, 0),\n        set(this.nextIsOpen, UNSET),\n      ])\n    ),\n    // This block must be after the this.isOpen listener since we check for current value\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      call([this.isSwiping], ([value]: readonly Binary[]) => {\n        const { keyboardDismissMode } = this.props;\n\n        if (value === TRUE) {\n          if (keyboardDismissMode === 'on-drag') {\n            Keyboard.dismiss();\n          }\n\n          this.toggleStatusBar(true);\n        } else {\n          this.toggleStatusBar(this.currentOpenValue);\n        }\n      })\n    ),\n    cond(\n      eq(this.gestureState, State.ACTIVE),\n      [\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          // Also update the drag offset to the last position\n          set(this.offsetX, this.position),\n        ]),\n        // Update position with previous offset + gesture distance\n        set(\n          this.position,\n          add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.touchX, 0),\n        this.transitionTo(\n          cond(\n            this.manuallyTriggerSpring,\n            this.isOpen,\n            cond(\n              or(\n                and(\n                  greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n                  greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)\n                ),\n                greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)\n              ),\n              cond(\n                eq(this.drawerPosition, DIRECTION_LEFT),\n                // If swiped to right, open the drawer, otherwise close it\n                greaterThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                ),\n                // If swiped to left, open the drawer, otherwise close it\n                lessThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                )\n              ),\n              this.isOpen\n            )\n          )\n        ),\n      ]\n    ),\n    this.position,\n  ]);\n\n  private translateX = cond(\n    eq(this.drawerPosition, DIRECTION_RIGHT),\n    min(max(multiply(this.drawerWidth, -1), this.dragX), 0),\n    max(min(this.drawerWidth, this.dragX), 0)\n  );\n\n  private progress = cond(\n    // Check if the drawer width is available to avoid division by zero\n    eq(this.drawerWidth, 0),\n    0,\n    abs(divide(this.translateX, this.drawerWidth))\n  );\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        x: this.touchX,\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n      },\n    },\n  ]);\n\n  private handleGestureStateChange = event([\n    {\n      nativeEvent: {\n        state: (s: Animated.Value<number>) => set(this.gestureState, s),\n      },\n    },\n  ]);\n\n  private handleTapStateChange = event([\n    {\n      nativeEvent: {\n        oldState: (s: Animated.Value<number>) =>\n          cond(eq(s, State.ACTIVE), set(this.manuallyTriggerSpring, TRUE)),\n      },\n    },\n  ]);\n\n  private handleContainerLayout = (e: LayoutChangeEvent) =>\n    this.containerWidth.setValue(e.nativeEvent.layout.width);\n\n  private handleDrawerLayout = (e: LayoutChangeEvent) => {\n    this.drawerWidth.setValue(e.nativeEvent.layout.width);\n    this.toggleDrawer(this.props.open);\n\n    // Until layout is available, drawer is hidden with opacity: 0 by default\n    // Show it in the next frame when layout is available\n    // If we don't delay it until the next frame, there's a visible flicker\n    requestAnimationFrame(() =>\n      requestAnimationFrame(() => this.drawerOpacity.setValue(1))\n    );\n  };\n\n  private toggleDrawer = (open: boolean) => {\n    if (this.currentOpenValue !== open) {\n      this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n      // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\n      // However, there's a race condition on Android, so we need to set a bit earlier\n      this.currentOpenValue = open;\n    }\n  };\n\n  private toggleStatusBar = (hidden: boolean) => {\n    const { hideStatusBar, statusBarAnimation } = this.props;\n\n    if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n      this.isStatusBarHidden = hidden;\n      StatusBar.setHidden(hidden, statusBarAnimation);\n    }\n  };\n\n  render() {\n    const {\n      open,\n      gestureEnabled,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      sceneContainerStyle,\n      drawerStyle,\n      overlayStyle,\n      onGestureRef,\n      renderDrawerContent,\n      renderSceneContent,\n      gestureHandlerProps,\n    } = this.props;\n\n    const right = drawerPosition === 'right';\n\n    const contentTranslateX = drawerType === 'front' ? 0 : this.translateX;\n    const drawerTranslateX =\n      drawerType === 'back'\n        ? I18nManager.isRTL\n          ? multiply(this.drawerWidth, DIRECTION_RIGHT)\n          : this.drawerWidth\n        : this.translateX;\n\n    const offset = I18nManager.isRTL ? '100%' : multiply(this.drawerWidth, -1);\n\n    // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n    // https://github.com/kmagiera/react-native-gesture-handler/issues/569\n    const hitSlop = right\n      ? // Extend hitSlop to the side of the screen when drawer is closed\n        // This lets the user drag the drawer from the side of the screen\n        { right: 0, width: open ? undefined : swipeEdgeWidth }\n      : { left: 0, width: open ? undefined : swipeEdgeWidth };\n\n    return (\n      <DrawerProgressContext.Provider value={this.progress}>\n        <PanGestureHandler\n          ref={onGestureRef}\n          activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          onGestureEvent={this.handleGestureEvent}\n          onHandlerStateChange={this.handleGestureStateChange}\n          hitSlop={hitSlop}\n          enabled={gestureEnabled}\n          {...gestureHandlerProps}\n        >\n          <Animated.View\n            onLayout={this.handleContainerLayout}\n            style={styles.main}\n          >\n            <Animated.View\n              style={[\n                styles.content,\n                {\n                  transform: [{ translateX: contentTranslateX }],\n                },\n                sceneContainerStyle as any,\n              ]}\n              importantForAccessibility={open ? 'no-hide-descendants' : 'yes'}\n            >\n              {renderSceneContent({ progress: this.progress })}\n              <TapGestureHandler\n                enabled={gestureEnabled}\n                onHandlerStateChange={this.handleTapStateChange}\n              >\n                <Animated.View\n                  style={[\n                    styles.overlay,\n                    {\n                      opacity: interpolate(this.progress, {\n                        inputRange: [PROGRESS_EPSILON, 1],\n                        outputRange: [0, 1],\n                      }),\n                      // We don't want the user to be able to press through the overlay when drawer is open\n                      // One approach is to adjust the pointerEvents based on the progress\n                      // But we can also send the overlay behind the screen, which works, and is much less code\n                      zIndex: cond(\n                        greaterThan(this.progress, PROGRESS_EPSILON),\n                        0,\n                        -1\n                      ),\n                    },\n                    overlayStyle,\n                  ]}\n                />\n              </TapGestureHandler>\n            </Animated.View>\n            <Animated.Code\n              exec={block([\n                onChange(this.manuallyTriggerSpring, [\n                  cond(eq(this.manuallyTriggerSpring, TRUE), [\n                    set(this.nextIsOpen, FALSE),\n                    call([], () => (this.currentOpenValue = false)),\n                  ]),\n                ]),\n              ])}\n            />\n            <Animated.View\n              accessibilityViewIsModal={open}\n              removeClippedSubviews={Platform.OS !== 'ios'}\n              onLayout={this.handleDrawerLayout}\n              style={[\n                styles.container,\n                right ? { right: offset } : { left: offset },\n                {\n                  transform: [{ translateX: drawerTranslateX }],\n                  opacity: this.drawerOpacity,\n                  zIndex: drawerType === 'back' ? -1 : 0,\n                },\n                drawerStyle as any,\n              ]}\n            >\n              {renderDrawerContent({ progress: this.progress })}\n            </Animated.View>\n          </Animated.View>\n        </PanGestureHandler>\n      </DrawerProgressContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: '80%',\n    maxWidth: '100%',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}