{"ast":null,"code":"var _jsxFileName = \"/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/src/screens/legacy/Landing/index.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Vibration from \"react-native-web/dist/exports/Vibration\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport { Container, Content, Button, Text, Footer, Title } from 'native-base';\nimport { Actions } from 'react-native-router-flux';\nimport styles from \"./style\";\nimport { ScreenNames } from \"../../../constants/Screens\";\nimport { ImageSources } from \"../../../constants\";\nimport { bindActionCreators } from 'redux';\nimport { connect } from \"react-redux\";\nimport { NavigationActions, StackActions, NavigationProp } from 'react-navigation';\nimport { Notifications } from 'expo';\nimport * as Permissions from 'expo-permissions';\nimport Constants from 'expo-constants';\n\nclass LandingView extends React.Component {\n  constructor(props) {\n    var _this;\n\n    super(props);\n    _this = this;\n    this.registerForPushNotificationsAsync = _asyncToGenerator(function* () {\n      if (Constants.isDevice) {\n        var {\n          status: existingStatus\n        } = yield Permissions.getAsync(Permissions.NOTIFICATIONS);\n        var finalStatus = existingStatus;\n\n        if (existingStatus !== 'granted') {\n          var {\n            status\n          } = yield Permissions.askAsync(Permissions.NOTIFICATIONS);\n          finalStatus = status;\n        }\n\n        if (finalStatus !== 'granted') {\n          alert('Failed to get push token for push notification!');\n          return;\n        }\n\n        token = yield Notifications.getExpoPushTokenAsync();\n        console.log(token);\n\n        _this.setState({\n          expoPushToken: token\n        });\n      } else {}\n\n      if (Platform.OS === 'android') {\n        Notifications.createChannelAndroidAsync('default', {\n          name: 'default',\n          sound: true,\n          priority: 'max',\n          vibrate: [0, 250, 250, 250]\n        });\n      }\n    });\n\n    this._handleNotification = notification => {\n      Vibration.vibrate();\n      console.log(notification);\n      this.setState({\n        notification: notification\n      });\n    };\n\n    this.doStart = () => {\n      Actions.push(ScreenNames.LoginScreen);\n    };\n\n    this.doRegister = () => {\n      Actions.push(ScreenNames.RegisterScreen);\n    };\n\n    this.state = {\n      expoPushToken: '',\n      notification: {},\n      isLoading: false,\n      lastRequest: 0,\n      lastSent: 0,\n      isUserWantToSavedLogin: false,\n      isShowAlert: false,\n      isShowingSuccessAlert: false\n    };\n  }\n\n  componentDidMount() {\n    this.registerForPushNotificationsAsync();\n    this._notificationSubscription = Notifications.addListener(this._handleNotification);\n  }\n\n  render() {\n    return React.createElement(Container, {\n      style: styles.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }\n    }, React.createElement(StatusBar, {\n      barStyle: \"light-content\",\n      translucent: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }\n    }), React.createElement(ImageBackground, {\n      source: ImageSources.LandingBg,\n      resizeMode: \"cover\",\n      style: styles.backgroundImage,\n      imageStyle: styles.backgroundImage_imageStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 7\n      }\n    }, React.createElement(View, {\n      style: styles.bottomLayerFiller,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 1\n      }\n    }), React.createElement(View, {\n      style: styles.bottomLayer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      style: styles.appTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }\n    }, \"Monvelli\"), React.createElement(Text, {\n      style: styles.monvelli4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }\n    }, \"Your 24 hours Shopping Mall\"), React.createElement(View, {\n      style: styles.buttonContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }\n    }, React.createElement(Button, {\n      transparent: true,\n      full: true,\n      style: styles.btnLogin,\n      onPress: this.doStart,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 25\n      }\n    }, React.createElement(Text, {\n      style: styles.btnLoginTextStyle,\n      large: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 29\n      }\n    }, \"Login\")), React.createElement(Button, {\n      full: true,\n      style: styles.btnRegister,\n      onPress: this.doRegister,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 25\n      }\n    }, React.createElement(Text, {\n      style: styles.btnRegisterTextStyle,\n      large: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 29\n      }\n    }, \"Register Now\"))))));\n  }\n\n}\n\nexport default LandingView;","map":{"version":3,"sources":["/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/src/screens/legacy/Landing/index.js"],"names":["React","Container","Content","Button","Text","Footer","Title","Actions","styles","ScreenNames","ImageSources","bindActionCreators","connect","NavigationActions","StackActions","NavigationProp","Notifications","Permissions","Constants","LandingView","Component","constructor","props","registerForPushNotificationsAsync","isDevice","status","existingStatus","getAsync","NOTIFICATIONS","finalStatus","askAsync","alert","token","getExpoPushTokenAsync","console","log","setState","expoPushToken","Platform","OS","createChannelAndroidAsync","name","sound","priority","vibrate","_handleNotification","notification","Vibration","doStart","push","LoginScreen","doRegister","RegisterScreen","state","isLoading","lastRequest","lastSent","isUserWantToSavedLogin","isShowAlert","isShowingSuccessAlert","componentDidMount","_notificationSubscription","addListener","render","container","LandingBg","backgroundImage","backgroundImage_imageStyle","bottomLayerFiller","bottomLayer","appTitle","monvelli4","buttonContainer","btnLogin","btnLoginTextStyle","btnRegister","btnRegisterTextStyle"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {\n    View,\n    TouchableOpacity,\n    StatusBar,\n    ImageBackground,\n    Image,\n    Vibration,\n    Keyboard,\n} from 'react-native'\nimport { Container, Content, Button, Text, Footer, Title, } from 'native-base'\n\nimport { Actions } from 'react-native-router-flux'\nimport styles from './style'\nimport { ScreenNames } from '../../../constants/Screens'\nimport { ImageSources } from '../../../constants'\n\nimport { bindActionCreators } from 'redux';\nimport { connect } from \"react-redux\";\nimport { NavigationActions, StackActions, NavigationProp } from 'react-navigation';\n\nimport { Notifications } from 'expo';\nimport * as Permissions from 'expo-permissions';\nimport Constants from 'expo-constants';\n\n\ntype OwnProps = {\n    navigation: NavigationProp;\n}\n\ntype Props = OwnProps & {\n    userId: string,\n    isPhoneVerified: boolean\n}\nclass LandingView extends React.Component<Props> {\n\n\n    constructor(props) {\n        super(props);\n        this.state = { \n            expoPushToken: '',\n            notification: {},\n            isLoading: false,\n            lastRequest:0,\n            lastSent: 0,\n            isUserWantToSavedLogin: false,\n            isShowAlert:false,\n            isShowingSuccessAlert: false\n        };\n    }\n\n    registerForPushNotificationsAsync = async () => {\n        if (Constants.isDevice) {\n          const { status: existingStatus } = await Permissions.getAsync(Permissions.NOTIFICATIONS);\n          let finalStatus = existingStatus;\n          if (existingStatus !== 'granted') {\n            const { status } = await Permissions.askAsync(Permissions.NOTIFICATIONS);\n            finalStatus = status;\n          }\n          if (finalStatus !== 'granted') {\n            alert('Failed to get push token for push notification!');\n            return;\n          }\n          token = await Notifications.getExpoPushTokenAsync();\n          console.log(token);\n          this.setState({ expoPushToken: token });\n        } else {\n          //alert('Must use physical device for Push Notifications');\n        }\n    \n        if (Platform.OS === 'android') {\n          Notifications.createChannelAndroidAsync('default', {\n            name: 'default',\n            sound: true,\n            priority: 'max',\n            vibrate: [0, 250, 250, 250],\n          });\n        }\n      };\n\n\n      componentDidMount() {\n        this.registerForPushNotificationsAsync();\n        this._notificationSubscription = Notifications.addListener(this._handleNotification);\n      }\n    \n      _handleNotification = notification => {\n        Vibration.vibrate();\n        console.log(notification);\n        this.setState({ notification: notification });\n      };\n      \n\n    doStart = () => {        \n        Actions.push(ScreenNames.LoginScreen);\n\n    }\n    doRegister = () => {\n         Actions.push(ScreenNames.RegisterScreen);\n    }\n    \n    \n \n\n    render() {\n        return (\n            <Container style={styles.container}>\n                <StatusBar\n                    barStyle=\"light-content\"\n                    translucent={true}\n                />\n      <ImageBackground\n        source={ImageSources.LandingBg}\n        resizeMode=\"cover\"\n        style={styles.backgroundImage}\n        imageStyle={styles.backgroundImage_imageStyle}\n      >\n\n\n\n<View style={styles.bottomLayerFiller}></View>\n        <View style={styles.bottomLayer}>\n          <Text style={styles.appTitle}>Monvelli</Text>\n          <Text style={styles.monvelli4}>Your 24 hours Shopping Mall</Text>\n          <View style={styles.buttonContainer}>\n                        <Button transparent full  style={styles.btnLogin} onPress={this.doStart}>\n                            <Text style={styles.btnLoginTextStyle} large>Login</Text>\n                        </Button>\n                        <Button  full  style={styles.btnRegister} onPress={this.doRegister}>\n                            <Text style={styles.btnRegisterTextStyle} large >Register Now</Text>\n                        </Button>\n          </View>\n        </View>\n\n\n\n\n                </ImageBackground>\n            </Container>\n        )\n    }\n}\n\n\nexport default LandingView;"]},"metadata":{},"sourceType":"module"}