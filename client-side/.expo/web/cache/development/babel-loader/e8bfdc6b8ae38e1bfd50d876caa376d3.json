{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { NavigationActions } from 'react-navigation';\n\nclass DrawerSidebar extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"getScreenOptions\", routeKey => {\n      var descriptor = this.props.descriptors[routeKey];\n\n      if (!descriptor.options) {\n        throw new Error('Cannot access screen descriptor options from drawer sidebar');\n      }\n\n      return descriptor.options;\n    });\n\n    _defineProperty(this, \"getLabel\", (_ref) => {\n      var {\n        focused,\n        tintColor,\n        route\n      } = _ref;\n      var {\n        drawerLabel,\n        title\n      } = this.getScreenOptions(route.key);\n\n      if (drawerLabel) {\n        return typeof drawerLabel === 'function' ? drawerLabel({\n          tintColor,\n          focused\n        }) : drawerLabel;\n      }\n\n      if (typeof title === 'string') {\n        return title;\n      }\n\n      return route.routeName;\n    });\n\n    _defineProperty(this, \"renderIcon\", (_ref2) => {\n      var {\n        focused,\n        tintColor,\n        route\n      } = _ref2;\n      var {\n        drawerIcon\n      } = this.getScreenOptions(route.key);\n\n      if (drawerIcon) {\n        return typeof drawerIcon === 'function' ? drawerIcon({\n          tintColor,\n          focused\n        }) : drawerIcon;\n      }\n\n      return null;\n    });\n\n    _defineProperty(this, \"handleItemPress\", (_ref3) => {\n      var {\n        route,\n        focused\n      } = _ref3;\n\n      if (focused) {\n        this.props.navigation.closeDrawer();\n      } else {\n        this.props.navigation.dispatch(NavigationActions.navigate({\n          routeName: route.routeName\n        }));\n      }\n    });\n  }\n\n  render() {\n    var ContentComponent = this.props.contentComponent;\n\n    if (!ContentComponent) {\n      return null;\n    }\n\n    var {\n      state\n    } = this.props.navigation;\n\n    if (typeof state.index !== 'number') {\n      throw new Error('The index of the route should be state in the navigation state');\n    }\n\n    return React.createElement(View, {\n      style: [styles.container, this.props.style]\n    }, React.createElement(ContentComponent, _extends({}, this.props.contentOptions, {\n      navigation: this.props.navigation,\n      descriptors: this.props.descriptors,\n      drawerOpenProgress: this.props.drawerOpenProgress,\n      items: state.routes,\n      activeItemKey: state.routes[state.index] ? state.routes[state.index].key : null,\n      screenProps: this.props.screenProps,\n      getLabel: this.getLabel,\n      renderIcon: this.renderIcon,\n      onItemPress: this.handleItemPress,\n      drawerPosition: this.props.drawerPosition\n    })));\n  }\n\n}\n\nexport default DrawerSidebar;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["DrawerSidebar.tsx"],"names":["React","routeKey","descriptor","route","title","drawerLabel","focused","drawerIcon","routeName","render","ContentComponent","state","styles","drawerPosition","container","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, ViewStyle } from 'react-native';\nimport {\n  NavigationActions,\n  NavigationRoute,\n  NavigationScreenProp,\n} from 'react-navigation';\nimport Animated from 'react-native-reanimated';\nimport {\n  Scene,\n  NavigationDrawerState,\n  DrawerContentComponentProps,\n  SceneDescriptorMap,\n} from '../types';\n\ntype Props = {\n  contentComponent?: React.ComponentType<DrawerContentComponentProps>;\n  contentOptions?: object;\n  screenProps?: unknown;\n  navigation: NavigationScreenProp<NavigationDrawerState>;\n  descriptors: SceneDescriptorMap;\n  drawerOpenProgress: Animated.Node<number>;\n  drawerPosition: 'left' | 'right';\n  style?: ViewStyle;\n};\n\n/**\n * Component that renders the sidebar screen of the drawer.\n */\nclass DrawerSidebar extends React.PureComponent<Props> {\n  private getScreenOptions = (routeKey: string) => {\n    const descriptor = this.props.descriptors[routeKey];\n\n    if (!descriptor.options) {\n      throw new Error(\n        'Cannot access screen descriptor options from drawer sidebar'\n      );\n    }\n\n    return descriptor.options;\n  };\n\n  private getLabel = ({ focused, tintColor, route }: Scene) => {\n    const { drawerLabel, title } = this.getScreenOptions(route.key);\n    if (drawerLabel) {\n      return typeof drawerLabel === 'function'\n        ? drawerLabel({ tintColor, focused })\n        : drawerLabel;\n    }\n\n    if (typeof title === 'string') {\n      return title;\n    }\n\n    return route.routeName;\n  };\n\n  private renderIcon = ({ focused, tintColor, route }: Scene) => {\n    const { drawerIcon } = this.getScreenOptions(route.key);\n    if (drawerIcon) {\n      return typeof drawerIcon === 'function'\n        ? drawerIcon({ tintColor, focused })\n        : drawerIcon;\n    }\n    return null;\n  };\n\n  private handleItemPress = ({\n    route,\n    focused,\n  }: {\n    route: NavigationRoute;\n    focused: boolean;\n  }) => {\n    if (focused) {\n      // @ts-ignore\n      this.props.navigation.closeDrawer();\n    } else {\n      this.props.navigation.dispatch(\n        NavigationActions.navigate({ routeName: route.routeName })\n      );\n    }\n  };\n\n  render() {\n    const ContentComponent = this.props.contentComponent;\n\n    if (!ContentComponent) {\n      return null;\n    }\n\n    const { state } = this.props.navigation;\n\n    if (typeof state.index !== 'number') {\n      throw new Error(\n        'The index of the route should be state in the navigation state'\n      );\n    }\n\n    return (\n      <View style={[styles.container, this.props.style]}>\n        <ContentComponent\n          {...this.props.contentOptions}\n          navigation={this.props.navigation}\n          descriptors={this.props.descriptors}\n          drawerOpenProgress={this.props.drawerOpenProgress}\n          items={state.routes}\n          activeItemKey={\n            state.routes[state.index] ? state.routes[state.index].key : null\n          }\n          screenProps={this.props.screenProps}\n          getLabel={this.getLabel}\n          renderIcon={this.renderIcon}\n          onItemPress={this.handleItemPress}\n          drawerPosition={this.props.drawerPosition}\n        />\n      </View>\n    );\n  }\n}\n\nexport default DrawerSidebar;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}