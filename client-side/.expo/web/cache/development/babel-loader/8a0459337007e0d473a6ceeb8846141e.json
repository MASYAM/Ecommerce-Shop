{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport GestureHandler from \"./GestureHandler\";\n\nclass IndiscreteGestureHandler extends GestureHandler {\n  get shouldEnableGestureOnSetup() {\n    return false;\n  }\n\n  updateGestureConfig(_ref) {\n    var {\n      minPointers = 2,\n      maxPointers = 2\n    } = _ref,\n        props = _objectWithoutProperties(_ref, [\"minPointers\", \"maxPointers\"]);\n\n    return super.updateGestureConfig(_objectSpread({\n      minPointers,\n      maxPointers\n    }, props));\n  }\n\n  isGestureEnabledForEvent(_ref2, recognizer, _ref3) {\n    var {\n      minPointers,\n      maxPointers\n    } = _ref2;\n    var {\n      maxPointers: pointerLength\n    } = _ref3;\n\n    if (pointerLength > maxPointers) {\n      return {\n        failed: true\n      };\n    }\n\n    var validPointerCount = pointerLength >= minPointers;\n    return {\n      success: validPointerCount\n    };\n  }\n\n}\n\nexport default IndiscreteGestureHandler;","map":{"version":3,"sources":["/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/node_modules/react-native-gesture-handler/web/IndiscreteGestureHandler.js"],"names":["GestureHandler","IndiscreteGestureHandler","shouldEnableGestureOnSetup","updateGestureConfig","minPointers","maxPointers","props","isGestureEnabledForEvent","recognizer","pointerLength","failed","validPointerCount","success"],"mappings":";;;;;;;;;;AAAA,OAAOA,cAAP;;AAKA,MAAMC,wBAAN,SAAuCD,cAAvC,CAAsD;AACpD,MAAIE,0BAAJ,GAAiC;AAC/B,WAAO,KAAP;AACD;;AAEDC,EAAAA,mBAAmB,OAAiD;AAAA,QAAhD;AAAEC,MAAAA,WAAW,GAAG,CAAhB;AAAmBC,MAAAA,WAAW,GAAG;AAAjC,KAAgD;AAAA,QAATC,KAAS;;AAClE,WAAO,MAAMH,mBAAN;AACLC,MAAAA,WADK;AAELC,MAAAA;AAFK,OAGFC,KAHE,EAAP;AAKD;;AAEDC,EAAAA,wBAAwB,QAEtBC,UAFsB,SAItB;AAAA,QAHA;AAAEJ,MAAAA,WAAF;AAAeC,MAAAA;AAAf,KAGA;AAAA,QADA;AAAEA,MAAAA,WAAW,EAAEI;AAAf,KACA;;AACA,QAAIA,aAAa,GAAGJ,WAApB,EAAiC;AAC/B,aAAO;AAAEK,QAAAA,MAAM,EAAE;AAAV,OAAP;AACD;;AACD,QAAMC,iBAAiB,GAAGF,aAAa,IAAIL,WAA3C;AACA,WAAO;AACLQ,MAAAA,OAAO,EAAED;AADJ,KAAP;AAGD;;AAzBmD;;AA2BtD,eAAeV,wBAAf","sourcesContent":["import GestureHandler from './GestureHandler';\n\n/**\n * The base class for **Rotation** and **Pinch** gesture handlers.\n */\nclass IndiscreteGestureHandler extends GestureHandler {\n  get shouldEnableGestureOnSetup() {\n    return false;\n  }\n\n  updateGestureConfig({ minPointers = 2, maxPointers = 2, ...props }) {\n    return super.updateGestureConfig({\n      minPointers,\n      maxPointers,\n      ...props,\n    });\n  }\n\n  isGestureEnabledForEvent(\n    { minPointers, maxPointers },\n    recognizer,\n    { maxPointers: pointerLength }\n  ) {\n    if (pointerLength > maxPointers) {\n      return { failed: true };\n    }\n    const validPointerCount = pointerLength >= minPointers;\n    return {\n      success: validPointerCount,\n    };\n  }\n}\nexport default IndiscreteGestureHandler;\n"]},"metadata":{},"sourceType":"module"}