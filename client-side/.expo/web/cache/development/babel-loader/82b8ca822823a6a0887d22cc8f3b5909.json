{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport { Actions } from 'react-native-router-flux';\nimport { ActionStatusTypeValues } from \"../../constants/actionStatusTypes\";\nimport { EnvValues } from \"../../constants\";\nexport var ADD_TO_CART = 'ADD_TO_CART';\nexport var REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport var CLEAR_CART = 'CLEAR_CART';\nvar timer;\n\nvar shopppingCartId = () => {\n  return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n};\n\nexport var addToCart = (viewId, id, image, name, color, size, price) => {\n  return function () {\n    var _ref = _asyncToGenerator(function* (dispatch, getState) {\n      dispatch({\n        type: ADD_TO_CART,\n        status: ActionStatusTypeValues.STARTED,\n        viewId,\n        payload: {}\n      });\n      var cartListing = getState().cart.cartListing;\n      console.log('addToCart   CHECK POINT!!!!!');\n      console.log(cartListing);\n      cartListing.push({\n        id: shopppingCartId(),\n        productId: id,\n        image,\n        name,\n        color,\n        size,\n        price\n      });\n      dispatch({\n        type: ADD_TO_CART,\n        viewId,\n        status: ActionStatusTypeValues.COMPLETED,\n        payload: {},\n        cartListing: cartListing\n      });\n    });\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var removeCart = (viewId, id) => {\n  return function () {\n    var _ref2 = _asyncToGenerator(function* (dispatch, getState) {\n      dispatch({\n        type: REMOVE_FROM_CART,\n        status: ActionStatusTypeValues.STARTED,\n        viewId,\n        payload: {}\n      });\n      var cartListing = getState().cart.cartListing;\n      var newCartList = cartListing.filter(x => {\n        return x.id != id;\n      });\n      dispatch({\n        type: REMOVE_FROM_CART,\n        viewId,\n        status: ActionStatusTypeValues.COMPLETED,\n        payload: {},\n        cartListing: newCartList\n      });\n    });\n\n    return function (_x3, _x4) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var clearCart = viewId => {\n  return function () {\n    var _ref3 = _asyncToGenerator(function* (dispatch, getState) {\n      dispatch({\n        type: CLEAR_CART,\n        status: ActionStatusTypeValues.STARTED,\n        viewId,\n        payload: {}\n      });\n      dispatch({\n        type: CLEAR_CART,\n        viewId,\n        status: ActionStatusTypeValues.COMPLETED,\n        payload: {},\n        cartListing: []\n      });\n    });\n\n    return function (_x5, _x6) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/src/store/actions/cart.js"],"names":["Actions","ActionStatusTypeValues","EnvValues","ADD_TO_CART","REMOVE_FROM_CART","CLEAR_CART","timer","shopppingCartId","Math","floor","random","toString","substring","addToCart","viewId","id","image","name","color","size","price","dispatch","getState","type","status","STARTED","payload","cartListing","cart","console","log","push","productId","COMPLETED","removeCart","newCartList","filter","x","clearCart"],"mappings":"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","sourcesContent":["import { AsyncStorage } from 'react-native';\nimport { Actions  } from 'react-native-router-flux';\nimport { ActionStatusTypeValues } from '../../constants/actionStatusTypes';\nimport { EnvValues } from '../../constants';\n\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\n\nexport const CLEAR_CART = 'CLEAR_CART';\n\n\nlet timer;\n\nlet shopppingCartId = () => {\n  return Math.floor((1 + Math.random()) * 0x10000)\n      .toString(16)\n      .substring(1);\n}\n\n\nexport const addToCart = (viewId, id, image, name, color, size, price) => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: ADD_TO_CART,\n      status: ActionStatusTypeValues.STARTED,\n      viewId,\n      payload: {}\n    });\n\n    const cartListing = getState().cart.cartListing;\n    console.log('addToCart   CHECK POINT!!!!!');\n    console.log(cartListing);\n\n\n    cartListing.push({\n      id:shopppingCartId(),\n      productId:id, image, name, color, size, price\n    });\n   \n\n    dispatch({ \n      type: ADD_TO_CART, \n      viewId,\n      status: ActionStatusTypeValues.COMPLETED, \n      payload: { },\n      cartListing: cartListing\n    });\n  };\n};\n\n\n\nexport const removeCart = (viewId, id ) => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      status: ActionStatusTypeValues.STARTED,\n      viewId,\n      payload: {}\n    });\n\n    const cartListing = getState().cart.cartListing;\n\n    var newCartList = cartListing.filter(x => {\n      return x.id != id;\n    })\n\n    dispatch({ \n      type: REMOVE_FROM_CART, \n      viewId,\n      status: ActionStatusTypeValues.COMPLETED, \n      payload: { },\n      cartListing: newCartList\n    });\n  };\n};\n\n\n\nexport const clearCart = (viewId ) => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: CLEAR_CART,\n      status: ActionStatusTypeValues.STARTED,\n      viewId,\n      payload: {}\n    });\n\n    dispatch({ \n      type: CLEAR_CART, \n      viewId,\n      status: ActionStatusTypeValues.COMPLETED, \n      payload: { },\n      cartListing:[]\n    });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}