{"ast":null,"code":"var _jsxFileName = \"/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/node_modules/react-native-router-flux/src/Router.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport ViewPropTypes from \"react-native-web/dist/exports/ViewPropTypes\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport PropTypes from 'prop-types';\nimport navigationStore from \"./navigationStore\";\nimport pathParser from \"./pathParser\";\n\nclass App extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.onBackPress = () => navigationStore.pop();\n\n    this.handleDeepURL = e => this.parseDeepURL(e.url);\n\n    this.parseDeepURL = url => {\n      if (!url) {\n        return;\n      }\n\n      var cleanUrl = this.props.uriPrefix ? url.split(this.props.uriPrefix)[1] : url;\n\n      if (!cleanUrl) {\n        return;\n      }\n\n      var allPaths = Object.values(navigationStore.states).map(obj => obj.path).filter(path => path);\n      var parsedPath = pathParser(cleanUrl, allPaths);\n\n      if (!parsedPath) {\n        return;\n      }\n\n      var {\n        path,\n        params\n      } = parsedPath;\n      var actionKey = Object.entries(navigationStore.states).filter((_ref) => {\n        var [, value] = _ref;\n        return value.path === path;\n      }).map((_ref2) => {\n        var [key] = _ref2;\n        return key;\n      }).find(key => key);\n\n      if (this.props.onDeepLink) {\n        this.props.onDeepLink({\n          url,\n          action: actionKey,\n          params\n        });\n      } else if (actionKey && navigationStore[actionKey]) {\n        navigationStore[actionKey](params);\n      }\n    };\n  }\n\n  componentDidMount() {\n    BackHandler.addEventListener('hardwareBackPress', this.props.backAndroidHandler || this.onBackPress);\n    Linking.getInitialURL().then(url => this.parseDeepURL(url));\n    Linking.addEventListener('url', this.handleDeepURL);\n  }\n\n  componentWillUnmount() {\n    BackHandler.removeEventListener('hardwareBackPress', this.props.backAndroidHandler || this.onBackPress);\n    Linking.removeEventListener('url', this.handleDeepURL);\n  }\n\n  render() {\n    var {\n      dispatch,\n      state,\n      navigator: AppNavigator\n    } = this.props;\n\n    if (dispatch && state) {\n      navigationStore.externalDispatch = dispatch;\n      navigationStore.externalState = state;\n      return React.createElement(AppNavigator, {\n        dispatch: navigationStore.dispatch,\n        state: navigationStore.state,\n        ref: navigatorRef => {\n          navigationStore.setTopLevelNavigator(navigatorRef);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }\n      });\n    }\n\n    return React.createElement(AppNavigator, {\n      onNavigationStateChange: navigationStore.onNavigationStateChange,\n      ref: navigatorRef => {\n        navigationStore.setTopLevelNavigator(navigatorRef);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nApp.propTypes = {\n  navigator: PropTypes.func,\n  backAndroidHandler: PropTypes.func,\n  uriPrefix: PropTypes.string,\n  onDeepLink: PropTypes.func\n};\nApp.defaultProps = {\n  navigator: null,\n  backAndroidHandler: null,\n  uriPrefix: null,\n  onDeepLink: null\n};\n\nvar Router = (_ref3) => {\n  var {\n    createReducer,\n    sceneStyle,\n    onStateChange,\n    scenes,\n    uriPrefix,\n    navigator,\n    getSceneStyle,\n    children,\n    onDeepLink,\n    wrapBy\n  } = _ref3,\n      props = _objectWithoutProperties(_ref3, [\"createReducer\", \"sceneStyle\", \"onStateChange\", \"scenes\", \"uriPrefix\", \"navigator\", \"getSceneStyle\", \"children\", \"onDeepLink\", \"wrapBy\"]);\n\n  var data = _objectSpread({}, props);\n\n  if (getSceneStyle) {\n    data.cardStyle = getSceneStyle(props);\n  }\n\n  if (sceneStyle) {\n    data.cardStyle = sceneStyle;\n  }\n\n  var AppNavigator = scenes || navigator || navigationStore.create(children, data, wrapBy);\n  navigationStore.reducer = createReducer && createReducer(props);\n\n  if (onStateChange) {\n    navigationStore.onStateChange = onStateChange;\n  }\n\n  return React.createElement(App, _extends({}, props, {\n    onDeepLink: onDeepLink,\n    navigator: AppNavigator,\n    uriPrefix: uriPrefix,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 10\n    }\n  }));\n};\n\nRouter.propTypes = {\n  onStateChange: PropTypes.func,\n  scenes: PropTypes.func,\n  navigator: PropTypes.func,\n  wrapBy: PropTypes.func,\n  getSceneStyle: PropTypes.func,\n  sceneStyle: ViewPropTypes.style,\n  createReducer: PropTypes.func,\n  children: PropTypes.element,\n  uriPrefix: PropTypes.string,\n  onDeepLink: PropTypes.func\n};\nRouter.defaultProps = {\n  onStateChange: null,\n  scenes: null,\n  navigator: null,\n  wrapBy: props => props,\n  getSceneStyle: null,\n  sceneStyle: null,\n  children: null,\n  uriPrefix: null,\n  onDeepLink: null\n};\nexport default Router;","map":{"version":3,"sources":["/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/node_modules/react-native-router-flux/src/Router.js"],"names":["React","PropTypes","navigationStore","pathParser","App","Component","onBackPress","pop","handleDeepURL","e","parseDeepURL","url","cleanUrl","props","uriPrefix","split","allPaths","Object","values","states","map","obj","path","filter","parsedPath","params","actionKey","entries","value","key","find","onDeepLink","action","componentDidMount","BackHandler","addEventListener","backAndroidHandler","Linking","getInitialURL","then","componentWillUnmount","removeEventListener","render","dispatch","state","navigator","AppNavigator","externalDispatch","externalState","navigatorRef","setTopLevelNavigator","onNavigationStateChange","propTypes","func","string","defaultProps","Router","createReducer","sceneStyle","onStateChange","scenes","getSceneStyle","children","wrapBy","data","cardStyle","create","reducer","ViewPropTypes","style","element"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { ViewPropTypes, BackHandler, Linking } from 'react-native';\nimport PropTypes from 'prop-types';\nimport navigationStore from './navigationStore';\nimport pathParser from './pathParser';\n\nclass App extends React.Component {\n  static propTypes = {\n    navigator: PropTypes.func,\n    backAndroidHandler: PropTypes.func,\n    uriPrefix: PropTypes.string,\n    onDeepLink: PropTypes.func,\n  };\n\n  static defaultProps = {\n    navigator: null,\n    backAndroidHandler: null,\n    uriPrefix: null,\n    onDeepLink: null,\n  };\n\n  componentDidMount() {\n    BackHandler.addEventListener('hardwareBackPress', this.props.backAndroidHandler || this.onBackPress);\n\n    // If the app was \"woken up\" by an external route.\n    Linking.getInitialURL().then(url => this.parseDeepURL(url));\n    // Add an event listener for further deep linking.\n    Linking.addEventListener('url', this.handleDeepURL);\n  }\n\n  componentWillUnmount() {\n    BackHandler.removeEventListener('hardwareBackPress', this.props.backAndroidHandler || this.onBackPress);\n    Linking.removeEventListener('url', this.handleDeepURL);\n  }\n\n  onBackPress = () => navigationStore.pop();\n\n  handleDeepURL = e => this.parseDeepURL(e.url);\n\n  parseDeepURL = (url) => {\n    // If there is no url, then return.\n    if (!url) {\n      return;\n    }\n\n    // Clean the url with the given prefix.\n    const cleanUrl = this.props.uriPrefix ? url.split(this.props.uriPrefix)[1] : url;\n    // Skip for uriPrefix which not registered\n    if (!cleanUrl) {\n      return;\n    }\n    // Build an array of paths for every scene.\n    const allPaths = Object.values(navigationStore.states)\n      .map(obj => obj.path)\n      .filter(path => path);\n    // Try to match the url against the set of paths and parse the url parameters.\n    const parsedPath = pathParser(cleanUrl, allPaths);\n\n    // If the url could not be matched, then return.\n    if (!parsedPath) {\n      return;\n    }\n\n    // Destructure the matched path and the parsed url parameters.\n    const { path, params } = parsedPath;\n\n    // Get the action from the scene associated with the matched path.\n    const actionKey = Object.entries(navigationStore.states)\n      .filter(([, value]) => value.path === path)\n      .map(([key]) => key)\n      .find(key => key);\n\n    if (this.props.onDeepLink) {\n      this.props.onDeepLink({ url, action: actionKey, params });\n    } else if (actionKey && navigationStore[actionKey]) {\n      // Call the action associated with the scene's path with the parsed parameters.\n      navigationStore[actionKey](params);\n    }\n  };\n\n  render() {\n    const { dispatch, state, navigator: AppNavigator } = this.props;\n    if (dispatch && state) {\n      navigationStore.externalDispatch = dispatch;\n      navigationStore.externalState = state;\n      return (\n        <AppNavigator\n          dispatch={navigationStore.dispatch}\n          state={navigationStore.state}\n          ref={(navigatorRef) => {\n            navigationStore.setTopLevelNavigator(navigatorRef);\n          }}\n        />\n      );\n    }\n    return (\n      <AppNavigator\n        onNavigationStateChange={navigationStore.onNavigationStateChange}\n        ref={(navigatorRef) => {\n          navigationStore.setTopLevelNavigator(navigatorRef);\n        }}\n      />\n    );\n  }\n}\n\nconst Router = ({\n  createReducer, sceneStyle, onStateChange, scenes, uriPrefix, navigator, getSceneStyle, children, onDeepLink, wrapBy, ...props\n}) => {\n  const data = { ...props };\n  if (getSceneStyle) {\n    data.cardStyle = getSceneStyle(props);\n  }\n  if (sceneStyle) {\n    data.cardStyle = sceneStyle;\n  }\n  const AppNavigator = scenes || navigator || navigationStore.create(children, data, wrapBy);\n  navigationStore.reducer = createReducer && createReducer(props);\n  if (onStateChange) {\n    navigationStore.onStateChange = onStateChange;\n  }\n  return <App {...props} onDeepLink={onDeepLink} navigator={AppNavigator} uriPrefix={uriPrefix} />;\n};\nRouter.propTypes = {\n  onStateChange: PropTypes.func,\n  scenes: PropTypes.func,\n  navigator: PropTypes.func,\n  wrapBy: PropTypes.func,\n  getSceneStyle: PropTypes.func,\n  sceneStyle: ViewPropTypes.style,\n  createReducer: PropTypes.func,\n  children: PropTypes.element,\n  uriPrefix: PropTypes.string,\n  onDeepLink: PropTypes.func,\n};\nRouter.defaultProps = {\n  onStateChange: null,\n  scenes: null,\n  navigator: null,\n  wrapBy: props => props,\n  getSceneStyle: null,\n  sceneStyle: null,\n  children: null,\n  uriPrefix: null,\n  onDeepLink: null,\n};\n\nexport default Router;\n"]},"metadata":{},"sourceType":"module"}