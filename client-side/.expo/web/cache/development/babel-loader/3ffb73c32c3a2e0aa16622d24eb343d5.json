{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport invariant from 'fbjs/lib/invariant';\nimport { val } from \"../val\";\nimport { adapt, createAnimatedBlock as block } from \"./AnimatedBlock\";\nimport { createAnimatedCall as call } from \"./AnimatedCall\";\nimport AnimatedNode from \"./AnimatedNode\";\n\nclass AnimatedDebug extends AnimatedNode {\n  constructor(message, value) {\n    invariant(typeof message === 'string', \"Reanimated: Animated.debug node first argument should be of type string but got \".concat(message));\n    invariant(value instanceof AnimatedNode, \"Reanimated: Animated.debug node second argument should be of type AnimatedNode but got \".concat(value));\n    super({\n      type: 'debug',\n      message,\n      value\n    }, [value]);\n\n    _defineProperty(this, \"_message\", void 0);\n\n    _defineProperty(this, \"_value\", void 0);\n\n    this._message = message;\n    this._value = value;\n  }\n\n  toString() {\n    return \"AnimatedDebug, id: \".concat(this.__nodeID);\n  }\n\n  __onEvaluate() {\n    var value = val(this._value);\n    console.log(this._message, value);\n    return value;\n  }\n\n}\n\nexport function createAnimatedDebug(message, value) {\n  if (__DEV__) {\n    var runningInRemoteDebugger = typeof atob !== 'undefined';\n    var runningInExpoShell = global.Expo && global.Expo.Constants.appOwnership !== 'standalone';\n\n    if (runningInRemoteDebugger || runningInExpoShell) {\n      return block([call([value], (_ref) => {\n        var [a] = _ref;\n        return console.log(\"\".concat(message, \" \").concat(a));\n      }), value]);\n    } else {\n      return new AnimatedDebug(message, adapt(value));\n    }\n  }\n\n  return value;\n}","map":{"version":3,"sources":["AnimatedDebug.js"],"names":["createAnimatedBlock","createAnimatedCall","constructor","invariant","value","type","toString","__onEvaluate","val","console","runningInRemoteDebugger","runningInExpoShell","global","block","call","adapt"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAA,SAAA,MAAA,oBAAA;AACA,SAAA,GAAA;AACA,SAAA,KAAA,EAAgBA,mBAAmB,IAAnC,KAAA;AACA,SAASC,kBAAkB,IAA3B,IAAA;AACA,OAAA,YAAA;;AAEA,MAAA,aAAA,SAAA,YAAA,CAAyC;AAIvCC,EAAAA,WAAW,CAAA,OAAA,EAAA,KAAA,EAAiB;AAC1BC,IAAAA,SAAS,CACP,OAAA,OAAA,KADO,QAAA,EAAA,mFAAA,MAAA,CAATA,OAAS,CAAA,CAATA;AAIAA,IAAAA,SAAS,CACPC,KAAK,YADE,YAAA,EAAA,0FAAA,MAAA,CAATD,KAAS,CAAA,CAATA;AAIA,UAAM;AAAEE,MAAAA,IAAI,EAAN,OAAA;AAAA,MAAA,OAAA;AAA0BD,MAAAA;AAA1B,KAAN,EAAyC,CAAzC,KAAyC,CAAzC;;AAT0B,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EAAA,KAAA,CAAA,CAAA;;AAU1B,SAAA,QAAA,GAAA,OAAA;AACA,SAAA,MAAA,GAAA,KAAA;AACD;;AAEDE,EAAAA,QAAQ,GAAG;AACT,WAAA,sBAAA,MAAA,CAA6B,KAA7B,QAAA,CAAA;AACD;;AAEDC,EAAAA,YAAY,GAAG;AACb,QAAMH,KAAK,GAAGI,GAAG,CAAC,KAAlB,MAAiB,CAAjB;AACAC,IAAAA,OAAO,CAAPA,GAAAA,CAAY,KAAZA,QAAAA,EAAAA,KAAAA;AACA,WAAA,KAAA;AACD;;AA1BsC;;AA6BzC,OAAO,SAAA,mBAAA,CAAA,OAAA,EAAA,KAAA,EAA6C;AAClD,MAAA,OAAA,EAAa;AACX,QAAMC,uBAAuB,GAAG,OAAA,IAAA,KADrB,WACX;AAIA,QAAMC,kBAAkB,GACtBC,MAAM,CAANA,IAAAA,IAAeA,MAAM,CAANA,IAAAA,CAAAA,SAAAA,CAAAA,YAAAA,KADjB,YAAA;;AAGA,QAAIF,uBAAuB,IAA3B,kBAAA,EAAmD;AAGjD,aAAOG,KAAK,CAAC,CACXC,IAAI,CAAC,CAAD,KAAC,CAAD,EAAU;AAAA,YAAC,CAAD,CAAC,CAAD;AAAA,eAASL,OAAO,CAAPA,GAAAA,CAAAA,GAAAA,MAAAA,CAAAA,OAAAA,EAAAA,GAAAA,EAAAA,MAAAA,CADZ,CACYA,CAAAA,CAAT;AAAA,OAAV,CADO,EAAb,KAAa,CAAD,CAAZ;AAHF,KAAA,MAOO;AACL,aAAO,IAAA,aAAA,CAAA,OAAA,EAA2BM,KAAK,CAAvC,KAAuC,CAAhC,CAAP;AACD;AAlB+C;;AAqBlD,SAAA,KAAA;AACD","sourcesContent":["import invariant from 'fbjs/lib/invariant';\nimport { val } from '../val';\nimport { adapt, createAnimatedBlock as block } from './AnimatedBlock';\nimport { createAnimatedCall as call } from './AnimatedCall';\nimport AnimatedNode from './AnimatedNode';\n\nclass AnimatedDebug extends AnimatedNode {\n  _message;\n  _value;\n\n  constructor(message, value) {\n    invariant(\n      typeof message === 'string',\n      `Reanimated: Animated.debug node first argument should be of type string but got ${message}`\n    );\n    invariant(\n      value instanceof AnimatedNode,\n      `Reanimated: Animated.debug node second argument should be of type AnimatedNode but got ${value}`\n    );\n    super({ type: 'debug', message, value }, [value]);\n    this._message = message;\n    this._value = value;\n  }\n\n  toString() {\n    return `AnimatedDebug, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    const value = val(this._value);\n    console.log(this._message, value);\n    return value;\n  }\n}\n\nexport function createAnimatedDebug(message, value) {\n  if (__DEV__) {\n    const runningInRemoteDebugger = typeof atob !== 'undefined';\n    // hack to detect if app is running in remote debugger\n    // https://stackoverflow.com/questions/39022216\n\n    const runningInExpoShell =\n      global.Expo && global.Expo.Constants.appOwnership !== 'standalone';\n\n    if (runningInRemoteDebugger || runningInExpoShell) {\n      // When running in expo or remote debugger we use JS console.log to output variables\n      // otherwise we output to the native console using native debug node\n      return block([\n        call([value], ([a]) => console.log(`${message} ${a}`)),\n        value,\n      ]);\n    } else {\n      return new AnimatedDebug(message, adapt(value));\n    }\n  }\n  // Debugging is disabled in PROD\n  return value;\n}\n"]},"metadata":{},"sourceType":"module"}