{"ast":null,"code":"import invariant from 'fbjs/lib/invariant';\nimport AnimatedNode, { getCallID, setCallID } from \"./AnimatedNode\";\nimport AnimatedClock from \"./AnimatedClock\";\nimport { val } from \"../val\";\nexport class AnimatedParam extends AnimatedNode {\n  constructor() {\n    super({\n      type: 'param'\n    }, []);\n    this.argsStack = [];\n\n    this.__attach();\n  }\n\n  beginContext(ref, prevCallID) {\n    this._prevCallID = prevCallID;\n    this.argsStack.push(ref);\n  }\n\n  endContext() {\n    this.argsStack.pop();\n  }\n\n  _getTopNode() {\n    if (this.argsStack.length === 0) throw new Error(\"param: Invocation failed because argsStack is empty\");\n    var top = this.argsStack[this.argsStack.length - 1];\n    return top;\n  }\n\n  setValue(value) {\n    var top = this._getTopNode();\n\n    if (top.setValue) {\n      var callID = getCallID();\n      setCallID(this._prevCallID);\n      top.setValue(value);\n      setCallID(callID);\n    } else {\n      throw new Error(\"param: setValue(\".concat(value, \") failed because the top element has no known method for updating it's current value.\"));\n    }\n  }\n\n  __onEvaluate() {\n    var callID = getCallID();\n    setCallID(this._prevCallID);\n\n    var top = this._getTopNode();\n\n    var value = val(top);\n    setCallID(callID);\n    return value;\n  }\n\n  start() {\n    var node = this._getTopNode();\n\n    invariant(node instanceof AnimatedClock || node instanceof AnimatedParam, \"param: top node should be of type AnimatedClock but got \".concat(node));\n    node.start();\n  }\n\n  stop() {\n    var node = this._getTopNode();\n\n    invariant(node instanceof AnimatedClock || node instanceof AnimatedParam, \"param: top node should be of type AnimatedClock but got \".concat(node));\n    node.stop();\n  }\n\n  isRunning() {\n    var node = this._getTopNode();\n\n    if (node instanceof AnimatedParam) {\n      return node.isRunning();\n    }\n\n    invariant(node instanceof AnimatedClock, \"param: top node should be of type AnimatedClock but got \".concat(node));\n    return node.isStarted();\n  }\n\n}\nexport function createAnimatedParam() {\n  return new AnimatedParam();\n}","map":{"version":3,"sources":["/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/node_modules/react-native-reanimated/src/core/AnimatedParam.js"],"names":["invariant","AnimatedNode","getCallID","setCallID","AnimatedClock","val","AnimatedParam","constructor","type","argsStack","__attach","beginContext","ref","prevCallID","_prevCallID","push","endContext","pop","_getTopNode","length","Error","top","setValue","value","callID","__onEvaluate","start","node","stop","isRunning","isStarted","createAnimatedParam"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,oBAAtB;AACA,OAAOC,YAAP,IAAuBC,SAAvB,EAAkCC,SAAlC;AACA,OAAOC,aAAP;AACA,SAASC,GAAT;AAEA,OAAO,MAAMC,aAAN,SAA4BL,YAA5B,CAAyC;AAI9CM,EAAAA,WAAW,GAAG;AACZ,UAAM;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAN,EAAyB,EAAzB;AADY,SAHdC,SAGc,GAHF,EAGE;;AAEZ,SAAKC,QAAL;AACD;;AAEDC,EAAAA,YAAY,CAACC,GAAD,EAAMC,UAAN,EAAkB;AAC5B,SAAKC,WAAL,GAAmBD,UAAnB;AACA,SAAKJ,SAAL,CAAeM,IAAf,CAAoBH,GAApB;AACD;;AAEDI,EAAAA,UAAU,GAAG;AACX,SAAKP,SAAL,CAAeQ,GAAf;AACD;;AAEDC,EAAAA,WAAW,GAAG;AACZ,QAAI,KAAKT,SAAL,CAAeU,MAAf,KAA0B,CAA9B,EAAiC,MAAM,IAAIC,KAAJ,uDAAN;AACjC,QAAMC,GAAG,GAAG,KAAKZ,SAAL,CAAe,KAAKA,SAAL,CAAeU,MAAf,GAAwB,CAAvC,CAAZ;AACA,WAAOE,GAAP;AACD;;AAEDC,EAAAA,QAAQ,CAACC,KAAD,EAAQ;AACd,QAAMF,GAAG,GAAG,KAAKH,WAAL,EAAZ;;AACA,QAAIG,GAAG,CAACC,QAAR,EAAkB;AAChB,UAAME,MAAM,GAAGtB,SAAS,EAAxB;AACAC,MAAAA,SAAS,CAAC,KAAKW,WAAN,CAAT;AACAO,MAAAA,GAAG,CAACC,QAAJ,CAAaC,KAAb;AACApB,MAAAA,SAAS,CAACqB,MAAD,CAAT;AACD,KALD,MAKO;AACL,YAAM,IAAIJ,KAAJ,2BAA6BG,KAA7B,2FAAN;AACD;AACF;;AAEDE,EAAAA,YAAY,GAAG;AACb,QAAMD,MAAM,GAAGtB,SAAS,EAAxB;AACAC,IAAAA,SAAS,CAAC,KAAKW,WAAN,CAAT;;AACA,QAAMO,GAAG,GAAG,KAAKH,WAAL,EAAZ;;AACA,QAAMK,KAAK,GAAGlB,GAAG,CAACgB,GAAD,CAAjB;AACAlB,IAAAA,SAAS,CAACqB,MAAD,CAAT;AACA,WAAOD,KAAP;AACD;;AAEDG,EAAAA,KAAK,GAAG;AACN,QAAMC,IAAI,GAAG,KAAKT,WAAL,EAAb;;AACAlB,IAAAA,SAAS,CACP2B,IAAI,YAAYvB,aAAhB,IAAiCuB,IAAI,YAAYrB,aAD1C,oEAEoDqB,IAFpD,EAAT;AAIAA,IAAAA,IAAI,CAACD,KAAL;AACD;;AAEDE,EAAAA,IAAI,GAAG;AACL,QAAMD,IAAI,GAAG,KAAKT,WAAL,EAAb;;AACAlB,IAAAA,SAAS,CACP2B,IAAI,YAAYvB,aAAhB,IAAiCuB,IAAI,YAAYrB,aAD1C,oEAEoDqB,IAFpD,EAAT;AAIAA,IAAAA,IAAI,CAACC,IAAL;AACD;;AAEDC,EAAAA,SAAS,GAAG;AACV,QAAMF,IAAI,GAAG,KAAKT,WAAL,EAAb;;AAEA,QAAIS,IAAI,YAAYrB,aAApB,EAAmC;AACjC,aAAOqB,IAAI,CAACE,SAAL,EAAP;AACD;;AACD7B,IAAAA,SAAS,CACP2B,IAAI,YAAYvB,aADT,oEAEoDuB,IAFpD,EAAT;AAIA,WAAOA,IAAI,CAACG,SAAL,EAAP;AACD;;AA1E6C;AA6EhD,OAAO,SAASC,mBAAT,GAA+B;AACpC,SAAO,IAAIzB,aAAJ,EAAP;AACD","sourcesContent":["import invariant from 'fbjs/lib/invariant';\nimport AnimatedNode, { getCallID, setCallID } from './AnimatedNode';\nimport AnimatedClock from './AnimatedClock';\nimport { val } from '../val';\n\nexport class AnimatedParam extends AnimatedNode {\n  argsStack = [];\n  _prevCallID;\n  \n  constructor() {\n    super({ type: 'param' }, []);\n    this.__attach();\n  }\n\n  beginContext(ref, prevCallID) {\n    this._prevCallID = prevCallID;\n    this.argsStack.push(ref);\n  }\n\n  endContext() {\n    this.argsStack.pop();\n  }\n\n  _getTopNode() {\n    if (this.argsStack.length === 0) throw new Error(`param: Invocation failed because argsStack is empty`);\n    const top = this.argsStack[this.argsStack.length - 1];\n    return top;\n  }\n\n  setValue(value) {\n    const top = this._getTopNode();\n    if (top.setValue) {\n      const callID = getCallID();\n      setCallID(this._prevCallID);\n      top.setValue(value);\n      setCallID(callID);\n    } else {\n      throw new Error(`param: setValue(${value}) failed because the top element has no known method for updating it's current value.`)\n    }\n  }\n  \n  __onEvaluate() {\n    const callID = getCallID();\n    setCallID(this._prevCallID);\n    const top = this._getTopNode();\n    const value = val(top);\n    setCallID(callID);\n    return value;\n  }\n\n  start() {\n    const node = this._getTopNode();\n    invariant(\n      node instanceof AnimatedClock || node instanceof AnimatedParam,\n      `param: top node should be of type AnimatedClock but got ${node}`\n    );\n    node.start();\n  }\n\n  stop() {\n    const node = this._getTopNode();\n    invariant(\n      node instanceof AnimatedClock || node instanceof AnimatedParam,\n      `param: top node should be of type AnimatedClock but got ${node}`\n    );\n    node.stop();\n  }\n\n  isRunning() {\n    const node = this._getTopNode();\n\n    if (node instanceof AnimatedParam) {\n      return node.isRunning()\n    }\n    invariant(\n      node instanceof AnimatedClock,\n      `param: top node should be of type AnimatedClock but got ${node}`\n    );\n    return node.isStarted();\n  }\n}\n\nexport function createAnimatedParam() {\n  return new AnimatedParam();\n}\n"]},"metadata":{},"sourceType":"module"}