{"ast":null,"code":"import invariant from 'fbjs/lib/invariant';\nimport { adapt } from \"../core/AnimatedBlock\";\nimport AnimatedNode from \"./AnimatedNode\";\nimport { val } from \"../val\";\n\nclass AnimatedConcat extends AnimatedNode {\n  constructor(input) {\n    invariant(input.every(el => el instanceof AnimatedNode || typeof el === 'number' || typeof el === 'string'), \"Reanimated: Animated.concat node arguments should be of type AnimatedNode or String or Number. One or more of them are not of that type. Node: \".concat(input));\n    super({\n      type: 'concat',\n      input\n    }, input);\n    this._input = input;\n  }\n\n  __onEvaluate() {\n    return this._input.reduce((prev, current) => prev + val(current), '');\n  }\n\n  toString() {\n    return \"AnimatedConcat, id: \".concat(this.__nodeID);\n  }\n\n}\n\nexport function createAnimatedConcat() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return new AnimatedConcat(args.map(adapt));\n}","map":{"version":3,"sources":["AnimatedConcat.js"],"names":["constructor","invariant","input","el","type","__onEvaluate","prev","val","toString","args"],"mappings":"AAAA,OAAA,SAAA,MAAA,oBAAA;AACA,SAAA,KAAA;AACA,OAAA,YAAA;AACA,SAAA,GAAA;;AAEA,MAAA,cAAA,SAAA,YAAA,CAA0C;AACxCA,EAAAA,WAAW,CAAA,KAAA,EAAQ;AACjBC,IAAAA,SAAS,CACPC,KAAK,CAALA,KAAAA,CACEC,EAAE,IACAA,EAAE,YAAFA,YAAAA,IACA,OAAA,EAAA,KADAA,QAAAA,IAEA,OAAA,EAAA,KALG,QACPD,CADO,EAAA,kJAAA,MAAA,CAATD,KAAS,CAAA,CAATA;AASA,UAAM;AAAEG,MAAAA,IAAI,EAAN,QAAA;AAAkBF,MAAAA;AAAlB,KAAN,EAAA,KAAA;AACA,SAAA,MAAA,GAAA,KAAA;AACD;;AAEDG,EAAAA,YAAY,GAAG;AACb,WAAO,KAAA,MAAA,CAAA,MAAA,CAAmB,CAAA,IAAA,EAAA,OAAA,KAAmBC,IAAI,GAAGC,GAAG,CAAhD,OAAgD,CAAhD,EAAP,EAAO,CAAP;AACD;;AAEDC,EAAAA,QAAQ,GAAG;AACT,WAAA,uBAAA,MAAA,CAA8B,KAA9B,QAAA,CAAA;AACD;;AArBuC;;AAwB1C,OAAO,SAAA,oBAAA,GAAuC;AAAA,oCAAvC,IAAuC;AAAvC,IAAA,IAAuC;AAAA;;AAC5C,SAAO,IAAA,cAAA,CAAmBC,IAAI,CAAJA,GAAAA,CAA1B,KAA0BA,CAAnB,CAAP;AACD","sourcesContent":["import invariant from 'fbjs/lib/invariant';\nimport { adapt } from '../core/AnimatedBlock';\nimport AnimatedNode from './AnimatedNode';\nimport { val } from '../val';\n\nclass AnimatedConcat extends AnimatedNode {\n  constructor(input) {\n    invariant(\n      input.every(\n        el =>\n          el instanceof AnimatedNode ||\n          typeof el === 'number' ||\n          typeof el === 'string'\n      ),\n      `Reanimated: Animated.concat node arguments should be of type AnimatedNode or String or Number. One or more of them are not of that type. Node: ${input}`\n    );\n    super({ type: 'concat', input }, input);\n    this._input = input;\n  }\n\n  __onEvaluate() {\n    return this._input.reduce((prev, current) => prev + val(current), '');\n  }\n\n  toString() {\n    return `AnimatedConcat, id: ${this.__nodeID}`;\n  }\n}\n\nexport function createAnimatedConcat(...args) {\n  return new AnimatedConcat(args.map(adapt));\n}\n"]},"metadata":{},"sourceType":"module"}