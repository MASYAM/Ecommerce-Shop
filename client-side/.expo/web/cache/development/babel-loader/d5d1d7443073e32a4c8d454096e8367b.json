{"ast":null,"code":"var _jsxFileName = \"/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/src/screens/InternalBrowser.js\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ListView from \"react-native-web/dist/exports/ListView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { connect } from 'react-redux';\nimport { NavigationActions, NavigationProps } from 'react-navigation';\nimport { Actions } from 'react-native-router-flux';\nimport { WebView } from 'react-native-webview';\nimport { Button, Container, Content, Header, Body, Title, H1, Icon, Left, Right, StyleProvider } from 'native-base';\nimport { Colors } from \"../constants\";\nimport { StandardHeader } from \"../components/legacy/Header\";\n\nclass InternalBrowserPageView extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n\n    this._onError = evt => {\n      console.log('_onError', evt);\n    };\n\n    this._onShouldStartLoadWithRequest = evt => {\n      var {\n        openUrlFailure\n      } = this;\n      var {\n        url\n      } = evt;\n      var isExternalBrowserAllowed = ['mailto:', 'http://', 'https://'].filter(whitelistUrl => {\n        return String(url).substr(0, whitelistUrl.length) === whitelistUrl;\n      }).length > 0;\n      var isAppBrowserAllowed = [].filter(whitelistUrl => {\n        return String(url).substr(0, whitelistUrl.length) === whitelistUrl;\n      }).length > 0;\n\n      if (isAppBrowserAllowed) {\n        return true;\n      }\n\n      if (isExternalBrowserAllowed) {\n        if (Linking.canOpenURL(url)) {\n          Linking.openURL(url).then(() => {}).catch(error => {\n            openUrlFailure();\n          });\n          return false;\n        }\n      }\n\n      openUrlFailure();\n      return false;\n    };\n\n    this.openUrlFailure = () => {\n      Alert.alert('Sorry', 'We cannot open this link from this device.\\nPress okay to open our enquiry form details.', [{\n        text: I18n.t('okay_button'),\n        style: 'default'\n      }, {\n        text: I18n.t('cancel_button'),\n        style: 'cancel'\n      }]);\n    };\n  }\n\n  render() {\n    var {\n      props\n    } = this;\n    var {\n      navigation\n    } = props;\n    var {\n      params\n    } = navigation.state;\n    var {\n      modal,\n      uri,\n      title\n    } = params || {};\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }\n    }, React.createElement(StandardHeader, {\n      dismissable: !!modal,\n      drawer: !modal,\n      title: title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }), React.createElement(WebView, {\n      onError: this._onError,\n      style: {\n        flex: 1,\n        backgroundColor: Colors.supportingBgColor\n      },\n      source: {\n        uri\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default InternalBrowserPageView;","map":{"version":3,"sources":["/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/src/screens/InternalBrowser.js"],"names":["React","connect","NavigationActions","NavigationProps","Actions","WebView","Button","Container","Content","Header","Body","Title","H1","Icon","Left","Right","StyleProvider","Colors","StandardHeader","InternalBrowserPageView","PureComponent","_onError","evt","console","log","_onShouldStartLoadWithRequest","openUrlFailure","url","isExternalBrowserAllowed","filter","whitelistUrl","String","substr","length","isAppBrowserAllowed","Linking","canOpenURL","openURL","then","catch","error","Alert","alert","text","I18n","t","style","render","props","navigation","params","state","modal","uri","title","flex","backgroundColor","supportingBgColor"],"mappings":"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","sourcesContent":["// @flow\nimport React from 'react';\nimport {\n  View,\n  StyleSheet,\n  TouchableOpacity,\n  ListView,\n  Image,\n  Linking,\n  Alert,\n} from 'react-native';\nimport { connect } from 'react-redux';\nimport { NavigationActions, NavigationProps } from 'react-navigation';\nimport { Actions } from 'react-native-router-flux';\nimport { WebView } from 'react-native-webview';\nimport {\n  Button,\n  Container,\n  Content,\n  Header,\n  Body,\n  Title,\n  H1,\n  Icon,\n  Left,\n  Right,\n  StyleProvider,\n} from 'native-base';\nimport { Colors } from '../constants';\nimport { StandardHeader } from '../components/legacy/Header';\n\nclass InternalBrowserPageView extends React.PureComponent {\n  _onError = evt => {\n    console.log('_onError', evt);\n  };\n  _onShouldStartLoadWithRequest = evt => {\n    const { openUrlFailure } = this;\n\n    const { url } = evt;\n\n    const isExternalBrowserAllowed =\n      [\n        'mailto:',\n        'http://',\n        'https://',\n      ].filter(whitelistUrl => {\n        return String(url).substr(0, whitelistUrl.length) === whitelistUrl;\n      }).length > 0;\n\n    const isAppBrowserAllowed =\n      [\n      ].filter(whitelistUrl => {\n        return String(url).substr(0, whitelistUrl.length) === whitelistUrl;\n      }).length > 0;\n\n    if (isAppBrowserAllowed) {\n      return true;\n    }\n\n    if (isExternalBrowserAllowed) {\n      if (Linking.canOpenURL(url)) {\n        Linking.openURL(url)\n          .then(() => { })\n          .catch(error => {\n            openUrlFailure();\n          });\n        return false;\n      }\n    }\n\n    openUrlFailure();\n    return false;\n  };\n\n  openUrlFailure = () => {\n    Alert.alert(\n      'Sorry',\n      'We cannot open this link from this device.\\nPress okay to open our enquiry form details.',\n      [\n        {\n          text: I18n.t('okay_button'),\n          style: 'default',\n        },\n        { text: I18n.t('cancel_button'), style: 'cancel' },\n      ],\n    );\n  };\n\n\n\n  render() {\n    const { props } = this;\n    const { navigation } = props;\n    const { params } = navigation.state;\n    const { modal, uri, title } = params || {};\n\n    return (\n      <Container>\n        <StandardHeader dismissable={!!modal} drawer={!modal} title={title} />\n        <WebView\n          onError={this._onError}\n          style={{ flex: 1, backgroundColor: Colors.supportingBgColor }}\n          source={{ uri }}\n        />\n      </Container>\n    );\n  }\n}\n\nexport default InternalBrowserPageView;"]},"metadata":{},"sourceType":"module"}