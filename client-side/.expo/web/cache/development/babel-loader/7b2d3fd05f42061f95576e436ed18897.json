{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport { Actions } from 'react-native-router-flux';\nimport { ActionStatusTypeValues } from \"../../constants/actionStatusTypes\";\nimport { EnvValues } from \"../../constants\";\nexport var REGISTER_ACCOUNT = 'REGISTER_ACCOUNT';\nexport var LOGIN_ACCOUNT = 'LOGIN_ACCOUNT';\nexport var CHECK_LOGIN = 'CHECK_LOGIN';\nexport var LOGOUT = 'LOGOUT';\nvar timer;\nexport var authenticate = (userId, token) => {\n  return dispatch => {\n    dispatch({\n      type: AUTHENTICATE,\n      token: token\n    });\n  };\n};\nexport var registerAccount = (viewId, username, email, password) => {\n  return function () {\n    var _ref = _asyncToGenerator(function* (dispatch, getState) {\n      dispatch({\n        type: REGISTER_ACCOUNT,\n        status: ActionStatusTypeValues.STARTED,\n        viewId,\n        payload: {\n          username,\n          email,\n          password\n        }\n      });\n\n      if (!username || !email || !password) {\n        console.warn(\"Missing required parameters.\", {\n          username,\n          email,\n          password\n        });\n        dispatch({\n          type: REGISTER_ACCOUNT,\n          status: ActionStatusTypeValues.ERROR,\n          viewId,\n          payload: {\n            error: new Error(\"Missing required parameters.\"),\n            username,\n            email,\n            password\n          }\n        });\n        return;\n      }\n\n      var finalURL = EnvValues.API_PATH + 'auth/register';\n      var resData = null;\n      var response = null;\n\n      try {\n        response = yield fetch(finalURL, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            'username': username,\n            'email': email,\n            'password': password\n          })\n        });\n        resData = yield response.json();\n      } catch (error) {\n        dispatch({\n          type: REGISTER_ACCOUNT,\n          status: ActionStatusTypeValues.ERROR,\n          viewId,\n          payload: {\n            email,\n            error: resData\n          }\n        });\n        return;\n      }\n\n      if (!response.ok) {\n        dispatch({\n          type: REGISTER_ACCOUNT,\n          status: ActionStatusTypeValues.ERROR,\n          viewId,\n          payload: {\n            email,\n            error: resData\n          }\n        });\n        return;\n      }\n\n      dispatch({\n        type: REGISTER_ACCOUNT,\n        viewId,\n        status: ActionStatusTypeValues.COMPLETED,\n        payload: {},\n        registerStatus: resData.result.status,\n        registerErrorMessage: resData.result.error\n      });\n    });\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var login = (viewId, userEmail, password) => {\n  return function () {\n    var _ref2 = _asyncToGenerator(function* (dispatch, getState) {\n      dispatch({\n        type: LOGIN_ACCOUNT,\n        status: ActionStatusTypeValues.STARTED,\n        viewId,\n        payload: {\n          userEmail,\n          password\n        }\n      });\n\n      if (!userEmail || !password) {\n        console.warn(\"Missing required parameters.\", {\n          userEmail,\n          password\n        });\n        dispatch({\n          type: LOGIN_ACCOUNT,\n          status: ActionStatusTypeValues.ERROR,\n          viewId,\n          payload: {\n            error: new Error(\"Missing required parameters.\"),\n            userEmail,\n            password\n          }\n        });\n        return;\n      }\n\n      var finalURL = EnvValues.API_PATH + 'auth/login';\n      var resData = null;\n      var response = null;\n\n      try {\n        response = yield fetch(finalURL, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            'email': userEmail,\n            'password': password\n          })\n        });\n        resData = yield response.json();\n      } catch (error) {\n        dispatch({\n          type: LOGIN_ACCOUNT,\n          status: ActionStatusTypeValues.ERROR,\n          viewId,\n          payload: {\n            email: userEmail,\n            error: resData\n          }\n        });\n        return;\n      }\n\n      if (!response.ok) {\n        dispatch({\n          type: LOGIN_ACCOUNT,\n          status: ActionStatusTypeValues.ERROR,\n          viewId,\n          payload: {\n            email: userEmail,\n            error: resData\n          }\n        });\n        return;\n      }\n\n      var {\n        userProfile,\n        token,\n        status\n      } = resData.result;\n      var {\n        userId,\n        username,\n        profilePicture,\n        email,\n        mobile,\n        lastLogonTime\n      } = userProfile;\n\n      if (resData.result.status === \"success\") {\n        saveDataToStorage(token, userId, username, profilePicture, email, mobile, lastLogonTime);\n      }\n\n      dispatch({\n        type: LOGIN_ACCOUNT,\n        viewId,\n        status: ActionStatusTypeValues.COMPLETED,\n        payload: {},\n        loginStatus: resData.result.status,\n        loginProfile: resData.result.userProfile,\n        loginErrorMessage: resData.result.error,\n        token: token\n      });\n    });\n\n    return function (_x3, _x4) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var checkLogin = viewId => {\n  return function () {\n    var _ref3 = _asyncToGenerator(function* (dispatch, getState) {\n      dispatch({\n        type: CHECK_LOGIN,\n        status: ActionStatusTypeValues.STARTED,\n        viewId,\n        payload: {}\n      });\n      var userData = yield AsyncStorage.getItem('userData');\n\n      if (userData) {\n        var transformedData = JSON.parse(userData);\n\n        if (transformedData.token) {\n          dispatch({\n            type: CHECK_LOGIN,\n            viewId,\n            status: ActionStatusTypeValues.COMPLETED,\n            payload: {},\n            token: transformedData.token,\n            loginProfile: transformedData,\n            loginErrorMessage: null\n          });\n        } else {\n          dispatch({\n            type: CHECK_LOGIN,\n            status: ActionStatusTypeValues.ERROR,\n            viewId,\n            payload: {}\n          });\n        }\n      } else {\n        dispatch({\n          type: CHECK_LOGIN,\n          status: ActionStatusTypeValues.ERROR,\n          viewId,\n          payload: {}\n        });\n      }\n    });\n\n    return function (_x5, _x6) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};\nexport var logout = function logout() {\n  var screenName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"root\";\n  return dispatch => {\n    clearLogoutTimer();\n    AsyncStorage.removeItem('userData');\n    Actions.reset(screenName);\n    dispatch({\n      type: LOGOUT\n    });\n  };\n};\n\nvar clearLogoutTimer = () => {\n  if (timer) {\n    clearTimeout(timer);\n  }\n};\n\nvar setLogoutTimer = expirationTime => {\n  return dispatch => {\n    timer = setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime);\n  };\n};\n\nvar saveDataToStorage = (token, userId, username, profilePicture, email, mobile, lastLogonTime) => {\n  AsyncStorage.setItem('userData', JSON.stringify({\n    token: token,\n    userId: userId,\n    username: username,\n    profilePicture: profilePicture,\n    email: email,\n    mobile: mobile,\n    lastLogonTime: lastLogonTime\n  }));\n};","map":{"version":3,"sources":["/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/src/store/actions/auth.js"],"names":["Actions","ActionStatusTypeValues","EnvValues","REGISTER_ACCOUNT","LOGIN_ACCOUNT","CHECK_LOGIN","LOGOUT","timer","authenticate","userId","token","dispatch","type","AUTHENTICATE","registerAccount","viewId","username","email","password","getState","status","STARTED","payload","console","warn","ERROR","error","Error","finalURL","API_PATH","resData","response","fetch","method","headers","body","JSON","stringify","json","ok","COMPLETED","registerStatus","result","registerErrorMessage","login","userEmail","userProfile","profilePicture","mobile","lastLogonTime","saveDataToStorage","loginStatus","loginProfile","loginErrorMessage","checkLogin","userData","AsyncStorage","getItem","transformedData","parse","logout","screenName","clearLogoutTimer","removeItem","reset","clearTimeout","setLogoutTimer","expirationTime","setTimeout","setItem"],"mappings":"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","sourcesContent":["import { AsyncStorage } from 'react-native';\nimport { Actions  } from 'react-native-router-flux';\nimport { ActionStatusTypeValues } from '../../constants/actionStatusTypes';\nimport { EnvValues } from '../../constants';\n// export const SIGNUP = 'SIGNUP';\n// export const LOGIN = 'LOGIN';\n\nexport const REGISTER_ACCOUNT = 'REGISTER_ACCOUNT';\nexport const LOGIN_ACCOUNT = 'LOGIN_ACCOUNT';\nexport const CHECK_LOGIN = 'CHECK_LOGIN';\n\n\n\nexport const LOGOUT = 'LOGOUT';\n\nlet timer;\n\nexport const authenticate = (userId, token) => {\n  return dispatch => {\n    dispatch({ type: AUTHENTICATE, token: token });\n  };\n};\n\nexport const registerAccount = (viewId, username, email, password) => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: REGISTER_ACCOUNT,\n      status: ActionStatusTypeValues.STARTED,\n      viewId,\n      payload: {username, email, password}\n    });\n\n    if ( !username || !email|| !password) {\n      console.warn(\"Missing required parameters.\" , {username, email, password});\n      dispatch({\n        type: REGISTER_ACCOUNT,\n        status: ActionStatusTypeValues.ERROR,\n        viewId,\n        payload: {error: new Error(\"Missing required parameters.\"), username, email, password}\n      });\n      return;\n    }\n    const finalURL = EnvValues.API_PATH + 'auth/register';\n    let resData = null;\n    let response = null;\n    try {\n            response = await  fetch(finalURL,\n            {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  'username':username, \n                  'email':email, \n                  'password':password\n                })\n              }\n            );\n      resData = await response.json();\n    } catch (error ) {\n          dispatch({\n            type: REGISTER_ACCOUNT,\n            status: ActionStatusTypeValues.ERROR,\n            viewId,\n            payload: {email, error: resData}\n          });\n          return;\n    }\n    if (!response.ok) {\n      dispatch({\n        type: REGISTER_ACCOUNT,\n        status: ActionStatusTypeValues.ERROR,\n        viewId,\n        payload: {email, error: resData}\n      });\n      return;\n    }\n    dispatch({ \n      type: REGISTER_ACCOUNT, \n      viewId,\n      status: ActionStatusTypeValues.COMPLETED, \n      payload: { },\n      registerStatus: resData.result.status,\n      registerErrorMessage: resData.result.error\n    });\n  };\n};\n\n\n\n\n\n\n\n\n\nexport const login = (viewId, userEmail, password) => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: LOGIN_ACCOUNT,\n      status: ActionStatusTypeValues.STARTED,\n      viewId,\n      payload: {userEmail, password}\n    });\n    if (!userEmail || !password) {\n      console.warn(\"Missing required parameters.\" , {userEmail, password});\n      dispatch({\n        type: LOGIN_ACCOUNT,\n        status: ActionStatusTypeValues.ERROR,\n        viewId,\n        payload: {error: new Error(\"Missing required parameters.\"), userEmail, password}\n      });\n      return;\n    }\n    const finalURL = EnvValues.API_PATH + 'auth/login';\n    let resData = null;\n    let response = null;\n    try {\n            response = await  fetch(finalURL,\n            {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  'email':userEmail, \n                  'password':password\n                })\n              }\n            );\n      resData = await response.json();\n    } catch (error ) {\n          dispatch({\n            type: LOGIN_ACCOUNT,\n            status: ActionStatusTypeValues.ERROR,\n            viewId,\n            payload: {email:userEmail, error: resData}\n          });\n          return;\n    }\n    if (!response.ok) {\n      dispatch({\n        type: LOGIN_ACCOUNT,\n        status: ActionStatusTypeValues.ERROR,\n        viewId,\n        payload: {email:userEmail, error: resData}\n      });\n      return;\n    }\n    const {userProfile, token , status} = resData.result;\n    const {userId, username, profilePicture,email,mobile,lastLogonTime} = userProfile;\n    if(resData.result.status===\"success\"){\n      //storing information\n      saveDataToStorage(token, userId, username, profilePicture,email,mobile,lastLogonTime);\n    }\n    dispatch({ \n      type: LOGIN_ACCOUNT, \n      viewId,\n      status: ActionStatusTypeValues.COMPLETED, \n      payload: { },\n      loginStatus: resData.result.status,\n      loginProfile: resData.result.userProfile,\n      loginErrorMessage: resData.result.error,\n      token:token\n    });\n  };\n};\n\n\n\n\nexport const checkLogin = (viewId) => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: CHECK_LOGIN,\n      status: ActionStatusTypeValues.STARTED,\n      viewId,\n      payload: {}\n    });\n\n\n\n    const userData = await AsyncStorage.getItem('userData');\n    if (userData) \n    {\n      const transformedData = JSON.parse(userData);\n      if (transformedData.token) \n      {\n        dispatch({ \n          type: CHECK_LOGIN,\n          viewId,\n          status: ActionStatusTypeValues.COMPLETED, \n          payload: { },\n          token: transformedData.token,\n          loginProfile: transformedData,\n          loginErrorMessage: null\n        });\n      }\n      else\n      {\n        dispatch({\n          type: CHECK_LOGIN,\n          status: ActionStatusTypeValues.ERROR,\n          viewId,\n          payload: {}\n        });\n      }\n    }\n    else\n    {\n      dispatch({\n        type: CHECK_LOGIN,\n        status: ActionStatusTypeValues.ERROR,\n        viewId,\n        payload: {}\n      });\n    }\n  };\n};\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport const logout = (screenName: string = \"root\") => (dispatch) => {\n  clearLogoutTimer();\n  AsyncStorage.removeItem('userData');\n  Actions.reset(screenName);\n  dispatch({ type: LOGOUT });\n};\n\nconst clearLogoutTimer = () => {\n  if (timer) {\n    clearTimeout(timer);\n  }\n};\n\nconst setLogoutTimer = expirationTime => {\n  return dispatch => {\n    timer = setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime);\n  };\n};\n\nconst saveDataToStorage = (token, userId, username, profilePicture,email,mobile,lastLogonTime) => {\n  AsyncStorage.setItem(\n    'userData',\n    JSON.stringify({\n      token: token,\n      userId: userId,\n      username:username,\n      profilePicture:profilePicture,\n      email:email,\n      mobile:mobile,\n      lastLogonTime:lastLogonTime\n    })\n  );\n};\n"]},"metadata":{},"sourceType":"module"}