{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport FontObserver from 'fontfaceobserver';\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nexport default {\n  get name() {\n    return 'ExpoFontLoader';\n  },\n\n  loadAsync(fontFamilyName, resource) {\n    return _asyncToGenerator(function* () {\n      if (!canUseDOM) {\n        return;\n      }\n\n      var canInjectStyle = document.head && typeof document.head.appendChild === 'function';\n\n      if (!canInjectStyle) {\n        throw new Error('E_FONT_CREATION_FAILED : document element cannot support injecting fonts');\n      }\n\n      var style = _createWebStyle(fontFamilyName, resource);\n\n      document.head.appendChild(style);\n\n      if (navigator.userAgent.includes('Edge')) {\n        return;\n      }\n\n      return new FontObserver(fontFamilyName).load();\n    })();\n  }\n\n};\nvar ID = 'expo-generated-fonts';\n\nfunction getStyleElement() {\n  var element = document.getElementById(ID);\n\n  if (element && element instanceof HTMLStyleElement) {\n    return element;\n  }\n\n  var styleElement = document.createElement('style');\n  styleElement.id = ID;\n  styleElement.type = 'text/css';\n  return styleElement;\n}\n\nfunction _createWebStyle(fontFamily, resource) {\n  var fontStyle = \"@font-face {\\n    font-family: \".concat(fontFamily, \";\\n    src: url(\").concat(resource.uri, \");\\n  }\");\n  var styleElement = getStyleElement();\n\n  if (styleElement.styleSheet) {\n    var styleElementIE = styleElement;\n    styleElementIE.styleSheet.cssText = styleElementIE.styleSheet.cssText ? styleElementIE.styleSheet.cssText + fontStyle : fontStyle;\n  } else {\n    var textNode = document.createTextNode(fontStyle);\n    styleElement.appendChild(textNode);\n  }\n\n  return styleElement;\n}","map":{"version":3,"sources":["../src/ExpoFontLoader.web.ts"],"names":[],"mappings":";;;;AAAA,OAAO,YAAP,MAAyB,kBAAzB;AACA,SAAS,SAAT,QAA0B,+BAA1B;AAGA,eAAe;AACb,MAAI,IAAJ,GAAQ;AACN,WAAO,gBAAP;AACD,GAHY;;AAKP,EAAA,SAAN,CAAgB,cAAhB,EAAwC,QAAxC,EAA8D;AAAA;AAC5D,UAAI,CAAC,SAAL,EAAgB;AACd;AACD;;AAED,UAAM,cAAc,GAAG,QAAQ,CAAC,IAAT,IAAiB,OAAO,QAAQ,CAAC,IAAT,CAAc,WAArB,KAAqC,UAA7E;;AACA,UAAI,CAAC,cAAL,EAAqB;AACnB,cAAM,IAAI,KAAJ,CAAU,0EAAV,CAAN;AACD;;AAED,UAAM,KAAK,GAAG,eAAe,CAAC,cAAD,EAAiB,QAAjB,CAA7B;;AACA,MAAA,QAAQ,CAAC,IAAT,CAAe,WAAf,CAA2B,KAA3B;;AAEA,UAAI,SAAS,CAAC,SAAV,CAAoB,QAApB,CAA6B,MAA7B,CAAJ,EAA0C;AACxC;AACD;;AACD,aAAO,IAAI,YAAJ,CAAiB,cAAjB,EAAiC,IAAjC,EAAP;AAhB4D;AAiB7D;;AAtBY,CAAf;AAyBA,IAAM,EAAE,GAAG,sBAAX;;AAEA,SAAS,eAAT,GAAwB;AACtB,MAAM,OAAO,GAAG,QAAQ,CAAC,cAAT,CAAwB,EAAxB,CAAhB;;AACA,MAAI,OAAO,IAAI,OAAO,YAAY,gBAAlC,EAAoD;AAClD,WAAO,OAAP;AACD;;AACD,MAAM,YAAY,GAAG,QAAQ,CAAC,aAAT,CAAuB,OAAvB,CAArB;AACA,EAAA,YAAY,CAAC,EAAb,GAAkB,EAAlB;AACA,EAAA,YAAY,CAAC,IAAb,GAAoB,UAApB;AACA,SAAO,YAAP;AACD;;AAED,SAAS,eAAT,CAAyB,UAAzB,EAA6C,QAA7C,EAAmE;AACjE,MAAM,SAAS,4CACE,UADF,6BAEF,QAAQ,CAAC,GAFP,YAAf;AAKA,MAAM,YAAY,GAAG,eAAe,EAApC;;AAGA,MAAI,YAAY,CAAC,UAAjB,EAA6B;AAC3B,QAAM,cAAc,GAAG,YAAvB;AACA,IAAA,cAAc,CAAC,UAAf,CAA0B,OAA1B,GAAoC,cAAc,CAAC,UAAf,CAA0B,OAA1B,GAChC,cAAc,CAAC,UAAf,CAA0B,OAA1B,GAAoC,SADJ,GAEhC,SAFJ;AAGD,GALD,MAKO;AACL,QAAM,QAAQ,GAAG,QAAQ,CAAC,cAAT,CAAwB,SAAxB,CAAjB;AACA,IAAA,YAAY,CAAC,WAAb,CAAyB,QAAzB;AACD;;AACD,SAAO,YAAP;AACD","sourcesContent":["import FontObserver from 'fontfaceobserver';\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport { FontResource } from './Font.types';\n\nexport default {\n  get name(): string {\n    return 'ExpoFontLoader';\n  },\n\n  async loadAsync(fontFamilyName: string, resource: FontResource): Promise<void> {\n    if (!canUseDOM) {\n      return;\n    }\n\n    const canInjectStyle = document.head && typeof document.head.appendChild === 'function';\n    if (!canInjectStyle) {\n      throw new Error('E_FONT_CREATION_FAILED : document element cannot support injecting fonts');\n    }\n\n    const style = _createWebStyle(fontFamilyName, resource);\n    document.head!.appendChild(style);\n    // https://github.com/bramstein/fontfaceobserver/issues/109#issuecomment-333356795\n    if (navigator.userAgent.includes('Edge')) {\n      return;\n    }\n    return new FontObserver(fontFamilyName).load();\n  },\n};\n\nconst ID = 'expo-generated-fonts';\n\nfunction getStyleElement(): HTMLStyleElement {\n  const element = document.getElementById(ID);\n  if (element && element instanceof HTMLStyleElement) {\n    return element;\n  }\n  const styleElement = document.createElement('style');\n  styleElement.id = ID;\n  styleElement.type = 'text/css';\n  return styleElement;\n}\n\nfunction _createWebStyle(fontFamily: string, resource: FontResource): HTMLStyleElement {\n  const fontStyle = `@font-face {\n    font-family: ${fontFamily};\n    src: url(${resource.uri});\n  }`;\n\n  const styleElement = getStyleElement();\n  // @ts-ignore: TypeScript does not define HTMLStyleElement::styleSheet. This is just for IE and\n  // possibly can be removed if it's unnecessary on IE 11.\n  if (styleElement.styleSheet) {\n    const styleElementIE = styleElement as any;\n    styleElementIE.styleSheet.cssText = styleElementIE.styleSheet.cssText\n      ? styleElementIE.styleSheet.cssText + fontStyle\n      : fontStyle;\n  } else {\n    const textNode = document.createTextNode(fontStyle);\n    styleElement.appendChild(textNode);\n  }\n  return styleElement;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}