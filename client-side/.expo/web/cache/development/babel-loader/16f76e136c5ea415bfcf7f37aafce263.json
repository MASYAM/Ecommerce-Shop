{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport invariant from 'fbjs/lib/invariant';\nimport AnimatedNode, { getCallID, setCallID } from \"./AnimatedNode\";\nimport AnimatedClock from \"./AnimatedClock\";\nimport { val } from \"../val\";\nexport class AnimatedParam extends AnimatedNode {\n  constructor() {\n    super({\n      type: 'param'\n    }, []);\n\n    _defineProperty(this, \"argsStack\", []);\n\n    _defineProperty(this, \"_prevCallID\", void 0);\n\n    this.__attach();\n  }\n\n  beginContext(ref, prevCallID) {\n    this._prevCallID = prevCallID;\n    this.argsStack.push(ref);\n  }\n\n  endContext() {\n    this.argsStack.pop();\n  }\n\n  _getTopNode() {\n    if (this.argsStack.length === 0) throw new Error(\"param: Invocation failed because argsStack is empty\");\n    var top = this.argsStack[this.argsStack.length - 1];\n    return top;\n  }\n\n  setValue(value) {\n    var top = this._getTopNode();\n\n    if (top.setValue) {\n      var callID = getCallID();\n      setCallID(this._prevCallID);\n      top.setValue(value);\n      setCallID(callID);\n    } else {\n      throw new Error(\"param: setValue(\".concat(value, \") failed because the top element has no known method for updating it's current value.\"));\n    }\n  }\n\n  __onEvaluate() {\n    var callID = getCallID();\n    setCallID(this._prevCallID);\n\n    var top = this._getTopNode();\n\n    var value = val(top);\n    setCallID(callID);\n    return value;\n  }\n\n  start() {\n    var node = this._getTopNode();\n\n    invariant(node instanceof AnimatedClock || node instanceof AnimatedParam, \"param: top node should be of type AnimatedClock but got \".concat(node));\n    node.start();\n  }\n\n  stop() {\n    var node = this._getTopNode();\n\n    invariant(node instanceof AnimatedClock || node instanceof AnimatedParam, \"param: top node should be of type AnimatedClock but got \".concat(node));\n    node.stop();\n  }\n\n  isRunning() {\n    var node = this._getTopNode();\n\n    if (node instanceof AnimatedParam) {\n      return node.isRunning();\n    }\n\n    invariant(node instanceof AnimatedClock, \"param: top node should be of type AnimatedClock but got \".concat(node));\n    return node.isStarted();\n  }\n\n}\nexport function createAnimatedParam() {\n  return new AnimatedParam();\n}","map":{"version":3,"sources":["AnimatedParam.js"],"names":["constructor","type","beginContext","endContext","_getTopNode","top","setValue","callID","getCallID","setCallID","__onEvaluate","value","val","start","node","invariant","stop","isRunning"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAA,SAAA,MAAA,oBAAA;AACA,OAAA,YAAA,IAAA,SAAA,EAAA,SAAA;AACA,OAAA,aAAA;AACA,SAAA,GAAA;AAEA,OAAO,MAAA,aAAA,SAAA,YAAA,CAAyC;AAI9CA,EAAAA,WAAW,GAAG;AACZ,UAAM;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAN,EAAA,EAAA;;AADY,IAAA,eAAA,CAAA,IAAA,EAAA,WAAA,EAHF,EAGE,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,aAAA,EAAA,KAAA,CAAA,CAAA;;AAEZ,SAAA,QAAA;AACD;;AAEDC,EAAAA,YAAY,CAAA,GAAA,EAAA,UAAA,EAAkB;AAC5B,SAAA,WAAA,GAAA,UAAA;AACA,SAAA,SAAA,CAAA,IAAA,CAAA,GAAA;AACD;;AAEDC,EAAAA,UAAU,GAAG;AACX,SAAA,SAAA,CAAA,GAAA;AACD;;AAEDC,EAAAA,WAAW,GAAG;AACZ,QAAI,KAAA,SAAA,CAAA,MAAA,KAAJ,CAAA,EAAiC,MAAM,IAAA,KAAA,CAAN,qDAAM,CAAN;AACjC,QAAMC,GAAG,GAAG,KAAA,SAAA,CAAe,KAAA,SAAA,CAAA,MAAA,GAA3B,CAAY,CAAZ;AACA,WAAA,GAAA;AACD;;AAEDC,EAAAA,QAAQ,CAAA,KAAA,EAAQ;AACd,QAAMD,GAAG,GAAG,KAAZ,WAAY,EAAZ;;AACA,QAAIA,GAAG,CAAP,QAAA,EAAkB;AAChB,UAAME,MAAM,GAAGC,SAAf,EAAA;AACAC,MAAAA,SAAS,CAAC,KAAVA,WAAS,CAATA;AACAJ,MAAAA,GAAG,CAAHA,QAAAA,CAAAA,KAAAA;AACAI,MAAAA,SAAS,CAATA,MAAS,CAATA;AAJF,KAAA,MAKO;AACL,YAAM,IAAA,KAAA,CAAA,mBAAA,MAAA,CAAA,KAAA,EAAN,uFAAM,CAAA,CAAN;AACD;AACF;;AAEDC,EAAAA,YAAY,GAAG;AACb,QAAMH,MAAM,GAAGC,SAAf,EAAA;AACAC,IAAAA,SAAS,CAAC,KAAVA,WAAS,CAATA;;AACA,QAAMJ,GAAG,GAAG,KAAZ,WAAY,EAAZ;;AACA,QAAMM,KAAK,GAAGC,GAAG,CAAjB,GAAiB,CAAjB;AACAH,IAAAA,SAAS,CAATA,MAAS,CAATA;AACA,WAAA,KAAA;AACD;;AAEDI,EAAAA,KAAK,GAAG;AACN,QAAMC,IAAI,GAAG,KAAb,WAAa,EAAb;;AACAC,IAAAA,SAAS,CACPD,IAAI,YAAJA,aAAAA,IAAiCA,IAAI,YAD9B,aAAA,EAAA,2DAAA,MAAA,CAATC,IAAS,CAAA,CAATA;AAIAD,IAAAA,IAAI,CAAJA,KAAAA;AACD;;AAEDE,EAAAA,IAAI,GAAG;AACL,QAAMF,IAAI,GAAG,KAAb,WAAa,EAAb;;AACAC,IAAAA,SAAS,CACPD,IAAI,YAAJA,aAAAA,IAAiCA,IAAI,YAD9B,aAAA,EAAA,2DAAA,MAAA,CAATC,IAAS,CAAA,CAATA;AAIAD,IAAAA,IAAI,CAAJA,IAAAA;AACD;;AAEDG,EAAAA,SAAS,GAAG;AACV,QAAMH,IAAI,GAAG,KAAb,WAAa,EAAb;;AAEA,QAAIA,IAAI,YAAR,aAAA,EAAmC;AACjC,aAAOA,IAAI,CAAX,SAAOA,EAAP;AACD;;AACDC,IAAAA,SAAS,CACPD,IAAI,YADG,aAAA,EAAA,2DAAA,MAAA,CAATC,IAAS,CAAA,CAATA;AAIA,WAAOD,IAAI,CAAX,SAAOA,EAAP;AACD;;AA1E6C;AA6EhD,OAAO,SAAA,mBAAA,GAA+B;AACpC,SAAO,IAAP,aAAO,EAAP;AACD","sourcesContent":["import invariant from 'fbjs/lib/invariant';\nimport AnimatedNode, { getCallID, setCallID } from './AnimatedNode';\nimport AnimatedClock from './AnimatedClock';\nimport { val } from '../val';\n\nexport class AnimatedParam extends AnimatedNode {\n  argsStack = [];\n  _prevCallID;\n  \n  constructor() {\n    super({ type: 'param' }, []);\n    this.__attach();\n  }\n\n  beginContext(ref, prevCallID) {\n    this._prevCallID = prevCallID;\n    this.argsStack.push(ref);\n  }\n\n  endContext() {\n    this.argsStack.pop();\n  }\n\n  _getTopNode() {\n    if (this.argsStack.length === 0) throw new Error(`param: Invocation failed because argsStack is empty`);\n    const top = this.argsStack[this.argsStack.length - 1];\n    return top;\n  }\n\n  setValue(value) {\n    const top = this._getTopNode();\n    if (top.setValue) {\n      const callID = getCallID();\n      setCallID(this._prevCallID);\n      top.setValue(value);\n      setCallID(callID);\n    } else {\n      throw new Error(`param: setValue(${value}) failed because the top element has no known method for updating it's current value.`)\n    }\n  }\n  \n  __onEvaluate() {\n    const callID = getCallID();\n    setCallID(this._prevCallID);\n    const top = this._getTopNode();\n    const value = val(top);\n    setCallID(callID);\n    return value;\n  }\n\n  start() {\n    const node = this._getTopNode();\n    invariant(\n      node instanceof AnimatedClock || node instanceof AnimatedParam,\n      `param: top node should be of type AnimatedClock but got ${node}`\n    );\n    node.start();\n  }\n\n  stop() {\n    const node = this._getTopNode();\n    invariant(\n      node instanceof AnimatedClock || node instanceof AnimatedParam,\n      `param: top node should be of type AnimatedClock but got ${node}`\n    );\n    node.stop();\n  }\n\n  isRunning() {\n    const node = this._getTopNode();\n\n    if (node instanceof AnimatedParam) {\n      return node.isRunning()\n    }\n    invariant(\n      node instanceof AnimatedClock,\n      `param: top node should be of type AnimatedClock but got ${node}`\n    );\n    return node.isStarted();\n  }\n}\n\nexport function createAnimatedParam() {\n  return new AnimatedParam();\n}\n"]},"metadata":{},"sourceType":"module"}