{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { ScreenContainer } from 'react-native-screens';\nimport createTabNavigator from \"../utils/createTabNavigator\";\nimport BottomTabBar from \"../views/BottomTabBar\";\nimport ResourceSavingScene from \"../views/ResourceSavingScene\";\n\nclass TabNavigationView extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"state\", {\n      loaded: [this.props.navigation.state.index]\n    });\n\n    _defineProperty(this, \"_getButtonComponent\", (_ref) => {\n      var {\n        route\n      } = _ref;\n      var {\n        descriptors\n      } = this.props;\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n\n      if (options.tabBarButtonComponent) {\n        return options.tabBarButtonComponent;\n      }\n\n      return undefined;\n    });\n\n    _defineProperty(this, \"_renderTabBar\", () => {\n      var {\n        tabBarComponent: TabBarComponent = BottomTabBar,\n        tabBarOptions,\n        navigation,\n        screenProps,\n        getLabelText,\n        getAccessibilityLabel,\n        getAccessibilityRole,\n        getAccessibilityStates,\n        getTestID,\n        renderIcon,\n        onTabPress,\n        onTabLongPress\n      } = this.props;\n      var {\n        descriptors\n      } = this.props;\n      var {\n        state\n      } = this.props.navigation;\n      var route = state.routes[state.index];\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n\n      if (options.tabBarVisible === false) {\n        return null;\n      }\n\n      return React.createElement(TabBarComponent, _extends({}, tabBarOptions, {\n        jumpTo: this._jumpTo,\n        navigation: navigation,\n        screenProps: screenProps,\n        onTabPress: onTabPress,\n        onTabLongPress: onTabLongPress,\n        getLabelText: getLabelText,\n        getButtonComponent: this._getButtonComponent,\n        getAccessibilityLabel: getAccessibilityLabel,\n        getAccessibilityRole: getAccessibilityRole,\n        getAccessibilityStates: getAccessibilityStates,\n        getTestID: getTestID,\n        renderIcon: renderIcon\n      }));\n    });\n\n    _defineProperty(this, \"_jumpTo\", key => {\n      var {\n        navigation,\n        onIndexChange\n      } = this.props;\n      var index = navigation.state.routes.findIndex(route => route.key === key);\n      onIndexChange(index);\n    });\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    var {\n      index\n    } = nextProps.navigation.state;\n    return {\n      loaded: prevState.loaded.includes(index) ? prevState.loaded : [...prevState.loaded, index]\n    };\n  }\n\n  render() {\n    var {\n      navigation,\n      renderScene,\n      lazy\n    } = this.props;\n    var {\n      routes\n    } = navigation.state;\n    var {\n      loaded\n    } = this.state;\n    return React.createElement(View, {\n      style: styles.container\n    }, React.createElement(ScreenContainer, {\n      style: styles.pages\n    }, routes.map((route, index) => {\n      if (lazy && !loaded.includes(index)) {\n        return null;\n      }\n\n      var isFocused = navigation.state.index === index;\n      return React.createElement(ResourceSavingScene, {\n        key: route.key,\n        style: StyleSheet.absoluteFill,\n        isVisible: isFocused\n      }, renderScene({\n        route\n      }));\n    })), this._renderTabBar());\n  }\n\n}\n\n_defineProperty(TabNavigationView, \"defaultProps\", {\n  lazy: true,\n  getAccessibilityRole: () => 'button',\n  getAccessibilityStates: (_ref2) => {\n    var {\n      focused\n    } = _ref2;\n    return focused ? ['selected'] : [];\n  }\n});\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  pages: {\n    flex: 1\n  }\n});\nexport default createTabNavigator(TabNavigationView);","map":{"version":3,"sources":["createBottomTabNavigator.tsx"],"names":["TabNavigationView","React","lazy","getAccessibilityRole","getAccessibilityStates","focused","index","nextProps","loaded","prevState","route","descriptors","descriptor","options","tabBarComponent","TabBarComponent","onTabLongPress","state","renderIcon","key","onIndexChange","navigation","render","routes","styles","container","pages","isFocused","StyleSheet","renderScene","flex","overflow","createTabNavigator"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet, AccessibilityRole } from 'react-native';\nimport { NavigationRoute } from 'react-navigation';\n\nimport { ScreenContainer } from 'react-native-screens';\n\nimport createTabNavigator, {\n  NavigationViewProps,\n} from '../utils/createTabNavigator';\nimport BottomTabBar from '../views/BottomTabBar';\nimport ResourceSavingScene from '../views/ResourceSavingScene';\nimport {\n  NavigationTabProp,\n  NavigationBottomTabOptions,\n  BottomTabBarOptions,\n  SceneDescriptorMap,\n} from '../types';\n\ntype Config = {\n  lazy?: boolean;\n  tabBarComponent?: React.ComponentType<any>;\n  tabBarOptions?: BottomTabBarOptions;\n};\n\ntype Props = NavigationViewProps &\n  Config & {\n    getAccessibilityRole: (props: {\n      route: NavigationRoute;\n    }) => AccessibilityRole | undefined;\n    getAccessibilityStates: (props: {\n      route: NavigationRoute;\n      focused: boolean;\n    }) => string[];\n    navigation: NavigationTabProp;\n    descriptors: SceneDescriptorMap;\n    screenProps?: unknown;\n  };\n\ntype State = {\n  loaded: number[];\n};\n\nclass TabNavigationView extends React.PureComponent<Props, State> {\n  static defaultProps = {\n    lazy: true,\n    getAccessibilityRole: (): AccessibilityRole => 'button',\n    getAccessibilityStates: ({ focused }: { focused: boolean }) =>\n      focused ? ['selected'] : [],\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    const { index } = nextProps.navigation.state;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(index)\n        ? prevState.loaded\n        : [...prevState.loaded, index],\n    };\n  }\n\n  state = {\n    loaded: [this.props.navigation.state.index],\n  };\n\n  _getButtonComponent = ({ route }: { route: NavigationRoute }) => {\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    if (options.tabBarButtonComponent) {\n      return options.tabBarButtonComponent;\n    }\n\n    return undefined;\n  };\n\n  _renderTabBar = () => {\n    const {\n      tabBarComponent: TabBarComponent = BottomTabBar,\n      tabBarOptions,\n      navigation,\n      screenProps,\n      getLabelText,\n      getAccessibilityLabel,\n      getAccessibilityRole,\n      getAccessibilityStates,\n      getTestID,\n      renderIcon,\n      onTabPress,\n      onTabLongPress,\n    } = this.props;\n\n    const { descriptors } = this.props;\n    const { state } = this.props.navigation;\n    const route = state.routes[state.index];\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    if (options.tabBarVisible === false) {\n      return null;\n    }\n\n    return (\n      <TabBarComponent\n        {...tabBarOptions}\n        jumpTo={this._jumpTo}\n        navigation={navigation}\n        screenProps={screenProps}\n        onTabPress={onTabPress}\n        onTabLongPress={onTabLongPress}\n        getLabelText={getLabelText}\n        getButtonComponent={this._getButtonComponent}\n        getAccessibilityLabel={getAccessibilityLabel}\n        getAccessibilityRole={getAccessibilityRole}\n        getAccessibilityStates={getAccessibilityStates}\n        getTestID={getTestID}\n        renderIcon={renderIcon}\n      />\n    );\n  };\n\n  _jumpTo = (key: string) => {\n    const { navigation, onIndexChange } = this.props;\n\n    const index = navigation.state.routes.findIndex(\n      (route) => route.key === key\n    );\n\n    onIndexChange(index);\n  };\n\n  render() {\n    const { navigation, renderScene, lazy } = this.props;\n    const { routes } = navigation.state;\n    const { loaded } = this.state;\n\n    return (\n      <View style={styles.container}>\n        <ScreenContainer style={styles.pages}>\n          {routes.map((route, index) => {\n            if (lazy && !loaded.includes(index)) {\n              // Don't render a screen if we've never navigated to it\n              return null;\n            }\n\n            const isFocused = navigation.state.index === index;\n\n            return (\n              <ResourceSavingScene\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                isVisible={isFocused}\n              >\n                {renderScene({ route })}\n              </ResourceSavingScene>\n            );\n          })}\n        </ScreenContainer>\n        {this._renderTabBar()}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  pages: {\n    flex: 1,\n  },\n});\n\nexport default createTabNavigator<Config, NavigationBottomTabOptions, Props>(\n  TabNavigationView\n);\n"]},"metadata":{},"sourceType":"module"}