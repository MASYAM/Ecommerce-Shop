{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport { Actions } from 'react-native-router-flux';\nimport { ActionStatusTypeValues } from \"../../constants/actionStatusTypes\";\nimport { EnvValues } from \"../../constants\";\nexport var HOME_PAGE_BANNER = 'HOME_PAGE_BANNER';\nexport var PRODUCT_DETAIL = 'PRODUCT_DETAIL';\nexport var PRODUCT_CATEGORIES = 'PRODUCT_CATEGORIES';\nvar timer;\nexport var authenticate = (userId, token) => {\n  return dispatch => {\n    dispatch({\n      type: AUTHENTICATE,\n      token: token\n    });\n  };\n};\nexport var getProductDetail = (viewId, productId) => {\n  return function () {\n    var _ref = _asyncToGenerator(function* (dispatch, getState) {\n      dispatch({\n        type: PRODUCT_DETAIL,\n        status: ActionStatusTypeValues.STARTED,\n        viewId,\n        payload: {}\n      });\n      var token = getState().auth.token;\n\n      if (!token) {\n        console.warn(\"Missing required parameters.\", {\n          token\n        });\n        dispatch({\n          type: PRODUCT_DETAIL,\n          status: ActionStatusTypeValues.ERROR,\n          viewId,\n          payload: {\n            error: new Error(\"Missing required parameters.\"),\n            token\n          }\n        });\n        return;\n      }\n\n      var finalURL = EnvValues.API_PATH + 'products/detail/' + productId;\n      console.log(finalURL);\n      var resData = null;\n      var response = null;\n\n      try {\n        response = yield fetch(finalURL, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            'token': token,\n            'id': productId\n          })\n        });\n        resData = yield response.json();\n      } catch (error) {\n        console.log(error);\n        dispatch({\n          type: PRODUCT_DETAIL,\n          status: ActionStatusTypeValues.ERROR,\n          viewId,\n          payload: {\n            token,\n            error: resData\n          }\n        });\n        return;\n      }\n\n      if (!response.ok) {\n        dispatch({\n          type: PRODUCT_DETAIL,\n          status: ActionStatusTypeValues.ERROR,\n          viewId,\n          payload: {\n            token,\n            error: resData\n          }\n        });\n        return;\n      }\n\n      dispatch({\n        type: PRODUCT_DETAIL,\n        viewId,\n        status: ActionStatusTypeValues.COMPLETED,\n        payload: {},\n        productDetail: resData.result.productDetail,\n        productDetailStatus: resData.result.status,\n        productDetailErrorMessage: resData.result.error\n      });\n    });\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var getHomePageBanner = viewId => {\n  return function () {\n    var _ref2 = _asyncToGenerator(function* (dispatch, getState) {\n      dispatch({\n        type: HOME_PAGE_BANNER,\n        status: ActionStatusTypeValues.STARTED,\n        viewId,\n        payload: {}\n      });\n      var token = getState().auth.token;\n      console.log(\"token   >>\" + token);\n\n      if (!token) {\n        console.warn(\"Missing required parameters.\", {\n          token\n        });\n        dispatch({\n          type: HOME_PAGE_BANNER,\n          status: ActionStatusTypeValues.ERROR,\n          viewId,\n          payload: {\n            error: new Error(\"Missing required parameters.\"),\n            token\n          }\n        });\n        return;\n      }\n\n      console.log(\"HEHEHE   00001\");\n      var finalURL = EnvValues.API_PATH + 'products/homeBanner';\n      var resData = null;\n      var response = null;\n\n      try {\n        response = yield fetch(finalURL, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            'token': token\n          })\n        });\n        resData = yield response.json();\n      } catch (error) {\n        dispatch({\n          type: HOME_PAGE_BANNER,\n          status: ActionStatusTypeValues.ERROR,\n          viewId,\n          payload: {\n            token,\n            error: resData\n          }\n        });\n        return;\n      }\n\n      if (!response.ok) {\n        dispatch({\n          type: HOME_PAGE_BANNER,\n          status: ActionStatusTypeValues.ERROR,\n          viewId,\n          payload: {\n            token,\n            error: resData\n          }\n        });\n        return;\n      }\n\n      console.log(\"HEHEHE   00002\");\n      dispatch({\n        type: HOME_PAGE_BANNER,\n        viewId,\n        status: ActionStatusTypeValues.COMPLETED,\n        payload: {},\n        homeBanner: resData.result.homeBanner,\n        designerCollectionList: resData.result.designerCollectionList,\n        holidaySaleList: resData.result.holidaySaleList,\n        topTrendsList: resData.result.topTrendsList,\n        homeBannerStatus: resData.result.status,\n        homeBannerErrorMessage: resData.result.error\n      });\n    });\n\n    return function (_x3, _x4) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var getCategoriesListing = viewId => {\n  return function () {\n    var _ref3 = _asyncToGenerator(function* (dispatch, getState) {\n      dispatch({\n        type: PRODUCT_CATEGORIES,\n        status: ActionStatusTypeValues.STARTED,\n        viewId,\n        payload: {}\n      });\n      var token = getState().auth.token;\n\n      if (!token) {\n        console.warn(\"Missing required parameters.\", {\n          token\n        });\n        dispatch({\n          type: PRODUCT_CATEGORIES,\n          status: ActionStatusTypeValues.ERROR,\n          viewId,\n          payload: {\n            error: new Error(\"Missing required parameters.\"),\n            token\n          }\n        });\n        return;\n      }\n\n      var finalURL = EnvValues.API_PATH + 'products/cateogries';\n      var resData = null;\n      var response = null;\n\n      try {\n        response = yield fetch(finalURL, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            'token': token\n          })\n        });\n        resData = yield response.json();\n      } catch (error) {\n        dispatch({\n          type: PRODUCT_CATEGORIES,\n          status: ActionStatusTypeValues.ERROR,\n          viewId,\n          payload: {\n            token,\n            error: resData\n          }\n        });\n        return;\n      }\n\n      if (!response.ok) {\n        dispatch({\n          type: PRODUCT_CATEGORIES,\n          status: ActionStatusTypeValues.ERROR,\n          viewId,\n          payload: {\n            token,\n            error: resData\n          }\n        });\n        return;\n      }\n\n      dispatch({\n        type: PRODUCT_CATEGORIES,\n        viewId,\n        status: ActionStatusTypeValues.COMPLETED,\n        payload: {},\n        alineDress: resData.result.alineDress,\n        tentDress: resData.result.tentDress,\n        yokeDress: resData.result.yokeDress,\n        empireLineDress: resData.result.empireLineDress,\n        shiftDress: resData.result.shiftDress,\n        productCatStatus: resData.result.status,\n        productCatErrorMessage: resData.result.error\n      });\n    });\n\n    return function (_x5, _x6) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/src/store/actions/products.js"],"names":["Actions","ActionStatusTypeValues","EnvValues","HOME_PAGE_BANNER","PRODUCT_DETAIL","PRODUCT_CATEGORIES","timer","authenticate","userId","token","dispatch","type","AUTHENTICATE","getProductDetail","viewId","productId","getState","status","STARTED","payload","auth","console","warn","ERROR","error","Error","finalURL","API_PATH","log","resData","response","fetch","method","headers","body","JSON","stringify","json","ok","COMPLETED","productDetail","result","productDetailStatus","productDetailErrorMessage","getHomePageBanner","homeBanner","designerCollectionList","holidaySaleList","topTrendsList","homeBannerStatus","homeBannerErrorMessage","getCategoriesListing","alineDress","tentDress","yokeDress","empireLineDress","shiftDress","productCatStatus","productCatErrorMessage"],"mappings":"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","sourcesContent":["import { AsyncStorage } from 'react-native';\nimport { Actions  } from 'react-native-router-flux';\nimport { ActionStatusTypeValues } from '../../constants/actionStatusTypes';\nimport { EnvValues } from '../../constants';\n// export const SIGNUP = 'SIGNUP';\n// export const LOGIN = 'LOGIN';\n\nexport const HOME_PAGE_BANNER = 'HOME_PAGE_BANNER';\nexport const PRODUCT_DETAIL = 'PRODUCT_DETAIL';\nexport const PRODUCT_CATEGORIES = 'PRODUCT_CATEGORIES';\n\n\nlet timer;\n\nexport const authenticate = (userId, token) => {\n  return dispatch => {\n    dispatch({ type: AUTHENTICATE, token: token });\n  };\n};\n\n\n\nexport const getProductDetail = (viewId, productId) => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: PRODUCT_DETAIL,\n      status: ActionStatusTypeValues.STARTED,\n      viewId,\n      payload: {}\n    });\n\n    const token = getState().auth.token;\n    if ( !token) {\n      console.warn(\"Missing required parameters.\" , {token});\n      dispatch({\n        type: PRODUCT_DETAIL,\n        status: ActionStatusTypeValues.ERROR,\n        viewId,\n        payload: {error: new Error(\"Missing required parameters.\"), token}\n      });\n      return;\n    }\n\n    const finalURL = EnvValues.API_PATH + 'products/detail/'+productId;\n\n    console.log(finalURL);\n\n    let resData = null;\n    let response = null;\n    try {\n            response = await  fetch(finalURL,\n            {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  'token':token,\n                  'id':productId\n                })\n              }\n            );\n      resData = await response.json();\n    } catch (error ) {\n      console.log(error);\n\n          dispatch({\n            type: PRODUCT_DETAIL,\n            status: ActionStatusTypeValues.ERROR,\n            viewId,\n            payload: {token, error: resData}\n          });\n          return;\n    }\n    if (!response.ok) {\n      dispatch({\n        type: PRODUCT_DETAIL,\n        status: ActionStatusTypeValues.ERROR,\n        viewId,\n        payload: {token, error: resData}\n      });\n      return;\n    }\n\n    \n\n\n\n    dispatch({ \n      type: PRODUCT_DETAIL, \n      viewId,\n      status: ActionStatusTypeValues.COMPLETED, \n      payload: { },\n      productDetail: resData.result.productDetail,\n      productDetailStatus: resData.result.status,\n      productDetailErrorMessage: resData.result.error\n    });\n  };\n};\n\n\n\n\nexport const getHomePageBanner = (viewId) => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: HOME_PAGE_BANNER,\n      status: ActionStatusTypeValues.STARTED,\n      viewId,\n      payload: {}\n    });\n\n    const token = getState().auth.token;\n\n    console.log(\"token   >>\" + token)\n\n\n\n\n    if ( !token) {\n      console.warn(\"Missing required parameters.\" , {token});\n      dispatch({\n        type: HOME_PAGE_BANNER,\n        status: ActionStatusTypeValues.ERROR,\n        viewId,\n        payload: {error: new Error(\"Missing required parameters.\"), token}\n      });\n      return;\n    }\nconsole.log(\"HEHEHE   00001\")\n\n    const finalURL = EnvValues.API_PATH + 'products/homeBanner';\n    let resData = null;\n    let response = null;\n    try {\n            response = await  fetch(finalURL,\n            {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  'token':token\n                })\n              }\n            );\n      resData = await response.json();\n    } catch (error ) {\n          dispatch({\n            type: HOME_PAGE_BANNER,\n            status: ActionStatusTypeValues.ERROR,\n            viewId,\n            payload: {token, error: resData}\n          });\n          return;\n    }\n    if (!response.ok) {\n      dispatch({\n        type: HOME_PAGE_BANNER,\n        status: ActionStatusTypeValues.ERROR,\n        viewId,\n        payload: {token, error: resData}\n      });\n      return;\n    }\n\n\n    console.log(\"HEHEHE   00002\")\n\n    dispatch({ \n      type: HOME_PAGE_BANNER, \n      viewId,\n      status: ActionStatusTypeValues.COMPLETED, \n      payload: { },\n      homeBanner: resData.result.homeBanner,\n      designerCollectionList: resData.result.designerCollectionList,\n      holidaySaleList: resData.result.holidaySaleList,\n      topTrendsList: resData.result.topTrendsList,\n      homeBannerStatus: resData.result.status,\n      homeBannerErrorMessage: resData.result.error\n    });\n  };\n};\n\n\n\n\n\n\n\n\n\n\nexport const getCategoriesListing = (viewId) => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: PRODUCT_CATEGORIES,\n      status: ActionStatusTypeValues.STARTED,\n      viewId,\n      payload: {}\n    });\n    const token = getState().auth.token;\n    if ( !token) {\n      console.warn(\"Missing required parameters.\" , {token});\n      dispatch({\n        type: PRODUCT_CATEGORIES,\n        status: ActionStatusTypeValues.ERROR,\n        viewId,\n        payload: {error: new Error(\"Missing required parameters.\"), token}\n      });\n      return;\n    }\n    const finalURL = EnvValues.API_PATH + 'products/cateogries';\n    let resData = null;\n    let response = null;\n    try {\n            response = await  fetch(finalURL,\n            {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  'token':token\n                })\n              }\n            );\n      resData = await response.json();\n    } catch (error ) {\n          dispatch({\n            type: PRODUCT_CATEGORIES,\n            status: ActionStatusTypeValues.ERROR,\n            viewId,\n            payload: {token, error: resData}\n          });\n          return;\n    }\n    if (!response.ok) {\n      dispatch({\n        type: PRODUCT_CATEGORIES,\n        status: ActionStatusTypeValues.ERROR,\n        viewId,\n        payload: {token, error: resData}\n      });\n      return;\n    }\n    dispatch({ \n      type: PRODUCT_CATEGORIES, \n      viewId,\n      status: ActionStatusTypeValues.COMPLETED, \n      payload: { },\n      alineDress: resData.result.alineDress,\n      tentDress: resData.result.tentDress,\n      yokeDress: resData.result.yokeDress,\n      empireLineDress: resData.result.empireLineDress,\n      shiftDress: resData.result.shiftDress,\n      productCatStatus: resData.result.status,\n      productCatErrorMessage: resData.result.error\n    });\n  };\n};"]},"metadata":{},"sourceType":"module"}