{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nexport default {\n  get name() {\n    return 'ExpoWebBrowser';\n  },\n\n  openBrowserAsync(url) {\n    var _arguments = arguments;\n    return _asyncToGenerator(function* () {\n      var browserParams = _arguments.length > 1 && _arguments[1] !== undefined ? _arguments[1] : {};\n      var {\n        windowName = '_blank',\n        windowFeatures\n      } = browserParams;\n      window.open(url, windowName, windowFeatures);\n      return {\n        type: 'dismiss'\n      };\n    })();\n  }\n\n};","map":{"version":3,"sources":["../src/ExpoWebBrowser.web.ts"],"names":[],"mappings":";;;;AAEA,eAAe;AACb,MAAI,IAAJ,GAAQ;AACN,WAAO,gBAAP;AACD,GAHY;;AAIP,EAAA,gBAAN,CACE,GADF,EAEwC;AAAA;AAAA;AAAA,UAAtC,aAAsC,0EAAF,EAAE;AAEtC,UAAM;AAAE,QAAA,UAAU,GAAG,QAAf;AAAyB,QAAA;AAAzB,UAA4C,aAAlD;AACA,MAAA,MAAM,CAAC,IAAP,CAAY,GAAZ,EAAiB,UAAjB,EAA6B,cAA7B;AACA,aAAO;AAAE,QAAA,IAAI,EAAE;AAAR,OAAP;AAJsC;AAKvC;;AAXY,CAAf","sourcesContent":["import { BrowserResult, OpenBrowserOptions } from './WebBrowser.types';\n\nexport default {\n  get name() {\n    return 'ExpoWebBrowser';\n  },\n  async openBrowserAsync(\n    url: string,\n    browserParams: OpenBrowserOptions = {}\n  ): Promise<BrowserResult> {\n    const { windowName = '_blank', windowFeatures } = browserParams;\n    window.open(url, windowName, windowFeatures);\n    return { type: 'dismiss' };\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}