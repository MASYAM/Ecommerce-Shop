{"ast":null,"code":"import invariant from 'fbjs/lib/invariant';\nimport { val } from \"../val\";\nimport { adapt, createAnimatedBlock as block } from \"./AnimatedBlock\";\nimport { createAnimatedCall as call } from \"./AnimatedCall\";\nimport AnimatedNode from \"./AnimatedNode\";\n\nclass AnimatedDebug extends AnimatedNode {\n  constructor(message, value) {\n    invariant(typeof message === 'string', \"Reanimated: Animated.debug node first argument should be of type string but got \".concat(message));\n    invariant(value instanceof AnimatedNode, \"Reanimated: Animated.debug node second argument should be of type AnimatedNode but got \".concat(value));\n    super({\n      type: 'debug',\n      message,\n      value\n    }, [value]);\n    this._message = message;\n    this._value = value;\n  }\n\n  toString() {\n    return \"AnimatedDebug, id: \".concat(this.__nodeID);\n  }\n\n  __onEvaluate() {\n    var value = val(this._value);\n    console.log(this._message, value);\n    return value;\n  }\n\n}\n\nexport function createAnimatedDebug(message, value) {\n  if (__DEV__) {\n    var runningInRemoteDebugger = typeof atob !== 'undefined';\n    var runningInExpoShell = global.Expo && global.Expo.Constants.appOwnership !== 'standalone';\n\n    if (runningInRemoteDebugger || runningInExpoShell) {\n      return block([call([value], (_ref) => {\n        var [a] = _ref;\n        return console.log(\"\".concat(message, \" \").concat(a));\n      }), value]);\n    } else {\n      return new AnimatedDebug(message, adapt(value));\n    }\n  }\n\n  return value;\n}","map":{"version":3,"sources":["/Users/m.asyam/Desktop/MY-PROJECTS/react-project/client-pack/node_modules/react-native-reanimated/src/core/AnimatedDebug.js"],"names":["invariant","val","adapt","createAnimatedBlock","block","createAnimatedCall","call","AnimatedNode","AnimatedDebug","constructor","message","value","type","_message","_value","toString","__nodeID","__onEvaluate","console","log","createAnimatedDebug","__DEV__","runningInRemoteDebugger","atob","runningInExpoShell","global","Expo","Constants","appOwnership","a"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,oBAAtB;AACA,SAASC,GAAT;AACA,SAASC,KAAT,EAAgBC,mBAAmB,IAAIC,KAAvC;AACA,SAASC,kBAAkB,IAAIC,IAA/B;AACA,OAAOC,YAAP;;AAEA,MAAMC,aAAN,SAA4BD,YAA5B,CAAyC;AAIvCE,EAAAA,WAAW,CAACC,OAAD,EAAUC,KAAV,EAAiB;AAC1BX,IAAAA,SAAS,CACP,OAAOU,OAAP,KAAmB,QADZ,4FAE4EA,OAF5E,EAAT;AAIAV,IAAAA,SAAS,CACPW,KAAK,YAAYJ,YADV,mGAEmFI,KAFnF,EAAT;AAIA,UAAM;AAAEC,MAAAA,IAAI,EAAE,OAAR;AAAiBF,MAAAA,OAAjB;AAA0BC,MAAAA;AAA1B,KAAN,EAAyC,CAACA,KAAD,CAAzC;AACA,SAAKE,QAAL,GAAgBH,OAAhB;AACA,SAAKI,MAAL,GAAcH,KAAd;AACD;;AAEDI,EAAAA,QAAQ,GAAG;AACT,wCAA6B,KAAKC,QAAlC;AACD;;AAEDC,EAAAA,YAAY,GAAG;AACb,QAAMN,KAAK,GAAGV,GAAG,CAAC,KAAKa,MAAN,CAAjB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKN,QAAjB,EAA2BF,KAA3B;AACA,WAAOA,KAAP;AACD;;AA1BsC;;AA6BzC,OAAO,SAASS,mBAAT,CAA6BV,OAA7B,EAAsCC,KAAtC,EAA6C;AAClD,MAAIU,OAAJ,EAAa;AACX,QAAMC,uBAAuB,GAAG,OAAOC,IAAP,KAAgB,WAAhD;AAIA,QAAMC,kBAAkB,GACtBC,MAAM,CAACC,IAAP,IAAeD,MAAM,CAACC,IAAP,CAAYC,SAAZ,CAAsBC,YAAtB,KAAuC,YADxD;;AAGA,QAAIN,uBAAuB,IAAIE,kBAA/B,EAAmD;AAGjD,aAAOpB,KAAK,CAAC,CACXE,IAAI,CAAC,CAACK,KAAD,CAAD,EAAU;AAAA,YAAC,CAACkB,CAAD,CAAD;AAAA,eAASX,OAAO,CAACC,GAAR,WAAeT,OAAf,cAA0BmB,CAA1B,EAAT;AAAA,OAAV,CADO,EAEXlB,KAFW,CAAD,CAAZ;AAID,KAPD,MAOO;AACL,aAAO,IAAIH,aAAJ,CAAkBE,OAAlB,EAA2BR,KAAK,CAACS,KAAD,CAAhC,CAAP;AACD;AACF;;AAED,SAAOA,KAAP;AACD","sourcesContent":["import invariant from 'fbjs/lib/invariant';\nimport { val } from '../val';\nimport { adapt, createAnimatedBlock as block } from './AnimatedBlock';\nimport { createAnimatedCall as call } from './AnimatedCall';\nimport AnimatedNode from './AnimatedNode';\n\nclass AnimatedDebug extends AnimatedNode {\n  _message;\n  _value;\n\n  constructor(message, value) {\n    invariant(\n      typeof message === 'string',\n      `Reanimated: Animated.debug node first argument should be of type string but got ${message}`\n    );\n    invariant(\n      value instanceof AnimatedNode,\n      `Reanimated: Animated.debug node second argument should be of type AnimatedNode but got ${value}`\n    );\n    super({ type: 'debug', message, value }, [value]);\n    this._message = message;\n    this._value = value;\n  }\n\n  toString() {\n    return `AnimatedDebug, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    const value = val(this._value);\n    console.log(this._message, value);\n    return value;\n  }\n}\n\nexport function createAnimatedDebug(message, value) {\n  if (__DEV__) {\n    const runningInRemoteDebugger = typeof atob !== 'undefined';\n    // hack to detect if app is running in remote debugger\n    // https://stackoverflow.com/questions/39022216\n\n    const runningInExpoShell =\n      global.Expo && global.Expo.Constants.appOwnership !== 'standalone';\n\n    if (runningInRemoteDebugger || runningInExpoShell) {\n      // When running in expo or remote debugger we use JS console.log to output variables\n      // otherwise we output to the native console using native debug node\n      return block([\n        call([value], ([a]) => console.log(`${message} ${a}`)),\n        value,\n      ]);\n    } else {\n      return new AnimatedDebug(message, adapt(value));\n    }\n  }\n  // Debugging is disabled in PROD\n  return value;\n}\n"]},"metadata":{},"sourceType":"module"}