{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport invariant from 'fbjs/lib/invariant';\nimport { val } from \"../val\";\nimport AnimatedNode from \"./AnimatedNode\";\nimport InternalAnimatedValue from \"./InternalAnimatedValue\";\n\nclass AnimatedBlock extends AnimatedNode {\n  constructor(array) {\n    invariant(array.every(el => el instanceof AnimatedNode), \"Reanimated: Animated.block node argument should be an array with elements of type AnimatedNode. One or more of them are not AnimatedNodes\");\n    super({\n      type: 'block',\n      block: array\n    }, array);\n\n    _defineProperty(this, \"_array\", void 0);\n\n    this._array = array;\n  }\n\n  toString() {\n    return \"AnimatedBlock, id: \".concat(this.__nodeID);\n  }\n\n  __onEvaluate() {\n    var result;\n\n    this._array.forEach(node => {\n      result = val(node);\n    });\n\n    return result;\n  }\n\n}\n\nexport function createAnimatedBlock(items) {\n  return adapt(items);\n}\n\nfunction nodify(v) {\n  if (typeof v === 'object' && (v === null || v === void 0 ? void 0 : v.__isProxy)) {\n    if (!v.__val) {\n      v.__val = new InternalAnimatedValue(0);\n    }\n\n    return v.__val;\n  }\n\n  return v instanceof AnimatedNode ? v : InternalAnimatedValue.valueForConstant(v);\n}\n\nexport function adapt(v) {\n  return Array.isArray(v) ? new AnimatedBlock(v.map(node => adapt(node))) : nodify(v);\n}","map":{"version":3,"sources":["AnimatedBlock.js"],"names":["constructor","invariant","array","el","type","block","toString","__onEvaluate","node","result","val","adapt","v","InternalAnimatedValue","Array","nodify"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAA,SAAA,MAAA,oBAAA;AACA,SAAA,GAAA;AACA,OAAA,YAAA;AACA,OAAA,qBAAA;;AAEA,MAAA,aAAA,SAAA,YAAA,CAAyC;AAGvCA,EAAAA,WAAW,CAAA,KAAA,EAAQ;AACjBC,IAAAA,SAAS,CACPC,KAAK,CAALA,KAAAA,CAAYC,EAAE,IAAIA,EAAE,YADb,YACPD,CADO,EAATD,2IAAS,CAATA;AAIA,UAAM;AAAEG,MAAAA,IAAI,EAAN,OAAA;AAAiBC,MAAAA,KAAK,EAAEH;AAAxB,KAAN,EAAA,KAAA;;AALiB,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EAAA,KAAA,CAAA,CAAA;;AAMjB,SAAA,MAAA,GAAA,KAAA;AACD;;AAEDI,EAAAA,QAAQ,GAAG;AACT,WAAA,sBAAA,MAAA,CAA6B,KAA7B,QAAA,CAAA;AACD;;AAEDC,EAAAA,YAAY,GAAG;AACb,QAAA,MAAA;;AACA,SAAA,MAAA,CAAA,OAAA,CAAoBC,IAAI,IAAI;AAC1BC,MAAAA,MAAM,GAAGC,GAAG,CAAZD,IAAY,CAAZA;AADF,KAAA;;AAGA,WAAA,MAAA;AACD;;AAtBsC;;AAyBzC,OAAO,SAAA,mBAAA,CAAA,KAAA,EAAoC;AACzC,SAAOE,KAAK,CAAZ,KAAY,CAAZ;AACD;;AAED,SAAA,MAAA,CAAA,CAAA,EAAmB;AACjB,MAAI,OAAA,CAAA,KAAA,QAAA,KAAyBC,CAAzB,KAAA,IAAyBA,IAAAA,CAAzB,KAAA,KAAA,CAAyBA,GAAzB,KAAA,CAAyBA,GAAAA,CAAC,CAA9B,SAAI,CAAJ,EAA2C;AACzC,QAAI,CAACA,CAAC,CAAN,KAAA,EAAc;AACZA,MAAAA,CAAC,CAADA,KAAAA,GAAU,IAAA,qBAAA,CAAVA,CAAU,CAAVA;AACD;;AACD,WAAOA,CAAC,CAAR,KAAA;AALe;;AAQjB,SAAOA,CAAC,YAADA,YAAAA,GAAAA,CAAAA,GAEHC,qBAAqB,CAArBA,gBAAAA,CAFJ,CAEIA,CAFJ;AAGD;;AAED,OAAO,SAAA,KAAA,CAAA,CAAA,EAAkB;AACvB,SAAOC,KAAK,CAALA,OAAAA,CAAAA,CAAAA,IACH,IAAA,aAAA,CAAkBF,CAAC,CAADA,GAAAA,CAAMJ,IAAI,IAAIG,KAAK,CADlCG,IACkC,CAAnBF,CAAlB,CADGE,GAEHC,MAAM,CAFV,CAEU,CAFV;AAGD","sourcesContent":["import invariant from 'fbjs/lib/invariant';\nimport { val } from '../val';\nimport AnimatedNode from './AnimatedNode';\nimport InternalAnimatedValue from './InternalAnimatedValue';\n\nclass AnimatedBlock extends AnimatedNode {\n  _array;\n\n  constructor(array) {\n    invariant(\n      array.every(el => el instanceof AnimatedNode),\n      `Reanimated: Animated.block node argument should be an array with elements of type AnimatedNode. One or more of them are not AnimatedNodes`\n    );\n    super({ type: 'block', block: array }, array);\n    this._array = array;\n  }\n\n  toString() {\n    return `AnimatedBlock, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    let result;\n    this._array.forEach(node => {\n      result = val(node);\n    });\n    return result;\n  }\n}\n\nexport function createAnimatedBlock(items) {\n  return adapt(items);\n}\n\nfunction nodify(v) {\n  if (typeof v === 'object' && v?.__isProxy) {\n    if (!v.__val) {\n      v.__val = new InternalAnimatedValue(0);\n    }\n    return v.__val;\n  }\n  // TODO: cache some typical static values (e.g. 0, 1, -1)\n  return v instanceof AnimatedNode\n    ? v\n    : InternalAnimatedValue.valueForConstant(v);\n}\n\nexport function adapt(v) {\n  return Array.isArray(v)\n    ? new AnimatedBlock(v.map(node => adapt(node)))\n    : nodify(v);\n}\n"]},"metadata":{},"sourceType":"module"}