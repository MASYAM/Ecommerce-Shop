{"version":3,"sources":["NavigationFocusEvents.js"],"names":["NavigationEventManager","React","Component","state","lastState","action","type","context","navigation","onEvent","props","isFocused","previous","routes","index","undefined","current","payload","key","_emitFocus","_emitBlur","isTransitioning","_lastWillBlurKey","_lastWillFocusKey","route","find","r","target","componentDidMount","_actionSubscription","addListener","_handleAction","_willFocusSubscription","_handleWillFocus","_willBlurSubscription","_handleWillBlur","componentWillUnmount","remove","render"],"mappings":"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","sourcesContent":["// @ts-check\n\nimport * as React from 'react';\n\n/**\n * @typedef {object} State\n * @prop {number} index\n * @prop {({ key: string } & (State | {}))[]} routes\n * @prop {boolean} [isTransitioning]\n *\n * @typedef {object} ParentPayload\n * @prop {string} type\n * @prop {object} action\n * @prop {State} state\n * @prop {State | {key: string, routes?: undefined, index?: undefined, isTransitioning?: undefined} | undefined | null} lastState\n * @prop {string} [context]\n *\n * @typedef {object} Payload\n * @prop {string} type\n * @prop {object} action\n * @prop {State | {key: string}} state\n * @prop {State | {key: string} | undefined | null} lastState\n * @prop {string} [context]\n *\n * @typedef {object} Props\n * @prop {object} navigation\n * @prop {Function} navigation.addListener\n * @prop {Function} navigation.removeListener\n * @prop {() => boolean} navigation.isFocused\n * @prop {() => object | undefined} navigation.dangerouslyGetParent\n * @prop {State} navigation.state\n * @prop {(target: string, type: string, data: any) => void} onEvent\n *\n * @extends {React.Component<Props>}\n */\nexport default class NavigationEventManager extends React.Component {\n  componentDidMount() {\n    const { navigation } = this.props;\n\n    this._actionSubscription = navigation.addListener(\n      'action',\n      this._handleAction\n    );\n\n    this._willFocusSubscription = navigation.addListener(\n      'willFocus',\n      this._handleWillFocus\n    );\n\n    this._willBlurSubscription = navigation.addListener(\n      'willBlur',\n      this._handleWillBlur\n    );\n  }\n\n  componentWillUnmount() {\n    this._actionSubscription?.remove();\n    this._willFocusSubscription?.remove();\n    this._willBlurSubscription?.remove();\n  }\n\n  /**\n   * @type {{ remove(): void } | undefined}\n   */\n  _actionSubscription;\n\n  /**\n   * @type {{ remove(): void } | undefined}\n   */\n  _willFocusSubscription;\n\n  /**\n   * @type {{ remove(): void } | undefined}\n   */\n  _willBlurSubscription;\n\n  /**\n   * @type {string | undefined}\n   */\n  _lastWillBlurKey;\n\n  /**\n   * @type {string | undefined}\n   */\n  _lastWillFocusKey;\n\n  /**\n   * The 'action' event will fire when navigation state changes.\n   * Detect if the focused route changed here and emit appropriate events.\n   *\n   * @param {ParentPayload} payload\n   */\n  _handleAction = ({ state, lastState, action, type, context }) => {\n    const { navigation, onEvent } = this.props;\n\n    // We should only emit events when the navigator is focused\n    // When navigator is not focused, screens inside shouldn't receive focused status either\n    if (!navigation.isFocused()) {\n      return;\n    }\n\n    const previous = lastState\n      ? lastState.routes?.[lastState.index]\n      : undefined;\n    const current = state.routes[state.index];\n\n    const payload = {\n      context: `${current.key}:${action.type}_${context || 'Root'}`,\n      state: current,\n      lastState: previous,\n      action,\n      type,\n    };\n\n    if (previous?.key !== current.key) {\n      this._emitFocus(current.key, payload);\n\n      if (previous?.key) {\n        this._emitBlur(previous.key, payload);\n      }\n    }\n\n    if (\n      lastState?.isTransitioning !== state.isTransitioning &&\n      state.isTransitioning === false\n    ) {\n      if (this._lastWillBlurKey) {\n        onEvent(this._lastWillBlurKey, 'didBlur', payload);\n      }\n\n      if (this._lastWillFocusKey) {\n        onEvent(this._lastWillFocusKey, 'didFocus', payload);\n      }\n    }\n\n    onEvent(current.key, 'action', payload);\n  };\n\n  /**\n   * @param {ParentPayload} payload\n   */\n  _handleWillFocus = ({ lastState, action, context, type }) => {\n    const { navigation } = this.props;\n    const route = navigation.state.routes[navigation.state.index];\n\n    this._emitFocus(route.key, {\n      context: `${route.key}:${action.type}_${context || 'Root'}`,\n      state: route,\n      lastState: lastState?.routes?.find((r) => r.key === route.key),\n      action,\n      type,\n    });\n  };\n\n  /**\n   * @param {ParentPayload} payload\n   */\n  _handleWillBlur = ({ lastState, action, context, type }) => {\n    const { navigation } = this.props;\n    const route = navigation.state.routes[navigation.state.index];\n\n    this._emitBlur(route.key, {\n      context: `${route.key}:${action.type}_${context || 'Root'}`,\n      state: route,\n      lastState: lastState?.routes?.find((r) => r.key === route.key),\n      action,\n      type,\n    });\n  };\n\n  /**\n   * @param {string} target\n   * @param {Payload} payload\n   */\n  _emitFocus = (target, payload) => {\n    if (this._lastWillBlurKey === target) {\n      this._lastWillBlurKey = undefined;\n    }\n\n    if (this._lastWillFocusKey === target) {\n      return;\n    }\n\n    this._lastWillFocusKey = target;\n\n    const { navigation, onEvent } = this.props;\n\n    onEvent(target, 'willFocus', payload);\n\n    if (typeof navigation.state.isTransitioning !== 'boolean') {\n      onEvent(target, 'didFocus', payload);\n    }\n  };\n\n  /**\n   * @param {string} target\n   * @param {Payload} payload\n   */\n  _emitBlur = (target, payload) => {\n    if (this._lastWillFocusKey === target) {\n      this._lastWillFocusKey = undefined;\n    }\n\n    if (this._lastWillBlurKey === target) {\n      return;\n    }\n\n    this._lastWillBlurKey = target;\n\n    const { navigation, onEvent } = this.props;\n\n    onEvent(target, 'willBlur', payload);\n\n    if (typeof navigation.state.isTransitioning !== 'boolean') {\n      onEvent(target, 'didBlur', payload);\n    }\n  };\n\n  render() {\n    return null;\n  }\n}\n"]}